'####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----
'####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----

'																														IP Name					: e-Swift Framework									
'																														Copyright © 2011 TCSL. All Rights Reserved       
'																														Framework Owner	: TCS ASU-ERP & Niche Testing COE			   
'																														Summary : 	e-Swift framework is an intellectual Property of TCSL Which works as	an accelerator for Automation Testing of ERP Solutions.	
'																														No part of this work may be reproduced, stored in a retrieval system,adapted or transmitted 		in any form or by any means electronic,	mechanical,photographic, 
'																														optic recording or otherwise without the prior written permission of TCSL. 			       	    

'####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----
'####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----


Function CreateUserEnvironmentVariable(strEnvironmentVarName,strEnvironmentVarValue)
		Set WshShell = CreateObject("WScript.Shell")
		Set WshDTEnv = WshShell.Environment("USER")
		If isEmpty(strEnvironmentVarValue) or isNull(strEnvironmentVarValue) Then
				strEnvironmentVarValue = ""
		End If
		WshDTEnv(strEnvironmentVarName) = strEnvironmentVarValue
		Set WshDTEnv = Nothing 
		Set WshShell  = Nothing 
End Function


Function GetValueOfUserEnvironmentVar(strEnvironmentVarName)
		Set WshShell = CreateObject("WScript.Shell")
		Set WshDTEnv = WshShell.Environment("USER")
		GetValueOfUserEnvironmentVar= WshDTEnv(strEnvironmentVarName)
		Set WshDTEnv = Nothing 
		Set WshShell  = Nothing 
End Function		


Function RemoveUserEnvironmentVariable(strEnvironmentVarName)
	Set WshShell = CreateObject("WScript.Shell")
	Set WshDTEnv = WshShell.Environment("USER")
    WshDTEnv.Remove(strEnvironmentVarName)
	Set WshDTEnv = Nothing 
	Set WshShell  = Nothing 
End Function


Class BalloonTooltipClass
					Private oNtfy,oToolTip,oIcon,icon_Path
                    Private sub Class_Initialize
                    'On Error Resume Next
								icon_Path=gstrIconPathForNotification
								Set oNtfy=DotNetFactory.CreateInstance("System.Windows.Forms.NotifyIcon","System.Windows.Forms")
								Set oToolTip =DotNetFactory.CreateInstance("System.Windows.Forms.ToolTipIcon","System.Windows.Forms")
								Set oIcon=DotNetFactory.CreateInstance("System.Drawing.Icon","System.Drawing",icon_Path)
					End Sub
					
					Function Show(ByVal strTitle,ByVal strContent)
								oNtfy.Icon=oIcon
								oNtfy.BalloonTipIcon=oToolTip.Info
								oNtfy.Visible=True
								oNtfy.Text = strTitle
								oNtfy.BalloonTipTitle = strTitle
								oNtfy.BalloonTipText=strContent
								oNtfy.ShowBalloonTip(5000)
					End Function
					
					Private Sub Class_Terminate
								oNtfy.Dispose()
								Set oIcon =Nothing
								Set oTool =Nothing
								Set oNtfy=Nothing
					End Sub

End Class


 '***********************************************************************************'***********************************************************************************
'Name of the Function  -> CreateRunTimeExcelFile
'Author		   						  ->TCS
'Dat		     						->30/06/2014
'Description  	   				->  Runtime Data would be updated updated in the excel file whose name should be the Test Scenario Name
'Input Parameters	     -> strFileName = Excel file name (Test Scenario Name)  - This function is called by WriteRunTimeScenarioData
'Output Parameters     -> None
'***********************************************************************************'***********************************************************************************
Function CreateRunTimeExcelFile(strFileName)
		Set InputAppExcel = CreateObject("Excel.Application")  
		InputAppExcel.Visible = False
		Set objWorkbook = InputAppExcel.Workbooks.Add()
		objWorkbook.SaveAs strFileName,39
		InputAppExcel.Quit
		Set InputAppExcel = Nothing
End Function

 '***********************************************************************************'***********************************************************************************
'Name of the Function  -> WriteRunTimeScenarioData
'Author		   						  ->TCS
'Dat		     						->30/06/2014
'Description  	   				->  Runtime Data would be updated updated in the excel file whose name should be the Test Scenario Name
'Input Parameters	     -> strRunTimeExcelFileName = Excel file name (Test Scenario Name) . SHould be supplied from within the script with unique Scenario Name
'												strVariableName  = Name of the variable holding the runtime value
'												strVariableValue  =  Runtime value
'Output Parameters     -> None
'***********************************************************************************'***********************************************************************************
Public Function WriteRunTimeScenarioData(strRunTimeExcelFileName,strVariableName,strVariableValue)
						Dim strFileName,strFolderPathToCreate,iRunTimeDataRowCounter 
						BalloonTooltip.Show "e-Swift Automation","Writing RunTime Scenario Data in Local File"
						gstrRuntimeScenarioDataFilePath = trim(gstrRuntimeScenarioDataFilePath)
						If gstrRuntimeScenarioDataFilePath="" Then
									strFolderPathToCreate = gstrMainResultFolder  & "\" & gstrRunTimeDataSheetFolderName
						else
									If right(gstrRuntimeScenarioDataFilePath,1) = "\" then 
												gstrRuntimeScenarioDataFilePath= left(gstrRuntimeScenarioDataFilePath,len(gstrRuntimeScenarioDataFilePath)-1) 
									End if 
									If  instr(gstrRuntimeScenarioDataFilePath,gstrRunTimeDataSheetFolderName)= 0  Then
												strFolderPathToCreate  = gstrRuntimeScenarioDataFilePath& "\" & gstrRunTimeDataSheetFolderName
									else
												strFolderPathToCreate  = gstrRuntimeScenarioDataFilePath
									End If
						End If

                        If (fso.FolderExists(strFolderPathToCreate )) = False Then   
											aFolders= split(strFolderPathToCreate ,"\")
											strTempFolder= ""
											If Ubound(aFolders) > 0 Then
																strTempFolder= aFolders(iCnt)
																For iCnt=0 to Ubound(aFolders)
																		If  iCnt>0 Then
																				strTempFolder =strTempFolder &"\" & aFolders(iCnt)
																		End If
																		If (fso.FolderExists(strTempFolder)) = False Then
																				fso.createfolder(strTempFolder)
																		End if 
																Next
											End if 
						End if 
						gstrRuntimeScenarioDataFilePath = strFolderPathToCreate 
						strFileName = gstrRuntimeScenarioDataFilePath  & "\" & strRunTimeExcelFileName & ".xls"

						If Not (fso.FileExists(strFileName)) Then
										CreateRunTimeExcelFile strFileName
						End if 
						iRunTimeDataRowCounter = 0
						Set InputAppExcel = CreateObject("Excel.Application")     
						Set objInputWorkBook = InputAppExcel.Workbooks.Open(strFileName) 		' objInputWorkBook  variable  contains/opens the excel workbook for the input file
						Set objInputSheet =  InputAppExcel.Sheets("Sheet1") 
						Do
								iRunTimeDataRowCounter = iRunTimeDataRowCounter +1
						Loop Until (objInputSheet.cells(1,iRunTimeDataRowCounter).value  = "") or (objInputSheet.cells(1,iRunTimeDataRowCounter).value  = strVariableName)
						If iRunTimeDataRowCounter<> 0 Then
									iRunTimeDataRowCounter = iRunTimeDataRowCounter -1
						End If
						objInputSheet.cells(1,iRunTimeDataRowCounter+1).value = strVariableName
						objInputSheet.cells(2,iRunTimeDataRowCounter+1).value = strVariableValue
						objInputWorkBook.Save
						objInputWorkBook.Close
						InputAppExcel.Quit
						Set InputAppExcel = Nothing
						Set objInputWorkBook =Nothing
						Set objInputSheet =Nothing
	
End Function

 '***********************************************************************************'***********************************************************************************
'Name of the Function  -> GetRunTimeDataFromExcel
'Author		   						  ->TCS
'Dat		     						->30/06/2014
'Description  	   				->  Runtime Data updated in the excel file would be fetched
'Input Parameters	     -> strRunTimeExcelFileName = Excel file name (Test Scenario Name) , 
'												IterationIndex  = Row number in the sheet 
'Output Parameters     -> Run time Data value as updated in the sheet
'***********************************************************************************'***********************************************************************************
Public Function GetRunTimeDataFromExcel(strRunTimeExcelFileName,IterationIndex)
		err.clear
		Dim strFolderPathToFind
		On error resume next
		BalloonTooltip.Show "e-Swift Automation","Reading RunTime Data From Local Excel"
		If gstrRuntimeScenarioDataFilePath="" Then
									strFolderPathToFind = gstrMainResultFolder  & "\" & gstrRunTimeDataSheetFolderName
		Else
									If right(gstrRuntimeScenarioDataFilePath,1) = "\" then 
												gstrRuntimeScenarioDataFilePath= left(gstrRuntimeScenarioDataFilePath,len(gstrRuntimeScenarioDataFilePath)-1) 
									End if 
									If  instr(gstrRuntimeScenarioDataFilePath,gstrRunTimeDataSheetFolderName)= 0  Then
												strFolderPathToFind  = gstrRuntimeScenarioDataFilePath& "\" & gstrRunTimeDataSheetFolderName
									else
												strFolderPathToFind  = gstrRuntimeScenarioDataFilePath
									End If
		End If
		gstrRuntimeScenarioDataFilePath = strFolderPathToFind
		strFileName= gstrRuntimeScenarioDataFilePath & "\" & strRunTimeExcelFileName & ".xls"
		
		Dim oConn, oRS, arrData, x,iStart
		
		CONST adOpenStatic = 3
		CONST adLockOptimistic = 3
		CONST adCmdText = "&H0001"

		Set oConn = CreateObject("ADODB.Connection")
		Set objRecSet= CreateObject("ADODB.RecordSet")
			'Open Connection
		oConn.Open "Provider=Microsoft.Jet.OLEDB.4.0;" &_		
				    "Data Source=" & strFileName & ";" & _
					"Extended Properties=""Excel 8.0;HDR=Yes;"";"
		sQuery = "Select * From [" & "Sheet1" & "$]"
        objRecSet.Open sQuery, oConn, 3, 3, 1		'Run query against WorkBook

		For x = 2 to IterationIndex - 1				'Move RecordSet to the target Row
			objRecSet.MoveNext
		 Next
		For x = iStart   to objRecSet.Fields.Count - 1					'Use a For..Loop to iterate through Recordset
					DataItemName = trim(objRecSet(x).Name)
					DataItemValue=trim(objRecSet(x).Value)
					Execute DataItemName &"= DataItemValue"       '' The variable value is assigned to the vairable name
		Next
		set oConn = Nothing
		set objRecSet = Nothing

End Function
'***********************************************************************************'***********************************************************************************
'Name of the Function  -> GetLastDateOf_Month
'Author		   						  ->TCS
'Dat		     						->30/06/2014
'Description  	   				->  Get Last day of any month sent
'Input Parameters	     -> strDate = Date value 
'Output Parameters     ->  Last day of the month of date sent
'***********************************************************************************'***********************************************************************************
Function GetLastDateOf_Month(strDate)
	iMonth = Month(strDate)
	Select Case iMonth
			Case "1"  iLastDay =  "31" 
			Case "2"  iLastDay =  "28" 
			Case "3"  iLastDay =  "31" 
			Case "4"  iLastDay =  "30" 
			Case "5"  iLastDay =  "31" 
			Case "6"  iLastDay =  "30" 
			Case "7"  iLastDay =  "31" 
			Case "8"  iLastDay =  "31" 
			Case "9"  iLastDay =  "30" 
			Case "10"  iLastDay =  "31" 
			Case "11"  iLastDay =  "30" 
			Case "12"  iLastDay =  "31" 
	End Select
	GetLastDateOf_Month =  FmtDate( iLastDay &"/"& Month(strDate) &"/"& Year(strDate))
End Function


'***********************************************************************************'***********************************************************************************
'Name of the Function  -> GetRandomAlphaNum
'Author		   						  ->TCS
'Dat		     						->30/06/2014
'Description  	   				->  Get Random Alphanumeric/numeric/alphabets
'Input Parameters	     ->  intMaxAlphabetCount = Length of the word
'											   intNumDigitCount=length of the number
'Output Parameters     ->  
'***********************************************************************************'***********************************************************************************

Function GetRandomAlphaNum(intMaxAlphabetCount,intNumDigitCount)
											BalloonTooltip.Show "e-Swift Automation","Executing Now: GetRandomAlphaNum" 
											Dim  k,i, intValue, strChar, strValue,BatchName,BatchRandom
											strAlphaNumericValue = ""
											Const Chars =  "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

											Randomize

											If  intMaxAlphabetCount <> 0Then
														For k=1 to intMaxAlphabetCount
																
																strValue=Fix(26 * Rnd())
															   strChar = Mid(Chars, strValue + 1, 1)
																strAlphaNumericValue = strAlphaNumericValue & strChar	
																
														  Next
											End If
											If intNumDigitCount<> 0 Then
													  For i=1 to intNumDigitCount
															   intValue = Fix(10*Rnd())
															   BatchRandom = strAlphaNumericValue & intValue
															   strAlphaNumericValue=BatchRandom
															   
													  Next
											End if 
																			   
											GetRandomAlphaNum = Ucase(strAlphaNumericValue)	
											 
End Function

'***************************************************************************************************************************************
'Name of the Function   : Format the date
'***************************************************************************************************************************************
Function FmtDate(theDate) 
   BalloonTooltip.Show "e-Swift Automation","Executing Now: FmtDate" 
  Months = Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", _ 
                 "Jul", "Aug", "Sep", "Oct", "Nov", "Dec") 
  FmtDate = Day(theDate) & "-" _ 
          & Months(Month(theDate)-1) & "-" _ 
          & Year(theDate) 
End Function 

Function CreateDummyFileInScreenshotFolder()
				BalloonTooltip.Show "e-Swift Automation","Executing Now: CreateDummyFileInScreenshotFolder" 
			 	FolderPath= gstrScenarioResultFolder & "\ScreenShots"
				Set fs = CreateObject("Scripting.FileSystemObject")
				If fs.FolderExists(FolderPath) Then
					Set sFolder = fs.GetFolder(FolderPath)
					If sFolder.Size= 0 Then
								fs.CreateTextFile(FolderPath&"\Image.jpg")
					End if 
				End If
End Function

Function CreateandWriteDummyFile(strFileName)
			On  error resume Next    
             logFileName= gstrScenarioResultFolder & "\" & strFileName
             Set objFile  = fso.createtextfile(logFileName , True)
			 objFile.WriteLine "DUMMY DUMMY DUMMY "
			 objFile.WriteLine "DUMMY DUMMY DUMMY "
			 objFile.WriteLine "DUMMY DUMMY DUMMY "
             objFile.Close
             Set objFile = Nothing		'Destroy the objFile object
End Function


Function DeleteDummyFile(strFileName)
			FileName =gstrScenarioResultFolder & "\" & strFileName
			Set fs = CreateObject("Scripting.FileSystemObject")
			If fs.FileExists(FileName) Then
					Set file = fs.GetFile(FileName)
					fs.DeleteFile(FileName)
			End If
End Function

Function DeleteBlankLogFile()
   FileName =gstrScenarioResultFolder & "\" & "e-Swift LogFile" &".txt"
	Set fs = CreateObject("Scripting.FileSystemObject")
	If fs.FileExists(FileName) Then
	    Set file = fs.GetFile(FileName)
	    If file.Size = 0 Then
		fs.DeleteFile(FileName)
	    End if 
	End If
End Function

Function CloseOpenIEBrowsers()
		Dim strQCTitle,iCreationTime,strCASurl
		
		Dim objLink
		On error resume next
		strQCTitle ="HP Quality Center"
		strCASurl = "Contractor Access Service"
		strGRAurl = "GRA - Home"
    	numWindowFlag = 1
		Set objShell = CreateObject("shell.application")
		Set objWinShell = objShell.windows
		numWindowCount = objShell.windows.count
       If  numWindowCount > 0 Then
       		For  iCreationTime=numWindowCount  to 0 step -1 
						If  Browser("CreationTime:="& iCreationTime).Exist(1) Then
									strTitle =Browser("CreationTime:="& iCreationTime).GetROProperty("Title")
									If Instr(strTitle,strCASurl)= 0  or  Instr(strTitle,strGRAurl)= 0Then
										
													
													If Instr(strTitle,strQCTitle)= 0  and Instr(strTitle,"Oracle Applications Home Page")>0 Then
																	Set objMainBrowser = Browser("name:="& strTitle).Page("title:="& strTitle)
																	Set objLink = Description.Create()
																	objLink("micclass").value= "Link"
																	objLink("html tag").value= "A"
																	objLink("name").value= "Logout"
																	Set objChildrenLink = objMainBrowser.ChildObjects(objLink)
																	If  objChildrenLink(0).Exist(1) Then
																			objChildrenLink(0).Click
																			Call WaitForObject(Browser("CreationTime:="& iCreationTime),30)
																			Browser("CreationTime:="& iCreationTime).Close
																	End If
													else
																	Browser("CreationTime:="& iCreationTime).Close
																
																	
													End If
									End if 
						End If
			Next
		End if 
		Set objShell= Nothing
		Set objWinShell= Nothing
End Function

Public Function StartExecution(excelPath,strTestCaseName,iterationIndex) 	
								iterator=iterationIndex
								If blnShowNotification Then BalloonTooltip.Show "e-Swift Automation","Intiating automation execution"  End if 
								blnSkipSteps= False
								stepNumber=10
								Environment.Value("blnFatalError") = False
								
								If blnCloseOpenIEBrowsersOnStart= True Then
									'Call CloseOpenIEBrowsers()
									'Call LogoutOracle("")
								End If
								'Call KillExcel()

								Call GetInputFromExcel(excelPath,strTestCaseName,iterationIndex)
								InputFilePath =excelPath
								Call GetInputFromExcel(excelPath,"COMMON",2)
								Call GetInputFromExcel(excelPath,"OUTPUT",iterator)
								Call CreateResultFolder(ScenarioName & "_" & strTestCaseName)
								If blnSetReporterFlag Then
											Call CreateLogFile()
								End If						
								errorCount=1  
								Reporter.Filter = rfDisableAll                    
				

								If gblnCreateSingleExecutionReport Then
													giTotalTCCount = giTotalTCCount + 1
													giTestCaseStartTime=Timer()
													Call WriteExecutionDetails(excelPath,gstrExecutionSheetName)
													Call GetExecutionDetails(excelPath,gstrExecutionSheetName)
													
								End If

								If gstrGeneralTestCase="" Then
												aTestCaseDetailsForSummary(giSummaryArrCounter,0) = strTestCaseName
												Call Html_iteration(strTestCaseName)
								else
												aTestCaseDetailsForSummary(giSummaryArrCounter,0) = gstrGeneralTestCase
												Call Html_iteration(gstrGeneralTestCase)
								End if 

								If blnCreateTrainingDoc = True Then
											Call CreateTrainingDoc(strTestCaseName)
								End if 
								
'								If setDefectFlag Then
'											Call GetInputFromExcel(excelPath,"DEFECT",2)
'								End If


End Function




Function  CreateResultFolder(strTestCaseName)

				Dim WSHShell, iCnt
				If blnCreateResultOnDesktop = True Then
							Dim MyShortcut, MyDesktop, DesktopPath
							set wScript = CreateObject("WScript.Shell")
							gstrMainResultFolder =  WScript.SpecialFolders("Desktop")&"\"& gstrMasterResultFolderName
				Else
							gstrMainResultFolder =  gstrMasterResultDrive & "\" & gstrMasterResultFolderName
				End If
				If blnShowNotification Then BalloonTooltip.Show "e-Swift Automation","Creating Result folder in Path "& gstrMainResultFolder  End if 
				On error resume next
			    Dim currentDate,currentTime
				If isNull(gstrMainResultFolder) Then
					gstrMainResultFolder = ""
				End If

				If (fso.FolderExists(gstrMainResultFolder)) = False Then   
							aFolders= split(strMainResultFolder,"\")
							strTempFolder= ""
							If Ubound(aFolders) > 0 Then
									strTempFolder= aFolders(iCnt)
                            		For iCnt=0 to Ubound(aFolders)
											If  iCnt>0 Then
													strTempFolder =strTempFolder &"\" & aFolders(iCnt)
											End If
											If (fso.FolderExists(strTempFolder)) = False Then
													fso.createfolder(strTempFolder)
											End if 
									Next
							Else
									fso.createfolder(gstrMainResultFolder)
							End If
				End if 

				If gblnCreateSingleExecutionReport  Then
									If GetValueOfUserEnvironmentVar("e_Swift_SingleReportFolderPath") =""  Then
														currentDate = Replace(Date, "/", ".")
														currentTime = Replace(Time, ":", ".")
														gstrScenarioResultFolder= gstrMainResultFolder & "\Result_"& strTestCaseName &"_" & currentDate & "_" & currentTime
														Call CreateUserEnvironmentVariable ("e_Swift_SingleReportFolderPath",gstrScenarioResultFolder)
														
									else
														gstrScenarioResultFolder = GetValueOfUserEnvironmentVar("e_Swift_SingleReportFolderPath")
													
									End If
									
									If Not fso.FolderExists(gstrScenarioResultFolder)  Then
															fso.createfolder(gstrScenarioResultFolder)
															fso.createfolder(gstrScenarioResultFolder & "\ScreenShots")
															Call CreateHTMLResultFile(strTestCaseName)
									End If									

				Else
									currentDate = Replace(Date, "/", ".")
									currentTime = Replace(Time, ":", ".")
									gstrScenarioResultFolder= gstrMainResultFolder & "\Result_"& strTestCaseName &"_" & currentDate & "_" & currentTime
									Call CreateUserEnvironmentVariable ("e_Swift_SingleReportFolderPath",gstrScenarioResultFolder)
									fso.createfolder(gstrScenarioResultFolder)
									fso.createfolder(gstrScenarioResultFolder & "\ScreenShots")
									Call CreateHTMLResultFile(strTestCaseName)

				End if 
End Function

Public Function GetInputFromExcel(InputFilePath,sheetName,IterationIndex)
	 
		err.clear
		BalloonTooltip.Show "e-Swift Automation","Executing Now: GetInputFromExcel" 
		On error resume next

		Dim oConn, oRS, arrData, x,iStart
		CONST adOpenStatic = 3
		CONST adLockOptimistic = 3
		CONST adCmdText = "&H0001"

		Set oConn = CreateObject("ADODB.Connection")
		Set objRecSet= CreateObject("ADODB.RecordSet")

		'Open Connection
		oConn.Open "Provider=Microsoft.Jet.OLEDB.4.0;" &_		
				    "Data Source=" & InputFilePath & ";" & _
					"Extended Properties=""Excel 8.0;HDR=Yes;"";"
		sQuery = "Select * From [" & sheetName & "$]"


		If err.number<>0 Then
			If instr(err.description,"is not a valid path")>0  or instr(err.description,"Invalid argument")>0  Then
						Call GetInputFromExcel_FromQC(InputFilePath,sheetName,IterationIndex)
			End If
			err.clear
			Exit Function
		End If

		'Run query against WorkBook
		objRecSet.Open sQuery, oConn, 3, 3, 1
		If err.number<>0 Then
				If insrt(err.description,"Too many") > 0  Then
					Call GetInputFromExcel_ViaDatatable(InputFilePath,strSheetName,IterationIndex)
					Exit Function
				End If
		End if 
		'Move RecordSet to the target Row
		For x = 2 to IterationIndex - 1
			objRecSet.MoveNext
		 Next
		'Use a For..Loop to iterate through Recordset

		If  Ucase(sheetName) = "COMMON" Or Ucase(sheetName )= "OUTPUT" or Ucase(sheetName)= "DEFECT"  Then
				iStart =0
		ElseIf blnDefault_eSwiftReporting Then
				iStart =0
		else
				iStart = 3
		End If
		For x = iStart   to objRecSet.Fields.Count - 1
					DataItemName = trim(objRecSet(x).Name)
					DataItemValue=trim(objRecSet(x).Value)
					Execute DataItemName &"= DataItemValue"       '' The variable value is assigned to the vairable name
		Next
		set oConn = Nothing
		set objRecSet = Nothing
		DataItemValue = ""
End Function

Public Function GetInputFromExcel_FromQC(InputFilePath,strSheetName,IterationIndex)
				BalloonTooltip.Show "e-Swift Automation","Executing Now: GetInputFromExcel_FromQC" 
				Dim strVariableName ,strVariableValue
				Datatable.SetCurrentRow IterationIndex-1
				iColCount=DataTable.GetSheet(strSheetName).getparametercount
				iRowCount = DataTable.GetSheet(strSheetName).GetRowCount
				For iCnt=1 to iColCount
							strVariableName = DataTable.GetSheet(strSheetName).GetParameter(iCnt).Name
							strVariableValue = Datatable.Value(strVariableName,strSheetName)
							Execute strVariableName &"= strVariableValue"       '' The variable value is assigned to the vairable name
				Next 
End Function


Public Function GetInputFromExcel_ViaDatatable(InputFilePath,strSheetName,IterationIndex)
				
				BalloonTooltip.Show "e-Swift Automation","Executing Now: GetInputFromExcel_ViaDatatable" 
				Dim strVariableName ,strVariableValue
				Datatable.Import InputFilePath
				Datatable.SetCurrentRow IterationIndex-1
				iColCount=DataTable.GetSheet(strSheetName).getparametercount
				iRowCount = DataTable.GetSheet(strSheetName).GetRowCount
				For iCnt=1 to iColCount
							strVariableName = DataTable.GetSheet(strSheetName).GetParameter(iCnt).Name
							strVariableValue = Datatable.Value(strVariableName,strSheetName)
							Execute strVariableName &"= strVariableValue"       '' The variable value is assigned to the vairable name
				Next 
End Function

					

Function GetTestCaseDetails(InputFilePath,sheetName,iStepNo,ByRef aManualTCDetails)

			Err.clear
			On Error Resume Next
			BalloonTooltip.Show "e-Swift Automation","Executing Now: GetTestCaseDetails" 
			Dim oConn, oRS, arrData, x
			Dim aTemp,aTemp2
			CONST adOpenStatic = 3
			CONST adLockOptimistic = 3
			CONST adCmdText = "&H0001"
	
			Set oConn = CreateObject("ADODB.Connection")
			Set objRecSet= CreateObject("ADODB.RecordSet")
	
			'Open Connection
			oConn.Open "Provider=Microsoft.Jet.OLEDB.4.0;" &_		
						"Data Source=" & InputFilePath & ";" & _
						"Extended Properties=""Excel 8.0;HDR=Yes;"";"
	
			sQuery = "Select [StepDescription],[Expected] From [" & sheetName & "$] Where [StepName]=" & iStepNo &""

			If err.number<>0 Then
				If instr(err.description,"is not a valid path")>0  or instr(err.description,"Invalid argument")>0  Then
							Call GetTestCaseDetails_FromQC(InputFilePath,sheetName,iStepNo,aManualTCDetails)
				End If
				err.clear
				Exit Function
			End If
	
			objRecSet.Open sQuery, oConn, 3, 3, 1
			aManualTCDetails(0) = trim(cstr(objRecSet(0).Value))
			aManualTCDetails(1)= trim(cstr(objRecSet(1).Value))

			If instr(aManualTCDetails(0),"<") > 0   Then
							temp = replace(aManualTCDetails(0),"<","<'")
							aManualTCDetails(0) = temp
				end if 
				If  instr(aManualTCDetails(0),">") > 0   Then
							temp = replace (aManualTCDetails(0),">","'>")
							aManualTCDetails(0) = temp
				End If


				If instr(aManualTCDetails(1),"<") > 0   Then
							temp = replace(aManualTCDetails(0),"<","<'")
							aManualTCDetails(1) = temp
				end if 
				If  instr(aManualTCDetails(1),">") > 0   Then
							temp = replace (aManualTCDetails(0),">","'>")
							aManualTCDetails(1) = temp
				End If

				aTemp = split(aManualTCDetails(0),chr(10))
				If Ubound(aTemp) > 0  Then
						aManualTCDetails(0)= ""
						For i=0 to Ubound(aTemp)
								aManualTCDetails(0) = aManualTCDetails(0) &"<br>"& aTemp(i)
						Next
				End If
				aTemp2 = split(aManualTCDetails(1),chr(10))
				If Ubound(aTemp2) > 0  Then
						aManualTCDetails(1)= ""
						For i=0 to Ubound(aTemp2)
								aManualTCDetails(1) = aManualTCDetails(1) &"<br>"& aTemp2(i)
						Next
				End If

		'objRecSet.MoveNext
		err.clear
		objRecSet.Close 
		set oConn = Nothing
		set objRecSet = Nothing
		
End Function



Public Function GetTestCaseDetails_FromQC(InputFilePath,strSheetName,iStepNo,ByRef aManualTCDetails)
				Dim strVariableName ,strVariableValue
				'Datatable.SetCurrentRow iStepNo-1
				'iColCount=DataTable.GetSheet(strSheetName).getparametercount
				iRowCount = DataTable.GetSheet(strSheetName).GetRowCount
				For iCnt = 1 to iRowCount
					Datatable.SetCurrentRow iCnt
					If  Datatable.Value(1,strSheetName) = iStepNo Then
						Exit For
					End If
				Next
				
				aManualTCDetails(0) = Cstr(Datatable.Value(2,strSheetName))
				aManualTCDetails(1) = Cstr(Datatable.Value(3,strSheetName))

				If instr(aManualTCDetails(0),"<") > 0   Then
							temp = replace(aManualTCDetails(0),"<","<'")
							aManualTCDetails(0) = temp
				end if 
				If  instr(aManualTCDetails(0),">") > 0   Then
							temp = replace (aManualTCDetails(0),">","'>")
							aManualTCDetails(0) = temp
				End If


				If instr(aManualTCDetails(1),"<") > 0   Then
							temp = replace(aManualTCDetails(0),"<","<'")
							aManualTCDetails(1) = temp
				end if 
				If  instr(aManualTCDetails(1),">") > 0   Then
							temp = replace (aManualTCDetails(0),">","'>")
							aManualTCDetails(1) = temp
				End If
				
End Function


'				UpdateResultHtml ("1.1","", strActual, "PASS","")
Public Function UpdateResultHtml(iStepNumber,inputParameter,strActual,status,outputParameter)
							Dim aManualTCDetails(2),iStep,iFileAttachStep
							'Dim strExpected,strDescription
							'strTestCaseName= aTestCaseDetailsForSummary(giSummaryArrCounter,0) 

							If  blnDefault_eSwiftReporting Then
										stepName = iStepNumber
										iStepNumber = giHTMLRowNumber
							else
										outputParameter=""
										Call GetTestCaseDetails(InputFilePath,strTestCaseName,iStepNumber,aManualTCDetails) ' Function to capture all manual step details from Input excel
										strDescription = aManualTCDetails(0)
										strExpected= aManualTCDetails(1)
							End If

							Set htmlFile = fso.OpenTextFile(gstrScenarioResultFolder &"\" & gstrDetailedHTMLFileName, 8)
							
							If (giHTMLRowNumber mod 2)= 0 then
									htmlFile.writeline("<tr class='alt'>")
							else
									htmlFile.writeline("<tr>")
							End if 
							giHTMLRowNumber =giHTMLRowNumber + 1
							htmlFile.writeline("<td class='border' align='center' > "  & iStepNumber & " </td> ")
							If  blnDefault_eSwiftReporting Then
										htmlFile.Write("<td class='border'>" & stepName & "&nbsp;</td>")
										 htmlFile.Write("<td class='border'>" & inputParameter & "&nbsp;</td>")
							else
										htmlFile.writeline("<td class='border'> "  & strDescription & " </td> ")
										htmlFile.writeline("<td class='border'> "  & strExpected & " </td> ")
							End If
							If  status = "FAIL" Then
										If Environment.Value("strFatalMessage")<>"" Then
													strActual= "  <br> -----------  Error found at this step ------------ <br>"  & strActual  & Environment.Value("strFatalMessage")
													Environment.Value("strFatalMessage")= ""
										End If
										giFailedStepNumber =iStepNumber
							End If
							htmlFile.writeline("<td class='border'> "  & strActual & " </td> ")
					
							If Ucase(status)  = "PASS" Then
												 htmlFile.writeline("<td class='border_Pass' align='center' >" & status & "</td>")
							ElseIf Ucase(status)  = "FAIL" Then
												 htmlFile.writeline("<td class='border_Fail' align='center' >" & status & "</td>")
							ElseIf Ucase(status)  = "DONE" Then   	
												 htmlFile.writeline("<td class='border_Done' align='center' >" & status & "</td>")
							ElseIf Ucase(status)  = "WARNING" Then
												 htmlFile.writeline("<td class='border_Warning' align='center' >" & status  & "<b> !!! </td>")
							End If
					

							If Ucase(status)  = "PASS"  or  Ucase(status)  = "DONE" Then
							 
													
																	errorCount=errorCount+1
																	iStep = 1  ' Counter for publishing substep # against the image hyperlinks in HTML
																	htmlFile.writeline("<td class='border_Pass'>" & outputParameter &"<br>")
																	For iCnt= iCurrentImageCounterForHTML to iImageCounterForHTML
																								If Not isEmpty(aImagePathArray(iCnt)) Then
																												htmlFile.writeline("<a href=' "& aImagePathArray(iCnt) & "' target="& Q("_blank")& ">ScreenShot:"& iStep &"<br>")
																												iStep =iStep +1
																								End If
																	Next
																	iCurrentImageCounterForHTML = iImageCounterForHTML

																	iFileAttachStep = 1
																	For iCnt= giCurrentFileAttachmentCounterForHTML to giFileAttachmentCounterForHTML
																								If Not isEmpty(aFileAttachmentPathArray(iCnt)) Then
																												htmlFile.writeline("<a href=' "& aFileAttachmentPathArray(iCnt) & "' target="& Q("_blank")& ">OutPut Report:"& iFileAttachStep &"<br>")
																												iFileAttachStep =iFileAttachStep +1
																								End If
																	Next
																	giCurrentFileAttachmentCounterForHTML = giFileAttachmentCounterForHTML
																	htmlFile.writeline("</td>")
																

																	

						 ElseIf Ucase(status)  = "FAIL" or  Ucase(status)  = "WARNING" Then
													errorCount=errorCount+1
													iStep =1
													blnMainFailFlag = True
													Reporter.ReportEvent micFail,"Step# : "&iStepNumber,strActual
													htmlFile.writeline("<td class='border_Fail'>" & outputParameter &"<br>")
													For iCnt= iCurrentImageCounterForHTML to iImageCounterForHTML
																								If Not isEmpty(aImagePathArray(iCnt)) Then
																												 htmlFile.writeline("<a href=' "& aImagePathArray(iCnt) & "' target="& Q("_blank") &">ScreenShot:"&iStep &"<br>")
																												 iStep =iStep +1
																								End If
													 Next
													 iCurrentImageCounterForHTML = iImageCounterForHTML
													 iFileAttachStep = 1
													For iCnt= giCurrentFileAttachmentCounterForHTML to giFileAttachmentCounterForHTML
																								If Not isEmpty(aFileAttachmentPathArray(iCnt)) Then
																											
																												htmlFile.writeline("<a href=' "& aFileAttachmentPathArray(iCnt) & "' target="& Q("_blank")& ">OutPut Report:"& iFileAttachStep &"<br>")
																												iFileAttachStep =iFileAttachStep +1
																								End If
													Next
													giCurrentFileAttachmentCounterForHTML = giFileAttachmentCounterForHTML

													 htmlFile.writeline("</td>")
													
													 If setDefectFlag Then
																			Dim DefectSummary,DefectDescription,AttachmentPath
																			DefectSummary=Output 
																			DefectDescription=Output 
																			AttachmentPath=ImagePath
																			Call  AutomaticDefectLog(DefectMandatoryFieldList,DefectSummary,DefectSeverity,DefectAssignedTo,DefectDetectedBy,DefectPriority,DefectStatus,DefectProjectName,DefectDescription,AttachmentPath)
													 End If
													ImagePath = ""
		               End If

				   endTime = Timer()
				   htmlFile.writeline("<td class='border'>"& FormatNumber(endTime - giLastUpdatedTime ,3) &" Second(s)</td>")
				   htmlFile.writeline("</tr>")
				   giLastUpdatedTime = endTime 
				   'aTestCaseDetailsForSummary(giSummaryArrCounter ,2) = status
				   blnCaptureFlag=False
				   Environment.Value("strFatalMessage")= ""

End Function
	
''*******************************************************************************************************************************************
'Name of the Function : FormatReportMessage
'Author		    : Prashant Sharma
'Date			    : 18/09/2013
'Description	    : Function to Consolidate returned message from e-Swift Functions for result reporting
'Input Parameters	    : Array containing the messages
'Output Parameters    : Consolidated message from functions
'*******************************************************************************************************************************************

Function FormatReportMessage(aMessageArray,ByRef strReturnMessage)
			strReturnMessage =""
			iEmptyCounter = 0
			strStatus = "PASS"
			
			If Ubound(aMessageArray)>0  Then
						Call RemoveEmptyValuesInArray(aMessageArray)
						For iX=0 To Ubound(aMessageArray)
										If  Not IsEmpty(aMessageArray(iX)) Then
															If  (NOT  IsBoolean(aMessageArray(iX))) Then
																			strReturnMessage = strReturnMessage &" [" &aMessageArray(iX)  &" ]"
																			strStatus="FAIL"
																			'blnSkipSteps= True
																			'Exit For
															elseif  IsBooleanFalse( aMessageArray(iX)) Then 
																		    strStatus="FAIL"

															End If
										else
												iEmptyCounter = iEmptyCounter+1 
										End If
						Next
			Else
						strReturnMessage= "Possible exception found during Step Execution"	
						
			End If


			If iEmptyCounter= Ubound(aMessageArray)+ 1 Then
					strReturnMessage= "e-Swift Functions Skipped Due to Error " & Environment.Value("strFatalMessage")
					strStatus="FAIL"
			End If

			If strStatus="FAIL" Then
						FormatReportMessage = "FAIL"
						'ImagePath=CaptureScreenshot("","")		
						If gblnContinueExecutionIFFailed =True  and Environment.Value("blnFatalError")= False Then  '  Make variable gblnContinueExecutionIFFailed = True  in your script if error should be ignored and exection is not to ne stopped
    								gblnContinueExecutionIFFailed = False
						else
									Environment.Value("blnFatalError")= True		
						End If
			Else
						FormatReportMessage = "PASS" 
			End If
		
End Function

'*******************************************************************************************************************************************
'Name of the Function : IsBoolean
'Author		    : Prashant Sharma
'Date			    : 18/09/2013
'Description	    : Function to Verify if a data is of type boolean
'Input Parameters	    : strData := Data to be checked
'Output Parameters    : True/False
'*******************************************************************************************************************************************
Function IsBoolean(strData)
			 	If isEmpty(strData) Then
						IsBoolean = False
						Exit Function
				Else

							If vartype(strData) = 11 Then  'or  Asc(strData) = 70 
									IsBoolean = True
							else
								   IsBoolean= False
							End If
				End If
End Function

'*******************************************************************************************************************************************
'Name of the Function : IsBooleanFalse
'Author		    : TCS
'Date			    : 18/09/2013
'Description	    : Function to Verify if a data is of type boolean FALSE
'Input Parameters	    : strData := Data to be checked
'Output Parameters    : True/False
'*******************************************************************************************************************************************
Function IsBooleanFalse(strData)
			 	If isEmpty(strData) Then
						IsBoolean = False
						Exit Function
				Else

							If  Asc(strData) = 70 Then
									IsBooleanFalse = True
							else
								    IsBooleanFalse= False
							End If
				End If
End Function

''*******************************************************************************************************************************************
'Name of the Function : CreateHTMLResultFile
'Author		    : Prashant Sharma
'Date			    : 18/09/2013
'Description	    : Function to create HTML file for detailed reporting
'Input Parameters	    : TestCaseName
'Output Parameters    : Consolidated message from functions
'*******************************************************************************************************************************************


Public Function CreateHTMLResultFile(strTestCaseName)
			on error resume next
			If blnShowNotification Then BalloonTooltip.Show "e-Swift Automation","Creating HTML result file under "& gstrScenarioResultFolder  End if 
			Set htmlFile = fso.CreateTextFile(gstrScenarioResultFolder &"\" & gstrDetailedHTMLFileName, True)
			
			Set qtApp = getObject("","QuickTest.Application") 
            If (qtApp.TDConnection.IsConnected) then
                        strUserName = QCUtil.QCConnection.UserName
			Else
                        strUserName =  Environment.Value("UserName")
            End If

			 htmlFile.WriteLine("<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>")
			 htmlFile.WriteLine("<html xmlns='http://www.w3.org/1999/xhtml'>")
			 htmlFile.WriteLine("<script type='text/javascript'>")


			 htmlFile.WriteLine("	function toggle_visibility(tbid,lnkid){")
			 htmlFile.WriteLine("	 if(document.all)")
			 htmlFile.WriteLine("		{document.getElementById(tbid).style.display = document.getElementById(tbid).style.display == 'none'  ?  'block' : 'none';}")
			 htmlFile.WriteLine("	 else")
			 htmlFile.WriteLine("		{document.getElementById(tbid).style.display = document.getElementById(tbid).style.display == 'none'  ?  'table' : 'none';}")
			 htmlFile.WriteLine("	  	document.getElementById(lnkid).value = document.getElementById(lnkid).value == '[+] Expand' ? '[-] Collapse' : '[+] Expand'; }")
			 htmlFile.WriteLine("</script>")
			 htmlFile.WriteLine("<style type='text/css'>")



			 htmlFile.WriteLine(".heading {font-family: Franklin Gothic Medium ; font-style: bold; color: White; font-size: 17pt; background-color: #2B547E;} ")
			  htmlFile.WriteLine(".eSwiftTitle { font-family: Franklin Gothic Medium ; color:purple;  font-size: 8pt;}")
			 htmlFile.WriteLine(".subheading {BORDER: #8eb3d8 2px solid;FONT-SIZE: 11pt;COLOR: white;FONT-FAMILY: Franklin Gothic Medium;text-align: center;BACKGROUND-COLOR :  #319AFD;}")  ' Step number,description header
			 htmlFile.WriteLine(".subheading1{BORDER: #8eb3d8 1px solid;FONT-SIZE: 10pt;COLOR: #3366FF;FONT-FAMILY:Franklin Gothic Medium;text-align: center;HEIGHT: 20px;}")  ' Heading below Main header
			 htmlFile.WriteLine(".subheading2{FONT-SIZE: 12pt;FONT-WEIGHT: bold;COLOR:#3B3131;FONT-FAMILY: Franklin Gothic Medium;BACKGROUND-COLOR:White;}") ' Testcase header
			 htmlFile.WriteLine(".border{BORDER: #8eb3d8 1px solid;FONT-SIZE: 10pt;COLOR:#34282C;FONT-WEIGHT: bold;FONT-FAMILY:Calibri;}")
			 htmlFile.WriteLine(".alt {background-color:#E1EEF4}")
			 
			 htmlFile.WriteLine(".border_Pass{BORDER: #8eb3d8 1px solid;FONT-SIZE: 9pt;COLOR:Green;BACKGROUND-COLOR:White;FONT-FAMILY:Franklin Gothic Medium;}")
			 htmlFile.WriteLine(".border_Fail{BORDER: #8eb3d8 1px solid;COLOR: Red;FONT-SIZE: 9pt;BACKGROUND-COLOR:white;FONT-FAMILY:Franklin Gothic Medium;}")
			 htmlFile.WriteLine(".border_Done{BORDER: #8eb3d8 1px solid;FONT-SIZE: 9pt;COLOR: #0000FF;FONT-FAMILY: Franklin Gothic Medium;}")
			 htmlFile.WriteLine(".border_Warning{BORDER: #8eb3d8 1px solid;FONT-SIZE:9pt;COLOR: Maroon;FONT-FAMILY: Franklin Gothic Medium;}")
			 htmlFile.WriteLine(".border_Fail_Final{BORDER: red 1px solid;COLOR: Red;FONT-SIZE: 12pt;BACKGROUND-COLOR: white;FONT-FAMILY: Franklin Gothic Medium;}")	 
			 htmlFile.WriteLine(".border_Pass_Final{BORDER: green 1px solid;COLOR: Green;FONT-SIZE: 12pt;BACKGROUND-COLOR: white;FONT-FAMILY:Franklin Gothic Medium;}")


			 htmlFile.WriteLine("strong{COLOR:#3366FF;FONT-FAMILY: Franklin Gothic Medium}")
        	 htmlFile.WriteLine("</style>")
			 htmlFile.WriteLine("<head>")
		
			 htmlFile.WriteLine("	<meta http-equiv='Content-Type' content='text/html; charset=iso-8859-1' />")
			 htmlFile.WriteLine("		<title>e-Swift Detail Report</title>")
		
			 htmlFile.WriteLine("</head>")
			 htmlFile.WriteLine("<body>")
		
			 htmlFile.WriteLine("")

			 htmlFile.WriteLine("<table>")
			 htmlFile.WriteLine("<tr><td width =100% class= eSwiftTitle align =left > e-Swift Detail Report<br> </td></td></tr>")
			 htmlFile.WriteLine("<br></table>")
		
			 htmlFile.WriteLine("<table width = 100% border=2 BORDERCOLOR= #0066CC cellpadding=0 > ")
			 htmlFile.WriteLine("<tr>")
			 'htmlFile.WriteLine("<hr style= border: 1px dotted silver;>")
			 htmlFile.WriteLine("<td class= heading align= center > "& gstrDetailedReportHeader  &" : " & ScenarioName & "</td> ")
			 htmlFile.WriteLine("</tr>")
			 htmlFile.WriteLine("</table><br>")
		
			 htmlFile.WriteLine("<table align='center' width = 100%>")
			 htmlFile.WriteLine("<tr>")
			 htmlFile.WriteLine("	<td class='subheading1'>Execution Start Time : " & Time & " </td>")
			 htmlFile.WriteLine("	<td class='subheading1'>Executed By : "& strUserName & " </td>")
			 htmlFile.WriteLine("	<td class='subheading1'>Execution Date  : "& FormatDateTime(now(),vbLongDate)  & "</td>")
			 htmlFile.WriteLine("</tr>")
			 If gstrTestCaseName <> "" Then strTestCaseName = gstrTestCaseName End If
			 htmlFile.WriteLine("<tr>")
			 htmlFile.WriteLine("	<td class='subheading1'><u><b>TestCase Name : </b></u><br>" & strTestCaseName & " </td>")
			 htmlFile.WriteLine("	<td class='subheading1'><u><b>Test Description :</b></u><br> "& gstrTCDescription & " </td>")
			 htmlFile.WriteLine("	<td class='subheading1'><u><b>Pre-requisite: </b></u><br>"& gstrTCPrerequisite & "</td>")
			 htmlFile.WriteLine("</tr>")

			 htmlFile.WriteLine("</table><br>")
			 htmlFile.WriteLine("")
 

End Function


''*******************************************************************************************************************************************
'Name of the Function : Html_iteration  
'Author		    : Prashant Sharma
'Date			    : 18/09/2013
'Description	    : Function to add testcase execution details for each iteration.This is mainly the header for the report 
'Input Parameters	    : TestCaseName
'Output Parameters    : None
'*******************************************************************************************************************************************


Public Function Html_iteration(testCaseName)
					            On error resume next
								Dim iHTMLTableLink 
								iHTMLTableLink = RandomNumber(1,9) & RandomNumber(RandomNumber(10,20),30)  & RandomNumber(RandomNumber(2,20),40)
								If strResultDetails= "" or IsNull(strResultDetails) Then
										iPosition=0
								Else
										iPosition=InStrRev(strResultDetails,",")
								End If
								If iPosition<>0  Then
										resultDetailsMod=Mid(strResultDetails,1,iPosition-1)
										TestCaseIndex=Mid(strResultDetails,iPosition+1)
								Else
										TestCaseIndex=0
								End If
								If strResultDetails<> ""  Then
										resultDetStr=strResultDetails
								Else
										resultDetStr=""
								End If

								If InStr(1,resultDetStr,testCaseName)=0 Then
											iterationNo=1
											
								Else
											iterationNo=UBound(Split(resultDetStr,testCaseName) )+1
								End If

								'aTestCaseDetailsForSummary(giSummaryArrCounter ,1) = iterationNo   ' Assigning Iteration no in Global Array for Summary

								If strResultDetails="" Then
									strResultDetails = testCaseName
								Else
									strResultDetails = strResultDetails 
								End If

							    Set htmlFile = fso.OpenTextFile(gstrScenarioResultFolder &"\" & gstrDetailedHTMLFileName, 8)
						
								htmlFile.writeline ("<table width:100% bgcolor='#EEEEEE' cellspacing =0 >")
								htmlFile.writeline ("	<tr><td bgcolor='#8eb3d8' colspan='3'></td></tr>")
								htmlFile.writeline ("	<tr>")
								If gstrTestCaseName<>"" Then	testCaseName  =  gstrTestCaseName End If
								htmlFile.writeline ("<td width= '70%' bgcolor='#FFDFDD' align ='left'> <strong> Test Case : "& testCaseName &  " [Iteration Number : " & iterator-1 & "]" & "</strong> </td>")
								htmlFile.writeline ("	<td width= '30%' bgcolor='#FFDFDD' align ='center'> </td>")
								htmlFile.writeline ("	<td  width= '20%' bgcolor='#C2DFFF' align='right' ><input id='lnk"& iHTMLTableLink &"' type='button' value='[+] Expand' onclick=""toggle_visibility('tbl"& iHTMLTableLink &"','lnk"& iHTMLTableLink &"');""></td>")
								htmlFile.writeline ("	</tr>")
								htmlFile.writeline ("	<tr><td bgcolor='#8eb3d8' colspan='3'></td></tr>	")
								htmlFile.writeline ("	</table>")
								htmlFile.writeline ("<table id='tbl"& iHTMLTableLink &"' cellspacing=0  style='display:none'>")
								
								If 	blnDefault_eSwiftReporting Then

													htmlFile.writeline ("	<tr>")
													htmlFile.writeline ("<td class='subheading'>Step Number</td>")
													htmlFile.writeline ("<td class='subheading'width=25%>Step Description</td>")
													htmlFile.writeline ("<td class='subheading'width=25%>Input Data </td>")
													htmlFile.writeline ("<td class='subheading'width=25%>Message/Error </td>")
													htmlFile.writeline ("<td class='subheading'>Status</td>")
													htmlFile.writeline ("<td class='subheading'>Output </td>")
													htmlFile.writeline ("<td class='subheading'>Execution Time</td>")

									else
													htmlFile.writeline ("	<tr>")
													htmlFile.writeline ("<td class='subheading'>Step Number</td>")
													htmlFile.writeline ("<td class='subheading'width=25%>Description</td>")
													htmlFile.writeline ("<td class='subheading'width=25%>Expected </td>")
													htmlFile.writeline ("<td class='subheading'width=25%>Actual </td>")
													htmlFile.writeline ("<td class='subheading'>Status</td>")
													htmlFile.writeline ("<td class='subheading'>Objective Evidence</td>")
													htmlFile.writeline ("<td class='subheading'>Execution Time</td>")
								End If

End Function

''*******************************************************************************************************************************************
'Name of the Function : FormatTimeDuration
'Author		    : Prashant Sharma
'Date			    : 07/08/2014
'Description	    : Function to format the execution duration into user friendly format
'Input Parameters	    : Time duration
'Output Parameters    : user friendly format
'*******************************************************************************************************************************************

Function FormatTimeDuration(iTotalTime)
		If  iTotalTime > 60 Then
					giMinuteValue = split(iTotalTime/60,".")(0)
					giSeconds = iTotalTime mod 60
			else
					giSeconds = iTotalTime
					giMinuteValue = 0
		End If
		If  giMinuteValue < 60  Then
					giHourValue = 0 
			else
					giHourValue = split(giMinuteValue/60,".")(0)
					giMinuteValue = giMinuteValue mod 60
		End If
    	FormatTimeDuration =  giHourValue & " Hour(s) " & giMinuteValue &" Minute(s) " & giSeconds & " Seconds " 
End Function

''*******************************************************************************************************************************************
'Name of the Function : FinalStatus
'Author		    : Prashant Sharma
'Date			    : 18/09/2013
'Description	    : Function to report final Pass or Fail status in the report
'Input Parameters	    : TestCaseName
'Output Parameters    : None
'*******************************************************************************************************************************************

Public Function FinalStatus()
			    If blnShowNotification Then BalloonTooltip.Show "e-Swift Automation","Running : Finishing Report Creation"  End if 

				If blnCreatePDFTrainingDoc= True and blnCreateTrainingDoc= True Then    'Saving in PDF format
									Set oWord=createObject("Word.Application")
									Set objDoc = oWord.Documents.open(gstrScreenShotDocument) 
									oWord.ActiveDocument.SaveAs gstrScreenShotDocumentPDF, wdFormatPDF																														
									oWord.quit
									Set oWord=Nothing
									Set oDoc=Nothing
									Set oRange=Nothing	
									fso.deletefile gstrScreenShotDocument						
				End If

				'testCaseName = aTestCaseDetailsForSummary(giSummaryArrCounter ,0)
				Reporter.Filter = rfEnableAll
				On error Resume Next
				Set htmlFile = fso.OpenTextFile(gstrScenarioResultFolder &"\" & gstrDetailedHTMLFileName, 8)

				giTestCaseEndTime = Timer()
		        giTotalTime= FormatNumber(giTestCaseEndTime - giTestCaseStartTime,0) 
				aTestCaseDetailsForSummary(giSummaryArrCounter ,3) = giTotalTime
				strTimeMessage= FormatTimeDuration(giTotalTime)
				htmlFile.writeline("<tr>")
				If blnMainFailFlag Then
							aTestCaseDetailsForSummary(giSummaryArrCounter ,2) ="FAIL"
							giTotalFailCount  = giTotalFailCount  + 1	
							message="Test :  [ "& strTestCaseName &"  ] Completed"
							Reporter.ReportEvent micFail, message, "Failed"
							htmlFile.writeline("<td class='border_Fail_Final' colspan=3 align='center'>" & message & "</td>")
							htmlFile.writeline("<td class='border_Fail_Final' colspan=1 align='center'> FAIL &nbsp;</td>")
							htmlFile.writeline("<td class='border_Fail_Final'colspan=4 align='center' >" & " Duration =  [ "  &    strTimeMessage   & "   ]  " & "  <br> Execution completed at [  " &  Time &   " ] </td>")
		
				else
							aTestCaseDetailsForSummary(giSummaryArrCounter ,2) ="PASS"	                        
							giTotalPassCount = giTotalPassCount   +1
							message="Test :  [ "& gstrTestCaseName & "] Completed."
							Reporter.ReportEvent micPass, message, "Passed"		
							htmlFile.writeline("<td class='border_Pass_Final' colspan=3 align='center'>" & message & "&nbsp;</td>")
							htmlFile.writeline("<td class='border_Pass_Final' colspan=1 align='center' > PASS &nbsp;</td>")
							htmlFile.writeline("<td class='border_Pass_Final'colspan=4 align='center' >" & "  Duration =  [ "  &    strTimeMessage   & "   ]  " & "  <br> Execution completed at [  " &  Time &   " ] </td>")
		
				End If
				htmlFile.writeline("</tr>")
				htmlFile.writeline ("</table>")
				htmlFile.writeline ("<br>")
				Call DeleteBlankLogFile()
				Call CreateDummyFileInScreenshotFolder()
				TestCaseIndex=TestCaseIndex+2
'				If setUploadZippedResultFile Then
'						Call ResultZipFile_Upload(gstrScenarioResultFolder)
'				End If
				
				Call  WriteExecutionDetails(InputFilePath,gstrExecutionSheetName)
				If gblnCreateExecutionSummaryReport  Then
						CreateSummaryReport()
				End If
				
End Function


''*******************************************************************************************************************************************
'Name of the Function : WriteExecutionDetails
'Author		    : Prashant Sharma
'Date			    : 18/09/2013
'Description	    : Exceution of testcase would be captured by this function to create Summary report 
'Input Parameters	    : Input excel path, sheetname input excel where data would be updated
'Output Parameters    : None
'*******************************************************************************************************************************************
Public Function WriteExecutionDetails(InputFilePath,sheetName)
					    If blnShowNotification Then BalloonTooltip.Show "e-Swift Automation","Running : WriteExecutionDetails"  End if 
						Set InputAppExcel = CreateObject("Excel.Application")     
						Set objInputWorkBook = InputAppExcel.Workbooks.Open(InputFilePath) 		' objInputWorkBook  variable  contains/opens the excel workbook for the input file
						Set objInputSheet =  InputAppExcel.Sheets(sheetName) 

						If IsEmpty(objInputSheet.cells(1,15).value) OR ( trim(objInputSheet.cells(1,15).value)  <>"" and  objInputSheet.cells(1,19).value = ""  and objInputSheet.cells(giSummaryArrCounter+2,15).value = "") Then
										objInputSheet.cells(1,15).value = "SerialNo"
										objInputSheet.cells(1,16).value = "TestExecuted"
										objInputSheet.cells(1,17).value = "Iteration"
										objInputSheet.cells(1,18).value = "Status"
										objInputSheet.cells(1,19).value = "Duration"
										objInputSheet.cells(1,20).value = "Result Folder Path"
						elseif aTestCaseDetailsForSummary(giSummaryArrCounter ,0) ="" or isempty(aTestCaseDetailsForSummary(giSummaryArrCounter ,0)) or IsNull(aTestCaseDetailsForSummary(giSummaryArrCounter ,0))then 
										
						else
										objInputSheet.cells(giSummaryArrCounter+2,15).value = giSummaryArrCounter+1
										objInputSheet.cells(giSummaryArrCounter+2,16).value = aTestCaseDetailsForSummary(giSummaryArrCounter ,0)
										objInputSheet.cells(giSummaryArrCounter+2,17).value = aTestCaseDetailsForSummary(giSummaryArrCounter ,1)
										objInputSheet.cells(giSummaryArrCounter+2,18).value = aTestCaseDetailsForSummary(giSummaryArrCounter ,2)
										objInputSheet.cells(giSummaryArrCounter+2,19).value = aTestCaseDetailsForSummary(giSummaryArrCounter ,3)
										objInputSheet.cells(giSummaryArrCounter+2,20).value = gstrScenarioResultFolder
						End If

'						objInputSheet.cells(giSummaryArrCounter+2,1).value = giSummaryArrCounter+1
'						objInputSheet.cells(giSummaryArrCounter+2,2).value = aTestCaseDetailsForSummary(giSummaryArrCounter ,0)
'						objInputSheet.cells(giSummaryArrCounter+2,3).value = aTestCaseDetailsForSummary(giSummaryArrCounter ,1)
'						objInputSheet.cells(giSummaryArrCounter+2,4).value = aTestCaseDetailsForSummary(giSummaryArrCounter ,2)
'						objInputSheet.cells(giSummaryArrCounter+2,5).value = aTestCaseDetailsForSummary(giSummaryArrCounter ,3)
'						objInputSheet.cells(giSummaryArrCounter+2,6).value = gstrScenarioResultFolder

						objInputWorkBook.Save
						objInputWorkBook.Close
						Set InputAppExcel = Nothing
						Set objInputWorkBook =Nothing
						Set objInputSheet =Nothing
End Function


''*******************************************************************************************************************************************
'Name of the Function : GetExecutionDetails
'Author		    : Prashant Sharma
'Date			    : 18/09/2013
'Description	    : Execution details from the sheet would be used as input for summary creation by this function
'Input Parameters	    : Input excel path, sheetname input excel where data would be updated
'Output Parameters    : None
'*******************************************************************************************************************************************
Public Function GetExecutionDetails(InputFilePath,sheetName)
		Dim oConn, oRS, arrData, x
		CONST adOpenStatic = 3
		CONST adLockOptimistic = 3
		CONST adCmdText = "&H0001"

		Set oConn = CreateObject("ADODB.Connection")
		Set objRecSet= CreateObject("ADODB.RecordSet")

		'Open Connection
		oConn.Open "Provider=Microsoft.Jet.OLEDB.4.0;" &_		
				    "Data Source=" & InputFilePath & ";" & _
					"Extended Properties=""Excel 8.0;HDR=Yes;"";"

		sQuery = "Select count (*) From [" & sheetName & "$]"
		sQuery = "Select count (SerialNo) From [" & sheetName & "$]"
		objRecSet.Open sQuery, oConn, 3, 3, 1
		giSummaryArrCounter = objRecSet(0).Value

     
		If  giSummaryArrCounter > 0 Then
			iHTMLTableLink = giSummaryArrCounter +1 ' increasing the iHTMLTableLink  for Detialed HTML report
			objRecSet.Close 
			sQuery = "Select [TestExecuted],[Iteration],[Status],[Duration] From [" & sheetName & "$]"
			objRecSet.Open sQuery, oConn, 3, 3, 1
			'Run query against WorkBook
    	
			For iRow =0 to giSummaryArrCounter-1
				For iCol = 0 to objRecSet.Fields.Count - 1
                            aTestCaseDetailsForSummary(iRow,iCol) = objRecSet(iCol).Value
				Next
				objRecSet.MoveNext
			Next
			
			err.clear
		End If
		set oConn = Nothing
		set objRecSet = Nothing
		
End Function



''*******************************************************************************************************************************************
'Name of the Function : CreateScreenshotDoc
'Author		    : 
'Date			  :
'Description	    : This will MS word document  with screnshots images in it
'Input Parameters	    : test case name
'Output Parameters    : None
'*******************************************************************************************************************************************


Public Function CreateTrainingDoc(strTestCaseName)
						On error resume next
							BalloonTooltip.Show "e-Swift Automation","Creating Test case training doc" 
							Dim strTrainingDocFileName 
							Set oWord = CreateObject("Word.Application")
	'						If err.number <>0  Then
	'											err.clear
	'											call CreateScreenshotDoc_OpenOffice(strTestCaseName)
	'											Exit Function
	'						End If
							oWord.DisplayAlerts = False
							oWord.Visible = False 
							Set oDoc=oWord.Documents.Add
							Const wdHeaderFooterPrimary=1
							Const wdSeekMainDocument = 0
							Const wdSeekCurrentPageHeader = 9
							Const wdSeekCurrentPageFooter = 10
							Const wdPrintView = 3
							
							'Move the page to print view as headers and footers can only be added in print view
							oDoc.ActiveWindow.ActivePane.View.Type = wdPrintView
							
							'Select the header view and add the header
							oDoc.ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
							oDoc.Sections(1).Headers(wdHeaderFooterPrimary).Range.Select
													
							Set oSelection= oWord.Selection
							With oSelection
										.Font.Size ="9"
										.Font.Bold = False
										'.Font="Calibri"
										.ParagraphFormat.Alignment=0
										.TypeText "TCS e-Swift Automation Framework"
										.TypeText vbCrLF
										.Font.Size ="9"
										.Font.Bold = True
										.ParagraphFormat.Alignment=2
										.TypeText "Test Case Manual"
										oSelection.InlineShapes.AddHorizontalLineStandard
										'ActiveDocument.InlineShapes(1).HorizontalLineFormat.PercentWidth = 50					
										'Select the footer view and add the footer
										oDoc.ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
										oDoc.Sections(1).Footers(wdHeaderFooterPrimary).Range.Select 
										footerText= cstr(date)
										oWord.Selection.TypeText footerText
										oDoc.Sections(1).Footers(1).PageNumbers.Add(2)  ' Adding page numbers
							End With
							'oWord.ActiveDocument.Saveas(gstrScreenShotDocument)
							'Swicth back to the main document
							oDoc.ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
					
							oWord.ActiveDocument.Sections(1).Borders.Enable = True    ' Adding Border
							oSelection.TypeText vbcrlf
							oSelection.ParagraphFormat.Alignment=1


								Const END_OF_STORY = 6
								Set objSelection = oSelection
								
								'objSelection.TypeText "Table 1"
								objSelection.TypeParagraph()
								
								Set objRange = objSelection.Range
								oDoc.Tables.Add objRange, 3, 2
								Set objTable = oDoc.Tables(1)
								
								objTable.Range.Style = "Medium Shading 1 - Accent 1" 
								'objTable.Range.Style = "Light List - Accent 1"   '3
								objTable.Cell(1, 1).Range.ParagraphFormat.Alignment=0
								objTable.Cell(1, 1).Range.Font.Name = "Browallia New"
								objTable.Cell(1, 1).Range.Font.Size = 18
								objTable.Cell(1, 1).Range.Text = "Test Case Name"

								objTable.Cell(1, 1).Range.Font.Name = "Browallia New"
								objTable.Cell(1, 2).Range.ParagraphFormat.Alignment=0
								objTable.Cell(1, 2).Range.Font.Size = 18
								objTable.Cell(1, 2).Range.Text = strTestCaseName
								
										
								objTable.Cell(2, 1).Range.Font.Size = 14
								objTable.Cell(2, 1).Range.Font.Name = "Browallia New"
								objTable.Cell(2, 1).Range.ParagraphFormat.Alignment=0
								objTable.Cell(2, 1).Range.Text = "Description"

								objTable.Cell(2, 2).Range.Font.Size = 14
								objTable.Cell(2, 2).Range.Font.Name = "Browallia New"
								objTable.Cell(2, 2).Range.ParagraphFormat.Alignment=0
								objTable.Cell(2, 2).Range.ParagraphFormat.Alignment=0
								objTable.Cell(2, 2).Range.Text = gstrTCDescription
								
								objTable.Cell(3, 1).Range.Font.Size = 14
								objTable.Cell(3, 1).Range.Font.Name = "Browallia New"
								objTable.Cell(3, 1).Range.ParagraphFormat.Alignment=0
								objTable.Cell(3, 1).Range.Text = "Pre-Requisites"

								objTable.Cell(3, 2).Range.Font.Name = "Browallia New"
								objTable.Cell(3, 2).Range.Font.Size = 14
								objTable.Cell(3, 2).Range.ParagraphFormat.Alignment=0
								objTable.Cell(3, 2).Range.Text = gstrTCPrerequisite

								objSelection.EndKey END_OF_STORY
								objSelection.TypeParagraph()
								
								'objSelection.TypeText "Table 2"
								objSelection.TypeParagraph()
								
								Set objRange = objSelection.Range
								oDoc.Tables.Add objRange, 2, 1
								
								Set objTable = oDoc.Tables(2)
								objTable.Range.Style = "Light List - Accent 1"   '3
								objTable.Cell(1, 1).Range.Font.Size = 18
								objTable.Cell(1, 1).Range.ParagraphFormat.Alignment=1
								objTable.Cell(1, 1).Range.Text = "Step Details"
'
'								
								objSelection.EndKey END_OF_STORY
								objSelection.TypeParagraph()'	
								
								strTrainingDocFileName = gstrScenarioResultFolder &"\" &  gstrTestCaseName &"_" & gstrTrainingDocFileName &"_"& RandomNumber(RandomNumber(1,100),999)
								gstrScreenShotDocument=  strTrainingDocFileName  & ".doc"
								gstrScreenShotDocumentPDF = strTrainingDocFileName & ".pdf"
								oWord.ActiveDocument.Saveas(gstrScreenShotDocument)
								oWord.Quit
								Set oWord=nothing
								giStepCounterForTrainingDoc = 0   ' Assigning Value zero to start the counter for step marking in training doc

End Function

''*******************************************************************************************************************************************
'Name of the Function : CreateScreenshotDoc_OpenOffice
'Author		    : 
'Date			  :
'Description	    : This will  Open office  document  with screnshots images in it
'Input Parameters	    : test case name
'Output Parameters    : None
'*******************************************************************************************************************************************

Public Function CreateScreenshotDoc_OpenOffice(strTestCaseName)
			  BalloonTooltip.Show "e-Swift Automation","Executing Now: CreateScreenshotDoc_OpenOffice" 
			  Set oSM = CreateObject("com.sun.star.ServiceManager")				'Instanciate OOo : this line is mandatory with VB for OOo API
              Set oDesk = oSM.createInstance("com.sun.star.frame.Desktop")	'Create the first and most important service
			  Set oDoc = oDesk.loadComponentFromURL("private:factory/swriter", "_blank", 0, array())				  				'Create a new doc
			  ''gstrScreenShotDocument = gstrScenarioResultFolder &"\" & "Screenshots for " &  strTestCaseName &"_IterationNo_" & aTestCaseDetailsForSummary(giSummaryArrCounter ,1)  & ".doc"
			 Call oDoc.storeToURL(FileName2URL(gstrScreenShotDocument) , Array())
			'Close the doc
			  oDoc.Close (True)
			  Set oDoc = Nothing

End Function
'*******************************************************************************************************************************************************



'****************************************************************************************
'Name of the Function	 ->ReporterFunction  
'Author									->Debabrata
'Date									 ->29-Sep-2011
'Description					   ->Writes into the QTP Results and  also into log file
'Input Parameters			 ->scriptFileName-Name of the vbs file
',												functionName-Name of the function name
''												eventStatus-> status of the each function
  '                                              reportStepName-> Step name of the script
'												resultDetails- Result details of each function
'												
'Output Parameters		  ->
'***********************************************************************************
Public Function ReporterFunction(scriptFileName,functionName,eventStatus,reportStepName,resultDetails)
'   BalloonTooltip.Show "e-Swift Automation","Executing Now: ReporterFunction" 
   Reporter.Filter = rfEnableAll
   If eventStatus="1" Then
		 gstrFailedFunctionList = functionName &  " > " & gstrFailedFunctionList 
		 'Environment.Value("strFatalMessage") = Environment.Value("strFatalMessage") & " <br>  <b> "  & resultDetails &" </b>"
   End If
   If  blnSetReporterFlag Then
			 Reporter.ReportEvent eventStatus,"[ e-Swift Function Name:="& functionName & "  ]  :  [ Step := " & reportStepName,resultDetails   & " ] "
   End If
   If blnSetLogFileFlag Then
			Call WriteLogValue (scriptFileName,functionName,eventStatus,reportStepName,resultDetails)
   End If
Reporter.Filter = rfDisableAll

End Function



Public Function CaptureScreenshot(objApplicationObject,strCustomMessage)    
			   
'									If blnShowNotification Then BalloonTooltip.Show "e-Swift Automation","Running : CaptureScreenshot"  End if 
								    Dim qtApp,strTemp ,strWordText,blnNumber,iRandomValue1,iRandomValue2
								    blnNumber= False
								    Timestmp = Replace(Time, ":", ".")
								    Set qtApp = getObject("","QuickTest.Application")   
								    qtApp.WindowState = "Minimized" 
								    Set qtApp = Nothing 
								    iRandomValue1= RandomNumber(1,500) & RandomNumber(501,700) & RandomNumber(701,750)
									iRandomValue2= iRandomValue1 & RandomNumber(801,900) & RandomNumber(901,1400)  &  RandomNumber(752,799)
									strReferenceName=iRandomValue2
									blnNumber= True
								    ImagePath = gstrScenarioResultFolder  & "\ScreenShots\" & strReferenceName &"_"& errorCount & "-" & Timestmp & ".png"
								    Desktop.CaptureBitmap ImagePath, false 
								    CaptureScreenshot=ImagePath
									If Not IsObject(objApplicationObject) Then
                                        					If  objApplicationObject= ""and strCustomMessage  ="" Then 
																							blnCaptureFlag = True 
															End If
									End if 
								    If blnCaptureFlag= true or blnMainFailFlag =true or blnCreateImageEachStep Then
															aImagePathArray(iImageCounterForHTML)=".\ScreenShots\" & strReferenceName &"_"& errorCount & "-" & Timestmp & ".png"
															iImageCounterForHTML =iImageCounterForHTML +1
									End If
'									iImageCounterForHTML =iImageCounterForHTML +1
									blnCaptureFlag=False
									If IsObject(objApplicationObject) and blnCreateTrainingDoc = true Then
										If (Not isEmpty(objApplicationObject) ) or (Not IsNull(objApplicationObject)) Then
														On error resume next
														inX = objApplicationObject.getroproperty("abs_x")
														inY= objApplicationObject.getroproperty("abs_y")
														inHeight = objApplicationObject.getroproperty("width")
														inWidth = objApplicationObject.getroproperty("height")
														HighlightAndCropController gstrScreenShotDocument, strCustomMessage, ImagePath, inX, inY, inHeight, inWidth
																													
										End If
									End If

End Function


'****************************************************************************************
'Name of the Function	 ->FileName2URL
'Author									->TCS
'Date									 ->29-Sep-2011
'Description					   ->Convert the MS office based File path to Openoffice standard
'Input Parameters			 ->FileName
'Output Parameters		  ->Openoffice standard file name
'***********************************************************************************
Function FileName2URL (ByVal fileName)
		temp= replace (fileName,"\","/") 
		FileName2URL = "file:///"&temp
End Function



'****************************************************************************************
'Name of the Function	 ->InsertImage
'Author									->TCS
'Date									 ->29-Sep-2011
'Description					   ->Insert Image in Word doc
'Input Parameters			 ->
'Output Parameters		  ->
'***********************************************************************************
'
Public Function InsertImageInTrainingDoc(ByVal imagePath, ByVal screenShotDoc)
	Dim  iRow
	Set objFSO = CreateObject("Scripting.Filesystemobject") 
	Set objWord = CreateObject("Word.Application")
	Set objDoc = objWord.Documents.open(screenShotDoc)

	Set objTable = objDoc.Tables(2)
	objTable.Rows.Add()
    objTable.Borders.Enable = True 
	iRow = 2*(giStepCounterForTrainingDoc+1)
'	iRow = 2*(giStepCounterForTrainingDoc+1) + 1
	objTable.Cell(iRow, 1).Range.ParagraphFormat.Alignment=1
    set objShape=objTable.Cell(iRow, 1).Range.InlineShapes.AddPicture(imagePath) 
    objDoc.save 
    objWord.quit 

End Function
''******************************************************************************************************************************************************

Public Function InsertStepInTrainingDoc(screenShotDoc, message)
   On  error resume Next
   Set oWord=createObject("Word.Application")
   Dim j,iRow
   j=0 
   Set objDoc = oWord.Documents.open(screenShotDoc) 'oWord.Documents.Open(screenShotDoc) 

	Set objTable = objDoc.Tables(2)
	objTable.Rows.Add()
	iRow = 2*(giStepCounterForTrainingDoc+1)+1
'	iRow = 2*(giStepCounterForTrainingDoc+1)+2
	
	
	objTable.Cell(iRow, 1).Range.ParagraphFormat.Alignment=0
	objTable.Cell(iRow, 1).Range.Font.Name = "Browallia New"
	objTable.Cell(iRow, 1).Range.Font.Color = RGB(58,58,60)
	objTable.Cell(iRow, 1).Range.Font.Size= 15
	objTable.Cell(iRow, 1).Range.Font.Bold= True
	objTable.Cell(iRow, 1).Range.Text = "Step " & giStepCounterForTrainingDoc &": " & vbCrLf &message
	oWord.ActiveDocument.Save	
	oRange.collapse(0)

	oWord.quit
	Set oWord=Nothing
	Set oDoc=Nothing
	Set oRange=Nothing

		
End Function


'**************************************************************************************************************************************************************************

Function HighlightAndCropController (ByVal screenShotDoc, ByVal message, ByRef strImagePath,ByVal inX,ByVal inY,ByVal inHeight,ByVal inWidth)
	Dim recX, recY, recHeight, recWidth, ecX, ecY, ecHeight, ecWidth, topRecMargin, bottomRecMargin, leftRecMargin, rightRecMargin, Img, gapRecEclipse, cropX, cropY, cropHeight, cropWidth, stringX, stringY
	Dim strNewImagePath
	giStepCounterForTrainingDoc = giStepCounterForTrainingDoc +1
	topRecMargin =5
	bottomRecMargin=5
	leftRecMargin=5
	rightRecMargin=5
	gapRecEclipse = 5
	ecHeight = 25
	ecWidth =25
	stepCounter = stepCounter +1
	recX = inX - leftRecMargin
	recY = inY - topRecMargin
	recWidth = inWidth + topRecMargin + bottomRecMargin
	recHeight = inHeight  + leftRecMargin + rightRecMargin
	If recX < 0 Then
		recX = 0
	End If
	If recY < 0 Then
		recY = 0
	End If
	Set Img = CreateObject("WIA.ImageFile")
	Img.LoadFile strImagePath
	If (recX + recHeight) > Img.Width Then
		recHeight = Img.Width - recX
	End If
	If (recY + recWidth) > Img.Height  Then
		recWidth = Img.Height - recY
	End If
	ecX = recX + recHeight + gapRecEclipse
	ecY = RecY
	If (ecX + ecHeight) > Img.Width Then
		ecX = recX - gapRecEclipse - ecHeight
	End If
	If (ecY + ecWidth) > Img.Height Then
		ecY = Img.Height - ecWidth
	End If
	stringX = ecX+2
	stringY = ecY + 6
	DrawRectangle strImagePath ,recX ,recY,recHeight ,recWidth,"RED"
	If blnCreateTrainingDoc Then
		strNewImagePath = strImagePath&"123.jpg"
		fso.CopyFile strImagePath,strNewImagePath 
		DrawEclipse strNewImagePath, ecX,ecY, ecHeight,ecWidth,"Red","Yellow"
		DrawString  strNewImagePath , stringX,stringY,"Red"
	End If
	If recX < ecX Then
		cropX = recX
	Else  
		cropX = ecX
	End If
	If recY < ecY Then
		cropY = recY
	Else  
		cropY = ecY
	End If
	cropHeight = recHeight + ecHeight + gapRecEclipse
	If recWidth > ecWidth Then
		cropWidth = recWidth
	Else 
		cropWidth = ecWidth
	End If
    'CropImage strNewImagePath,cropX, cropY, cropHeight, cropWidth
	InsertImageInTrainingDoc strNewImagePath , screenShotDoc
	InsertStepInTrainingDoc  screenShotDoc, message
	DeleteTempImages strNewImagePath
	

End Function

'*****************************************************************************************************************************************************


Function DrawRectangle(ByRef strImagePath,ByVal inX,ByVal inY,ByVal inHeight,ByVal inWidth,ByVal strColor)
   On error resume next
	Dim oPens,oGraphics,oImage,oBitmap,oRect,oFile,oGraphicsImage,oImagePath
	Set oImage=DotNetFactory.CreateInstance("System.Drawing.Image","System.Drawing")
	Set oGraphics=DotNetFactory.CreateInstance("System.Drawing.Graphics","System.Drawing")
	Set oRect=DotNetFactory.CreateInstance("System.Drawing.Rectangle","System.Drawing",inX,inY,inHeight,inWidth)
	Set oPens=DotNetFactory.CreateInstance("System.Drawing.Pens","System.Drawing") 
	Set oFile=DotNetFactory.CreateInstance("System.IO.File","")
	Set oImagePath=oImage.FromFile(strImagePath)
	Set oBitmap=DotNetFactory.CreateInstance("System.Drawing.Bitmap","System.Drawing",oImagePath) 
	Set oGraphicsImage = oGraphics.FromImage(oBitmap)
	Execute "oGraphicsImage.DrawRectangle oPens."&strColor&", oRect"
	oImagePath.Dispose
	Set oPens=Nothing
	Set oGraphics=Nothing
	Set oImage=Nothing
	Set oRect=Nothing
	Set oImagePath= Nothing
	Set oGraphicsImage=Nothing
	oFile.Delete(strImagePath)
	oBitmap.Save(strImagePath)
	Set oFile=Nothing
	Set oBitmap=Nothing
End Function


Function DrawEclipse(ByRef strImagePath,ByVal inX,ByVal inY,ByVal inHeight,ByVal inWidth,ByVal strColor,Byval strBrush)
	Dim oPens,oGraphics,oImage,oBitmap,oRect,oFile,oBrushes,oImagePath,oGraphicsImage
	Set oImage=DotNetFactory.CreateInstance("System.Drawing.Image","System.Drawing")
	Set oGraphics=DotNetFactory.CreateInstance("System.Drawing.Graphics","System.Drawing")
	Set oRect=DotNetFactory.CreateInstance("System.Drawing.Rectangle","System.Drawing",inX,inY,inHeight,inWidth)
	Set oPens=DotNetFactory.CreateInstance("System.Drawing.Pens","System.Drawing") 
	Set oBrushes=DotNetFactory.CreateInstance("System.Drawing.Brushes","System.Drawing") 
	Set oFile=DotNetFactory.CreateInstance("System.IO.File","")
	Set oImagePath=oImage.FromFile(strImagePath)
	Set oBitmap=DotNetFactory.CreateInstance("System.Drawing.Bitmap","System.Drawing",oImagePath) 
	Set oGraphicsImage = oGraphics.FromImage(oBitmap)
	Execute "oGraphicsImage.DrawEllipse oPens."&strColor&", oRect"
	Execute "oGraphicsImage.FillEllipse oBrushes."&strBrush&", oRect"
	oImagePath.Dispose
	Set oPens=Nothing
	Set oGraphics=Nothing
	Set oImage=Nothing
	Set oRect=Nothing
	Set oBrushes=Nothing
	Set oImagePath=Nothing
	Set oGraphicsImage=Nothing
	oFile.Delete(strImagePath)
	oBitmap.Save(strImagePath)
	Set oFile=Nothing
	Set oBitmap=Nothing
End Function

Function CropImage (ByRef strImagePath, ByVal inX, ByVal inY, ByVal inHeight, ByVal inWidth)
	Dim Img , IP
	topMargin =50
	bottomMargin = 50
	leftMargin = 50
	rightMargin = 50
	Set Img = CreateObject("WIA.ImageFile")
	Set IP = CreateObject("WIA.ImageProcess")
	Img.LoadFile strImagePath
	IP.Filters.Add IP.FilterInfos("Crop").FilterID
	t= inY - topMargin
	b=Img.Height - ( inY + inWidth + bottomMargin)
	l = inX - leftMargin
	r = Img.Width - (inX + inHeight + rightMargin)
	If t < 0 Then
		t = 0
	End If
	If b < 0 Then
		b = 0
	End If
	If l < 0 Then
		l =0
	End If
	If r < 0 Then
		r = 0
	End If
	IP.Filters(1).Properties("Left") = l
	IP.Filters(1).Properties("Top") = t
	IP.Filters(1).Properties("Right") = r
	IP.Filters(1).Properties("Bottom") = b

	Set Img = IP.Apply(Img)
	Set oFile=DotNetFactory.CreateInstance("System.IO.File","")
	oFile.Delete(strImagePath)
	Img.SaveFile strImagePath
	Set oFile = Nothing
	Set Img = Nothing
End Function

Function DeleteTempImages (ByRef strImagePath)
	Set oFile=DotNetFactory.CreateInstance("System.IO.File","")
	oFile.Delete(strImagePath)
	Set oFile = Nothing
End Function

Function DrawString(ByRef strImagePath,ByVal inX,ByVal inY, ByVal strColor)
	Dim oPens,oGraphics,oImage,oBitmap,oRect,oFile,oFont,oBrushes, iStr
	iStr = CStr(giStepCounterForTrainingDoc)
	Set oImage=DotNetFactory.CreateInstance("System.Drawing.Image","System.Drawing")
	Set oGraphics=DotNetFactory.CreateInstance("System.Drawing.Graphics","System.Drawing")
	Set oPens=DotNetFactory.CreateInstance("System.Drawing.Pens","System.Drawing") 
	Set oFont=DotNetFactory.CreateInstance("System.Drawing.Font","System.Drawing","Arial",10)
	Set oBrushes=DotNetFactory.CreateInstance("System.Drawing.Brushes","System.Drawing")
	Set oFile=DotNetFactory.CreateInstance("System.IO.File","")
	Set oImage=oImage.FromFile(strImagePath)
	Set oBitmap=DotNetFactory.CreateInstance("System.Drawing.Bitmap","System.Drawing",oImage) 
	Set oGraphics = oGraphics.FromImage(oBitmap)
	oGraphics.DrawString iStr,oFont,oBrushes.Red,inX,inY
	oImage.Dispose
	oFile.Delete(strImagePath)
	oBitmap.Save(strImagePath)
	Set oPens=Nothing
	Set oGraphics=Nothing
	Set oImage=Nothing
	Set oFile=Nothing
	Set oBitmap=Nothing
	Set oRect=Nothing
End Function



'*******************************************************************************************************************************************************
Public Function InsertImage_OpenOffice(strScreenName,strImagePath)
		On error resume next
		Set objServiceManager= CreateObject("com.sun.star.ServiceManager")
		Set objDesktop= objServiceManager.createInstance("com.sun.star.frame.Desktop")
		set oDoc = objDesktop.loadComponentFromURL(FileName2URL(gstrScreenShotDocument), "_blank", 0, Array())
		Set oText = oDoc.getText()
		Set Cursor = oDoc.Text.createTextCursor()
		Cursor.goToEnd(False)
		Set xEnd = oText.getEnd()
		'xEnd.setString("This is some text.")
		set oDrawPage = oDoc.getDrawPage()						
		 cFile  = strImagePath	 
		cUrl = FileName2URL( cFile )
		cUrl = LoadGraphicIntoDocument( oDoc, cUrl, cUrl)	' Convert the URL into an internal URL within the document. If you comment out this line, then the shape that is created from the ur l  will refer to the external graphic, which must always be present.
		Call MakeGraphicObjectShape( oDoc, 0, 0,  16000, 16000  )	   ' URL points to a graphic *inside* of the document's Zip file,  rather than an external url.    
		oDrawPage.add( oShape )	 ' Add it to the drawing page.
		oShape.GraphicURL = cUrl	' Set its URL to a particular graphic.
		Call oDoc.store()								'Save the doc
		oDoc.Close (True)							'Close the doc
		Set oDoc = Nothing
End Function
''******************************************************************************************************************************************************

'*******************************************************************************************************************************************************
Public Function MakeGraphicObjectShape( oDoc ,x,y,width,height)
			Set oSM = CreateObject("com.sun.star.ServiceManager")    
			Set oPoint = oSM.Bridge_GetStruct("com.sun.star.awt.Point")
			oPoint.X = x
			oPoint.Y = y
			Set oSM = CreateObject("com.sun.star.ServiceManager")    
			Set oSize = oSM.Bridge_GetStruct("com.sun.star.awt.Size")
		   'oSize = createUnoStruct( "com.sun.star.awt.Size" )
		    oSize.Width = width
		    oSize.Height = height
		   Set oShape = oDoc.createInstance( "com.sun.star.drawing.GraphicObjectShape" )
		   oShape.Position = oPoint
		   oShape.Size = oSize
End Function
''******************************************************************************************************************************************************

'*******************************************************************************************************************************************************
Public Function LoadGraphicIntoDocument( oDoc , cUrl , cInternalName ) 
	  set  oBitmaps = oDoc.createInstance( "com.sun.star.drawing.BitmapTable" )	' Get the BitmapTable from this drawing document. It is a service that maintains a list of bitmaps that are internal  to the document.
      oBitmaps.insertByName  cInternalName, cUrl 		   ' Add an external graphic to the BitmapTable of this document.
      cNewUrl = oBitmaps.getByName( cInternalName )	' Now ask for it back.   ' What we get back is an different Url that points to a graphic   '  which is inside this document, and remains with the document.
	  LoadGraphicIntoDocument = cNewUrl
End Function
''******************************************************************************************************************************************************

Public Function WriteCapturedValue(InputFilePath,sheetName,VariableName,IterationIndex,CapturedValue)

		BalloonTooltip.Show "e-Swift Automation","Executing Now: WriteCapturedValue" 
		Dim oConn, oRS, arrData, x
        CONST adLockOptimistic = 3
        CONST adOpenKeySet     = 1
        CONST adCmdTableDirect = 512

		Set oConn = CreateObject("ADODB.Connection")
		Set objRecSet= CreateObject("ADODB.RecordSet")

		'Open Connection
					oConn.Open "Provider=Microsoft.Jet.OLEDB.4.0;" &_
				    "Data Source=" & InputFilePath & ";" & _
					"Extended Properties=""Excel 8.0; HDR=YES;"";"
		
		 objRecSet.Open sheetName &"$", oConn,adOpenKeySet,adLockOptimistic,adCmdTableDirect
		
		 For x = 2 to IterationIndex - 1
					objRecSet.MoveNext
		 Next

		For x = 0 to objRecSet.Fields.Count - 1
					DataItemName = trim(objRecSet(x).Name)
					If  DataItemName = VariableName Then
							objRecSet(x).Value = CapturedValue
					End If
		Next
		
	   objRecSet.Update	' updating the Excel Database
	   
		set oConn = Nothing
		set objRecSet = Nothing

		
End Function


Public Function CreateLogFile()
			 On  error resume Next     
			 BalloonTooltip.Show "e-Swift Automation","Executing Now: CreateLogFile" 
             logFileName= gstrScenarioResultFolder & "\" & "e-Swift LogFile" &".txt" 
             Set objFile  = fso.createtextfile(logFileName , True)
             objFile.Close
             Set objFile = Nothing		'Destroy the objFile object
End Function
'*******************************************************************************************************************************************************

'*******************************************************************************************************************************************************
Public Function WriteLogValue (scriptFileName,functionName,eventStatus,reportStepName,resultDetails)

						On  error resume Next     
					    BalloonTooltip.Show "e-Swift Automation","Executing Now: WriteLogValue" 
						Dim strMessage
						currentTime = Replace(Time, ":", ".")
					    date_year=datePart("yyyy",date)
					    date_month=datePart("m",date)
						date_day=datePart("d",date)

						Select Case date_month
								Case "1"
								date_month="JAN"
								Case "2"
								date_month="FEB"
								Case "3"
								date_month="MAR"
								Case "4"
								date_month="APR"
								Case "5"
								date_month="MAY"
								Case "6"
								date_month="JUN"
								Case "7"
								date_month="JUL"
								Case "8"
								date_month="AUG"
								Case "9"
								date_month="SEP"
								Case "10"
								date_month="OCT"
								Case "11"
								date_month="NOV"
								Case "12"
								date_month="DEC"					
					     End Select
                        convertedDate=date_day &"-"  & date_month & "-" & date_year

						If eventStatus=0 Then
							eventStatus="PASS"
							strMessage="DESCRIPTION"
						ElseIf eventStatus=1 Then
							eventStatus="FAIL"
							strMessage="REASON"
							Set objFile = fso.OpenTextFile(gstrScenarioResultFolder & "\" & "e-Swift LogFile" &".txt",8)
							objFile.WriteLine(convertedDate &" "& currentTime &" [  FUNCTION NAME : " & functionName &" ]   [ STEP : " & reportStepName &" ]   [ STATUS : "& eventStatus &" ]   [ " & strMessage & " : "& resultDetails &" ]")
							objFile.WriteBlankLines(1)
							objFile.Close
							Set objFile = Nothing
	
						ElseIf eventStatus=2 Then
							eventStatus="DONE"
							strMessage="DESCRIPTION"
						Else
							eventStatus="WARNING"
							strMessage="REASON"
						End If

                        
End Function
'*******************************************************************************************************************************************************



'******************************************************  Start  of Creating Zip folder*************************************
Public Function ResultZipFile_Upload(ResultFolderPath )
BalloonTooltip.Show "e-Swift Automation","Executing Now: ResultZipFile_Upload" 
If setUploadZippedResultFile Then
						Dim objApp, objFSO, objTxt    
						Const ForWriting = 2     
						 zipfilepath = ResultFolderPath & ".zip"
						On Error Resume Next      
						Set QCConn = QCUtil.QCConnection
						If QCUtil.IsConnected Then
										Set objFSO = CreateObject( "Scripting.FileSystemObject" )  
										Set objTxt = objFSO.OpenTextFile( zipfilepath, ForWriting, True )    
										objTxt.Write "PK" & Chr(5) & Chr(6) & String( 18, Chr(0) )
										objTxt.Close    
										Set objTxt = Nothing    
										Set objFSO = Nothing      
										 If Err Then       
													ResultZipFile_Upload = Array( Err.Number, Err.Source, Err.Description )       
										Err.Clear        
										On Error Goto 0        
										 Exit Function    
						End If       
						Set objApp = CreateObject( "Shell.Application" )    
						objApp.NameSpace( zipfilepath ).CopyHere objApp.NameSpace( ResultFolderPath ).Items    
						wait(5)
						Call UploadZipResultFile(zipfilepath)    
						 If Err Then     
						ResultZipFile_Upload = Array( Err.Number, Err.Source, Err.Description )        
						Set objApp = Nothing        
						Err.Clear
						On Error Goto 0  
		
	Exit Function 
	
	End If    
	Set objApp = Nothing   
	
	 If Err Then      
	ResultZipFile_Upload = Array( Err.Number, Err.Source, Err.Description )      
	Err.Clear        
	On Error Goto 0
	Exit Function   
	 End If 
	On Error Goto 0   
	ResultZipFile_Upload = Array( 0, "", "" )
	End If
	
End If
End Function  


''******************************************************  Start uploading Zip Result file *************************************

Public Function UploadZipResultFile(zipfilepath)
		Dim ObjCurrentTest,ObjAttch
		Set QCConctn = QCUtil.QCConnection
		If QCutil.IsConnected Then
				strTestName = QCutil.CurrentTestSet.Name
				Set tsTreeMgr = QCutil.QCConnection.TestSetTreeManager
				strTestSetPath = GetCurrentQCTestLabPath()
				'msgbox strTestSetPath  & "" & strTestName
				Set TestSetFolder = tsTreeMgr.NodeByPath(strTestSetPath )
				Set TestSetF = TestSetFolder.TestSetFactory 'Retreive test from given folder in test lab
				Set aTestSetArray = TestSetF.NewList("")
				tsSet_cnt=aTestSetArray.Count
				For i=1 to tsSet_cnt ' Loop through the Test Sets to pick the desired test Set
									Set tstests=aTestSetArray.Item(i)
									TestSet_Name=tstests.Name
									If TestSet_Name= strTestName Then
												'msgbox " Yes"  & tstests.Name
												Set attachmentPath =tstests.Attachments
												Set nowAttachment = attachmentPath.AddItem(Null)
												nowAttachment.FileName = zipfilepath
												nowAttachment.Type = 1
												nowAttachment.Post()
									End if 
				Next 
		End If
End Function

Function GetCurrentQCTestLabPath()
   If QCUtil.IsConnected Then
				Set CurrentTestSet = QCUtil.CurrentTestSet
				Set folder = CurrentTestSet.TestSetFolder
				folderName = folder.Name
				strPath = folderName
				While folderName <> "Root"
				Set folder = folder.Father
				folderName = folder.Name
				strPath = folderName & "\" & strPath
				Wend
				GetCurrentQCTestLabPath = strPath 
   End If

End Function 

'Public Function UploadZipResultFile(zipfilepath)
'		Dim ObjCurrentTest,ObjAttch
'		Set QCConctn = QCUtil.QCConnection
'		If QCUtil.IsConnected Then
'		Set ObjCurrentTest = QCUtil.CurrentTestSet.Attachments
'
'		Set ObjAttch = ObjCurrentTest.AddItem(Null)
'		ObjAttch.FileName = zipfilepath
'		ObjAttch.Type = 1
'		ObjAttch.Post
'		ObjAttch.Refresh
'		End If
'End Function


''****************************************************** End of  uploading Zip Result file************************************

''******************************************************  Start Sending  Email  *******************************************************************************************
Public Function SendMail(strSubject,strBody, strSendTo,strSendToCC,strSendtoBCC,mailServerName,strPassword, ResultFolderPath) 
   Dim mail 
   mail=mailServerName 
   AttachmentPath= ResultFolderPath & ".zip"   
    If QCUtil.IsConnected Then 
       TestName = QCUtil.CurrentTest.Name 
                on error resume next 
                TestName = QCUtil.CurrentTestSet.Name 
        QC_UserName = QCUtil.QCConnection.UserName 
  End if 
  strSubject=replace(strSubject,"TestSetName",TestName) 
  strBody=replace(strBody,"TestSetName",TestName)
  strBody=split(strBody,"#",-1,1)
'  replaceString=""&vbcr&" "&"" 
'  strBody=replace(strBody,"&vbcr&",replaceString) 
'strBody.Execute(strBody)
'  msgbox strBody
  If   UCASE(mail)="LOTUS"Then 
                        
                                                        Dim Session 
                                                        Dim Maildb 
                                                        Dim MailDoc 
                                                        Dim Body 
                                                        Dim EmbedObj 
                                                        Dim  AttachME         
                                                        'Dim sUser 
                                                        Set Session=CreateObject("Lotus.NotesSession") 'Start a session to notes 
                                                        on error resume next 
                                                        'Set SessionExist=GetObject("Notes.NotesSession") 
'                                                       Call Session.InitializeUsingNotesUserName("c@r33r", "InternetPassword") 
                                                
'                                                        If SessionExist Is Nothing  Then 
'                                                                msgbox "You Can not send mail : Lotus Notes Client not exist in your machine" 
'                                                                else 
'                                                                   
'                                                        End If 

                                                       'Dim Password 
                                                       ' Password= InputBox("Enter your Lotus Notes Password")                                                 
                                                        Session.Initialize(strPassword) 
'                                                        If a<>null Then 
'                                                                msgbox "password" 
'                                                        End If 
'                                                       msgbox a 
                                                        mailServer =Session.getEnvironmentString("MailServer", True) 
                                                        mailFile =Session.getEnvironmentString("MailFile", True) 
                                                        Set Maildb = Session.getDatabase(mailServer, mailFile)  ''Open the mail database in notes 

                                                        If Not Maildb.IsOpen = True Then 
                                                                        Call Maildb.Open                 
                                                         End If 

                                                        Set MailDoc = Maildb.CREATEDOCUMENT()  'Create the mail document 
                                                        
                                                        Dim RecipientEmailId 
                                                        RecipientEmailId=Split(strSendTo,";",-1,1) 
                                                        Call MailDoc.REPLACEITEMVALUE("SendTo", RecipientEmailId) 

                                                        Dim ccRecipientEmailId 
                                                        ccRecipientEmailId=Split(strSendToCC,";",-1,1) 
                                                        Call MailDoc.REPLACEITEMVALUE( "CopyTo",ccRecipientEmailId) 

                                                        Dim bccRecipientEmailId 
                                                        bccRecipientEmailId=Split(strSendtoBCC,";",-1,1) 
                                                        Call MailDoc.REPLACEITEMVALUE("BlindCopyTo", bccRecipientEmailId) 
                                                                                                                                
                                                        Call MailDoc.REPLACEITEMVALUE("Subject" , strSubject) 

                                                        Set Body = MailDoc.CREATERICHTEXTITEM("Body") 
														For i=0 To ubound(strBody)
                                                        Call Body.APPENDTEXT(strBody(i)&vbcr&"  ") 
														Next
                                                        'Call Body.APPENDTEXT(strBody) 

                            '         
                                                        Call MailDoc.REPLACEITEMVALUE("SAVEMESSAGEONSEND",True) 
                                                                                                                                  
                                                         'Set up the embedded object and attachment and attach it 
                                                         If AttachmentPath <> "" Then 
                                                                 Set AttachME = MailDoc.CREATERICHTEXTITEM("Attachment") 
                                                                 Set EmbedObj = AttachME.EMBEDOBJECT(1454, "", AttachmentPath, "Attachment")           
                                                         End If                 

                                                        Call MailDoc.REPLACEITEMVALUE("PostedDate", Now())   'Gets the mail to appear in the sent items folder 
                                                        Call MailDoc.Save(True,False) 
                                                        'Send the document 
                                                        MailDoc.SEND (False)
                                                   
                                                        'Session.close() 
                                                         Set  Session=nothing 
                                                         Set   Maildb  =nothing 
                                                         Set MailDoc=nothing 
                                                         Set Body =nothing 
                                                         Set EmbedObj=nothing 
                                                         Set AttachME =nothing 
                            ' Session.Close 
           else if UCASE(mail)="OUTLOOK" Then 
                                                Set objOutlook=CreateObject("Outlook.Application") 
                                                on error resume next 
                                                Set objMail=objOutlook.CreateItem(0) 

                                                objMail.to= strSendTo 

                                                objMail.CC=strSendToCC 

                                                objMail.Bcc=strSendtoBCC 

                                                objMail.Subject=strSubject 
                                                 For i=0 To ubound(strBody)
                                                objMail.Body=strBody(i)  
												Next     
                                                                                                                                        
                                                objMail.Attachments.Add(zipfilepath) 'attachFile is a variable which helds the file name with its complete path 

                                                wait(5) 

                                                objMail.Display 'Displays e-mail message window 

                                                wait(5) 

                                                objMail.Send 

                                                Wait (5) 

                                                Set objMail = Nothing 

                                                Set objOutlook = Nothing 
                                                message="Mail has been sent sucessfully" 
                                                                                                status="DONE" 
                                
                       else 
                                        Call ReporterFunction ("1","Send Mail", "You can not send mail : Lotus and OutLook Client  is not installed in your machine") 
                        
     End If 
 End If 

End Function 
''******************************************************************************************************************************************************

'***********************************************************************************
'Name of the Function  -> AutomaticDefectLog
'Author		     					  ->Debabrata Khuntia
'Date			     				   ->16-Nov-2011
'Description		    	 	->  Logging defect automatically in Qc
'			       							    
'Input Parameters	     ->  DefectMandatoryFieldList->Manadtory column name list  for defect
'												DefectSummary-Summary of defect
'												DefectSeverity-Severity of defect
'												DefectAssignedTo-whom to assign the defect
'												DefectDetectedBy-who detects defect
'												DefectPriority-Priority of defect
'												DefectStatus-Status of defect
'												DefectProjectName-Project name for the defect
'												DefectDescription-Description of the defect
'												AttachmentPath-local Path for error scrren shot 
'Output Parameters     ->
'***********************************************************************************
'AutomaticDefectLog(DefectMandatoryFieldList,DefectSummary,DefectSeverity,DefectAssignedTo,DefectDetectedBy,DefectPriority,DefectStatus,DefectProjectName,DefectDescription,AttachmentPath)
'***********************************************************************************


Function AutomaticDefectLog(DefectMandatoryFieldList,DefectSummary,DefectSeverity,DefectAssignedTo,DefectDetectedBy,DefectPriority,DefectStatus,DefectProjectName,DefectDescription,AttachmentPath)
        startTime=Timer()
		Dim MandatoryFieldList,i
                   On Error Resume Next	
			MandatoryFieldList=split(cstr(DefectMandatoryFieldList),",",-1,1)
				For i=0 To ubound(MandatoryFieldList)'.count-1
                	If Not MandatoryFieldList(i)="" Then
						'Msgbox "No Mandatory Field for Defect "
'						Else
						Execute("Temp="&MandatoryFieldList(i))
						If Temp="" And DefectSummary="" Then
										stepName="Check Defect Mandatory Field "	       
										inputParameter="<b>" & MandatoryFieldList(i) & " : </b>" & Temp &"<br><b>DefectSummary : </b> " & DefectSummary
										status="FAIL"
										Flag=1
										blnMainFailFlag = True
										message="Mandatory Field Missing for Defect Logging."
										Call ReporterFunction("e-Swift_ReportCreation.vbs","AutomaticDefectLog","1",stepName,message)
										 endTime=Timer()
										 ExeTime = FormatNumber(endTime - startTime,3) 
										Call UpdateResultHtml(stepName,inputParameter,message,status,outputParameter)
										Exit Function
			'							Msgbox "Please Enter Value Against each Mandatory Field"
					   End If						
                  End If
                Next

             If Not TDConnection.Connected Then
                         Call IsQCConnected(QCServerName,QCUserName,QCPassword,QCDomain,QCProject)
             End If
              If QCUtil.IsConnected Then
			            DefectDetectedBy = QCUtil.QCConnection.UserName
			  else
			            DefectDetectedBy=DefectDetectedBy

              End If
'Get the IBugFactory
         Set BugFactory = TDConnection.BugFactory
'Add a new empty bug
         Set objBug = BugFactory.AddItem (Nothing)
'fill the bug with relevant parameters
		objBug.Summary =DefectSummary
		objBug.Status = DefectStatus
		objBug.Priority = DefectPriority  ' depends on the DB
		objBug.AssignedTo =DefectAssignedTo  ' user that must exist in the DB's users list
		objBug.DetectedBy = DefectDetectedBy  ' user that must exist in the DB's users list
		objBug.Field("BG_SEVERITY") = DefectSeverity
		objBug.Field("BG_DETECTION_DATE") = Date
		objBug.Field("BG_PROJECT")=DefectProjectName      
		objBug.Field("BG_DESCRIPTION") = DefectDescription
		Set ObjAttch = objBug.Attachments
		Set a=ObjAttch.AddItem(Null)
		a.FileName = AttachmentPath
		a.Type = 1 
		a.post
		a.Refresh
		objBug.Post
		objBug.Refresh
	   Set a=Nothing
	   Set ObjAttch=Nothing
	   Set objBug=Nothing
	   Set BugFactory=Nothing
	   'Disconnect TD session
	   TDConnection.Disconnect
	   Set TDConnection=Nothing
End Function
'**********************************************************************************
'End Function - AutomaticDefectLog
'***********************************************************************************




'***********************************************************************************
'Name of the Function  -> IsQCConnected
'Author		     					  ->Debabrata Khuntia
'Date			     				   ->16-Nov-2011
'Description		    	 	->  connecting QC through OTA feature
'			       							    
'Input Parameters	     -> QCServerName-Server name of QC
'												QCUserName-Username of Qc
'												QCPassword-Password of Qc
'                                                QCDomain-Domain name of Qc
	'											 QCProject-Project name of QC
'Output Parameters     ->
'***********************************************************************************
 'IsQCConnected(QCServerName,QCUserName,QCPassword,QCDomain,QCProject)
'***********************************************************************************
Public Function IsQCConnected(QCServerName,QCUserName,QCPassword,QCDomain,QCProject)

                 startTime=Timer()
		         stepName="QC Connection"	       
                 inputParameter="<b>Server Name : </b> "& Server &"<br><b>UserName : </b> " & UserName & "<br><b> Password : </b> " & "*****" & "<br><b> QCDomain : </b> " & QCDomain & "<br><b> QCProject : </b> " & QCProject
               On Error Resume Next	
              
					If Err.Number <> 0 Then
				errorDescription= "Unable to create an instance of the TestDirector API And OLE (TestDirector Connection) Object."
				Err.Clear : Exit Function
				End If

				TDConnection.InitConnection QCServerName ' URL for the DB
				If Err.Number <> 0 Then
					errorDescription= Err.Description
					Exit Function
				End If
              TDConnection.Login QCUserName,QCPassword
                 If Err.Number <> 0 Then
					errorDescription=Err.Description
					Exit Function
				ElseIf Not TDConnection.LoggedIn Then
					errorDescription= "Unable to login to Quality Center. Please verify your login credentials."
					Exit Function
				End If
              TDConnection.Connect  QCDomain,QCProject  ' Valid login information
 	             If Err.Number <> 0 Then
					errorDescription= Err.Description
					Exit Function
				ElseIf Not TDConnection.ProjectConnected Then
					errorDescription= "Unable to connect to '" & QCDomain & "/" & QCProject & "'."
					Exit Function
				End If
              On Error Goto 0
						
		    If TDConnection.Connected Then		
						status="DONE"
						message="QC  Connection Successful"
						Call ReporterFunction( "e-Swift_ReportCreation.vbs","IsQCConnected","2",stepName,message)
		   Else 	
				status="FAIL"
				Flag=1
				blnMainFailFlag = True
				message="QC Connection Failed." & vbnewline & "Error Description:" & errorDescription
				Call ReporterFunction("e-Swift_ReportCreation.vbs","IsQCConnected","1",stepName,message)
		   End If				
				 endTime=Timer()
				 ExeTime = FormatNumber(endTime - startTime,3) 
				 If status="FAIL" Then   
				 Call UpdateResultHtml(stepName,inputParameter,message,status,outputParameter)
				 End If     	
	End Function


'**********************************************************************************
'End Function - IsQCConnected
'***********************************************************************************



Public Function Error_Listener(functionName,objElement)   		'//Code to chek if error occured and redirect it to the handle

						Dim blnErrorExists
						Dim message,blnErrorFlag
						Dim strRecoveryPlan,strErrorType 
			
						stepName="Run Error at : " & functionName				
						Dim messageByHandler
						ExeTime=Now
						blnErrorExists = False
						If OracleStatusLine("micclass:=OracleStatusLine").Exist( gObjectTimeoutLimit) Then
								 If OracleStatusLine("micclass:=OracleStatusLine").getROProperty("message")<>"" Then 
														  errorCode= OracleStatusLine("message:=.*").GetROProperty("error code")
														 If  errorCode<>"" And  errorCode<>"FRM-40400" And errorCode<> "Choices in list"  And errorCode<> "FRM-40404" And errorCode<>  "APP-AR-11094" And errorCode<>  "FRM-40350" And errorCode<>  "FRM-40406" And (instr(errorCode,"FRM-4")>1) Then ' Added on 20 june 2012 to handle error code generated due to LOV
																	Call CaptureScreenshot("","")																																																																																																																																															'Added  "APP-AR-11094"  in 05 july  to handle  error code  genearted due to exchange rate  in Receipt Batchs form
																	 Environment.Value("strFatalMessage") = OracleStatusLine("message:=.*").GetROProperty("message")
																	 blnErrorFlag =True
																	 strRecoveryPlan = 	"CloseAllForms"
																	 
														  End If
					
								End If
						 End If

										
							If OracleNotification("title:=Error").Exist(gObjectTimeoutLimit)Then '// Not allow to move further
    									Environment.Value("strFatalMessage")  = OracleNotification("title:=Error").GetROProperty("message")
										Call CaptureScreenshot("ErrorPopUp","")
										Call CloseAllErrorBoxes
										'OracleNotification("title:=Error").Approve
										strRecoveryPlan = "CloseAllForms"
										blnErrorFlag = True
	
							elseIf OracleNotification("title:=Caution").Exist(gObjectTimeoutLimit)Then
										Environment.Value("strFatalMessage")  = OracleNotification("title:=Caution").GetROProperty("message")
										'Call CaptureScreenshot("WarningPopUp","")
										'OracleNotification("title:=Caution").Approve
										strRecoveryPlan = "CONTINUE"
										blnErrorFlag = True  
							
							elseIf OracleNotification("title:=Note").Exist(gObjectTimeoutLimit)Then
										Environment.Value("strFatalMessage") = OracleNotification("title:=Note").GetROProperty("message")
										'Call CaptureScreenshot("NotePopUp","")
									    'OracleNotification("title:=Note").Approve
										strRecoveryPlan = "CONTINUE"
										blnErrorFlag = True' 'Added  this line  because it is not error pop up
									
							End If  
	
							If  blnErrorFlag Then
									Error_Listener= Error_Recovery (strRecoveryPlan)									
'									Environment.Value("blnFatalError") = True  'commented below two line for handling caution pop up whiich is not error pop up
'									Error_Listener = True
							Else
									Error_Listener = False
							End If
			
End Function


Function Error_Recovery (sAction)

		Select Case sAction
						Case  "CloseAllForms" 
							If blnRecoveredFromError =False Then
										'Call UpdateResultHtml(stepNumber,"",strLastActualResult &"<br>Error Found at this Step"& Environment.Value("strFatalMessage"),"FAIL","")
										Call CloseAllFormWindows()
										Environment.Value("blnFatalError") = True
										Error_Recovery = True
										blnRecoveredFromError = True
							End If
						  Case  "CONTINUE"                                                        ' Added  this case condition  to continue next line with out error otherwise it was throwing msgbox "None"
								    Environment.Value("blnFatalError") = False  
								    Error_Recovery = False	         
						Case Else
									'msgbox "None"
		End Select
		
		If 	Err.Number <>0  Then
			Err.clear
		End If
End Function




Function CloseAllFormWindows()
		Dim iStopCounter : iStopCounter =1
		Dim FormObject
		On error Resume Next
		Set ObjOracleApp = Description.Create()
		ObjOracleApp("micclass").value  = "OracleFormWindow"
		Set ObjForm = Desktop.ChildObjects(ObjOracleApp)
		iCnt = ObjForm.Count
			
		 Do
								iCnt = iCnt -1 
'								Msgbox iCnt &"  "  & ObjForm(iCnt).GetROProperty("title")
'
'								ObjForm(iCnt).CloseWindow 
								If OracleListOfValues("title:=.*").Exist(gObjectTimeoutLimit)  Then
												OracleListOfValues("title:=.*").Cancel
								End if 
								If OracleFlexWindow("title:=.*").Exist(gObjectTimeoutLimit)  Then
												CloseAllFlexWindows
								End if 

								Call CommitChildButtonObjects (ObjForm(iCnt))

'								If  ObjForm(iCnt).OracleButton("label:=Clear").Exist(gObjectTimeoutLimit) Then
'																	ObjForm(iCnt).OracleButton("label:=Clear").Click
'								Elseif  ObjForm(iCnt).OracleButton("label:=Cancel").Exist(gObjectTimeoutLimit) Then
'																	ObjForm(iCnt).OracleButton("label:=Cancel").Click
'								End If


								
  							
								If OracleFormWindow("short title:=" & strErrorFormName).Exist(1) Then
											OracleFormWindow("short title:=" & strErrorFormName).SelectMenu "File->Close Form"
							
											If OracleNotification("title:=Error").Exist(gObjectTimeoutLimit) Then
													CloseAllErrorBoxes
											End if 
								End If
								formTitle=ObjForm(iCnt).GetROProperty("short title")
								If OracleFormWindow("short title:="&formTitle).Exist(1) Then
											OracleFormWindow("short title:="&formTitle).SelectMenu("File->Close Form")	
								End If
				
								If OracleNotification("title:=Forms").Exist(gObjectTimeoutLimit )Then
												strMessage = OracleNotification("title:=Forms").GetROProperty("message")
												Select Case strMessage 

												Case "Close this form?" 
																		OracleNotification("title:=Forms").OracleButton("label:=Yes").Click
												Case "Do you want to save the changes you have made?"
																		OracleNotification("title:=Forms").OracleButton("label:=No").Click		
												End Select
								End If
				

								If OracleNotification("title:=Error").Exist(gObjectTimeoutLimit) Then
												CloseAllErrorBoxes
								End if 
								
							
								Set ObjForm = Desktop.ChildObjects(ObjOracleApp)
								iCnt  = ObjForm.Count
								iStopCounter = iStopCounter  + 1

		 Loop While  iCnt >0 And iStopCounter < 5
		OracleNavigator("short title:=Navigator").SelectMenu("File->Exit Oracle Applications")
		Do While(OracleNotification("title:=.*").Exist(2))													
							 OracleNotification("title:=.*").Approve
		Loop

End Function

' Extra level of Error handling for obstinate forms 

Function CommitChildButtonObjects(ObjForm)
        
	Set ObjOracleApp = Description.Create()
	ObjOracleApp("micclass").value  = "OracleFormWindow"
	Set Obj = Desktop.ChildObjects(ObjOracleApp)
   	'Msgbox Obj.Count
	
	For i= 0 to Obj.Count-1 step 1
			'Msgbox Obj(i).GetROProperty("title")
			'Obj(i).InvokeSoftKey("EXIT")
			Set ObjOracleApp = Description.Create()
			ObjOracleApp("micclass").value  = "OracleButton"
			'ObjOracleApp("micclass").value  = "OracleButton"
	
			Set objButton = Obj(i).ChildObjects(ObjOracleApp)
			'msgbox objButton.Count
	
			For j = 0 to objButton.Count-1 
					If Obj(i).GetROProperty("enabled") Then
						If  objButton(j).GetROProperty("label") = "Cancel"  Or  objButton(j).GetROProperty("label") = "Clear" Then
								objButton(j).Click
								Exit For 
						End If
					End If
			Next

            Set objButton = Nothing 
	Next
End Function


Function CloseAllErrorBoxes()
		 Dim iCnt ,iStopCounter 
		 iStopCounter = 1
		 On error Resume Next
	     Set ObjOracleApp = Description.Create()
		 ObjOracleApp("micclass").value  = "OracleNotification"
		 ObjOracleApp("title").value  = "Error"

		 Set ObjError= Desktop.ChildObjects(ObjOracleApp)	
     
		 iCnt = ObjError.Count
		 Do
					iCnt = iCnt -1 
					'Msgbox ObjError(i).GetROProperty("title")
					ObjError(i).Approve
			
					Set ObjError= Desktop.ChildObjects(ObjOracleApp)
					iCnt  = ObjError.Count
					iStopCounter = iStopCounter  + 1

		 Loop While  iCnt >0 And iStopCounter < 5
		 
		 

End Function


Function CloseAllFlexWindows()
		Dim iStopCounter: iStopCounter =1
		 On error Resume Next
	     Set ObjOracleApp = Description.Create()
		 ObjOracleApp("micclass").value  = "OracleFlexWindow"

		 Set ObjFlex= Desktop.ChildObjects(ObjOracleApp)	

         'For i=ObjFlex.Count-1 to 0 step -1
		  Do
		  iCnt = iCnt -1 
					ObjFlex(i).Cancel
					If OracleNotification("title:=Forms").Exist(gObjectTimeoutLimit )Then
									strMessage = OracleNotification("title:=Forms").GetROProperty("message")
									If instr(strMessage ,"Do you want to save the changes you have made?") >0 Then
												OracleNotification("title:=Forms").OracleButton("label:=No").Click
												'CaptureScreenshot "OracleForm"
									End If
					End If

					If OracleListOfValues("title:=.*").Exist(gObjectTimeoutLimit)Then
								CaptureScreenshot "OracleListofValues"
								OracleListOfValues("title:=.*").Cancel
								
					End If
				
					'If 	ObjFlex(i).Exist(gObjectTimeoutLimit) Then
					'End If

					Set ObjFlex= Desktop.ChildObjects(ObjOracleApp)	
					iCnt  = ObjFlex.Count
                    iStopCounter = iStopCounter  + 1
		Loop While iCnt >0 And iStopCounter < 5
		'Next		 

End Function


'***************************************************************************************************************************************


Function CloseWindow(objForm)

   If Not Environment.Value("blnFatalError") Then
		Set ObjOracleApp = Description.Create()
		ObjOracleApp("micclass").value  = "OracleButton"
		'ObjOracleApp("micclass").value  = "OracleButton"

        Set objButton = OracleFormWindow.ChildObjects(ObjOracleApp)
		'msgbox objButton.Count

		For j = 0 to objButton.Count-1 
				If  objButton(j).GetROProperty("label") = "Cancel"   Then
						objButton(j).Click
						Exit Function 
				End If
		Next

		objForm.CloseWindow
	End if 
End Function

'***********************************************************************************************************************************
Function SanitizeStringFromSpecialCharacters(strString)
   Dim strTemp 
	strTemp = RemoveSpacesInString(strString)
    strTemp = Replace(strTemp,"!","")
	strTemp = Replace(strTemp,"@","")
	strTemp = Replace(strTemp,"#","")
	strTemp = Replace(strTemp,"$","")
	strTemp = Replace(strTemp,"%","")
	strTemp = Replace(strTemp,"^","")
	strTemp = Replace(strTemp,"&","")
	strTemp = Replace(strTemp,"*","")
	strTemp = Replace(strTemp,"(","")
	strTemp = Replace(strTemp,")","")
	strTemp = Replace(strTemp,"/","")
	strTemp = Replace(strTemp,"?","")
	strTemp = Replace(strTemp,":","")
	strTemp = Replace(strTemp,";","")
	strTemp = Replace(strTemp,"'","")
	strTemp = Replace(strTemp,"|","")
	strTemp = Replace(strTemp,"\","")
    strTemp = Replace(strTemp,"{","")
	strTemp = Replace(strTemp,"}","")
	strTemp = Replace(strTemp,"<","")
	strTemp = Replace(strTemp,">","")
	strTemp = Replace(strTemp,",","")
	strTemp = Replace(strTemp,"-","_")
	strTemp = Replace(strTemp,"+","")
	strTemp = Replace(strTemp,"=","_")
	strTemp = Replace(strTemp,".","")
	SanitizeStringFromSpecialCharacters = strTemp
End Function



''***********************************************************************************
'Name of the Function  : CreateSummaryReport
'Author		    					: Prashant Sharma
'Date			    				:   13 May 2013
'Description	     :  Create the Summary HTML report
'Input Parameters	     :  None
'Output Parameters     :  None
'***********************************************************************************


Function CreateSummaryReport()

	giTotalTCCount= 0
	giTotalPassCount=0
	giTotalFailCount=0

   For i=0 to Ubound(aTestCaseDetailsForSummary)-1
	   If  Not  IsEmpty(aTestCaseDetailsForSummary(i,0) ) Then
			giTotalTCCount = giTotalTCCount  +1 
			If  UCASE(aTestCaseDetailsForSummary(i,2)) ="PASS"  Then
					giTotalPassCount = giTotalPassCount  +1 
			ElseIf UCASE(aTestCaseDetailsForSummary(i,2)) ="FAIL"  Then
					giTotalFailCount = giTotalFailCount +1
		  End If
	End If
	
   Next
   If Ucase(gstrSummaryGraphType) = "BAR" Then
				CreateSummaryReport_Bar
		Else
				CreateSummaryReport_Pie
   End If
   
End Function



Function CreateSummaryReport_Pie ()
	
	iStartPoint_Pie = 5850000
	iMagicNumber_Pie = 23592960
	iSumofValues_Pie = giTotalPassCount  +giTotalFailCount 


	Dim iBarCeiling 
	iBarCeiling = giTotalTCCount + 1
 
	If giTotalTCCount <=10 then
		iMultiplier = 15
	elseif giTotalTCCount<=50 Then
		iMultiplier = 5
	elseif giTotalTCCount <=100 then
		iMultiplier = 2
	elseif giTotalTCCount >100 then
		iMultiplier = 0.5
	elseif giTotalTCCount=0 then
		giTotalTCCount=1 
	End if 
	
	If giTotalTCCount <>0 then
		iFailurePercent = FormatPercent( giTotalFailCount/giTotalTCCount,1)
	else
		iFailurePercent = "0%"
	End if 
		
	

	Set strHtmlSummaryFile = fso.CreateTextFile(gstrScenarioResultFolder &"\"& gstrSummaryTitle &".html" , True)
	strHtmlSummaryFile.writeline("<xml:namespace prefix=""v""/><object id=""VMLRender"" classid=""CLSID:10072CEC-8CC1-11D1-986E-00A0C955B42E"" width=""0"" height=""0""></object>")
	strHtmlSummaryFile.writeline("<!DOCTYPE html>")
'	strHtmlSummaryFile.writeline("<html><head><title>"& gstrSummaryTitle& "</title><style>")
    strHtmlSummaryFile.writeline("<html><head><meta http-equiv=""X-UA-Compatible"" content=""IE=5"" /><title>"& gstrSummaryTitle& "</title><style>")

	strHtmlSummaryFile.writeline("v\:*{behavior=url(#VMLRender)}")
	strHtmlSummaryFile.writeline("p {color: Blue;	font-size: 10pt;font-weight: Bold;font-family: Franklin Gothic Medium;text-align: center;}")
	strHtmlSummaryFile.writeline("hr{background-color: #eee; border: 0 none;color: blue; height: 1px;}")

	strHtmlSummaryFile.writeline(".BarNo{color:Purple;font-size: 12pt;font-family: Franklin Gothic Medium;}")
	strHtmlSummaryFile.writeline(".PieLabel {color:""#333333"";font-size: 10pt;font-family: Franklin Gothic Medium;text-align: center;}")
	strHtmlSummaryFile.writeline(".PieHeader{color:""#808080"";font-size: 10pt;font-family: Franklin Gothic Medium;text-align: center;}")
	strHtmlSummaryFile.writeline(".Pass{color: Green;font-size: 11pt;}")
	strHtmlSummaryFile.writeline(".Fail{color: Red;font-size: 11pt;} ")

	strHtmlSummaryFile.writeline("td.eSwiftTitle { font-family: "& Q("Franklin Gothic Medium")&" ; color: #808080 ; font-size: 10pt;border-color:green;}")
	strHtmlSummaryFile.writeline("td.CompanyTitle {font-family: "& Q("Franklin Gothic Medium")&" ; font-style: bold; color: #0066CC ; font-size: 15pt; background-color: #FFFFCC;} ")
	strHtmlSummaryFile.writeline("td.Pass    {font-family: "& Q("Franklin Gothic Medium")&" ; color: Green; font-size: 12pt } ")
	strHtmlSummaryFile.writeline("td.Fail    {font-family:"& Q("Franklin Gothic Medium")&" ; color: Red; font-size: 12pt } ")
	strHtmlSummaryFile.writeline("td.Total   {font-family: "& Q("Franklin Gothic Medium")&" ; color: Maroon; font-size: 12pt } ")
	strHtmlSummaryFile.writeline("td.succ    {font-family:"& Q("Franklin Gothic Medium")&" ; color: Purple; font-size: 12pt } ")
	strHtmlSummaryFile.writeline("td.TotalNo {font-family:"& Q("Franklin Gothic Medium")&" ; color: Maroon; font-size: 30pt} ")
	strHtmlSummaryFile.writeline("td.PassNo  {font-family:"& Q("Franklin Gothic Medium")&" ; color: Green; font-size: 30pt ;}  ")
	strHtmlSummaryFile.writeline("td.FailNo  {font-family:"& Q("Franklin Gothic Medium")&" ; color: Red; font-size: 30pt } ")
	strHtmlSummaryFile.writeline("td.succRate{font-family: "& Q("Franklin Gothic Medium")&" ; color: Purple; font-size: 30pt } ")
	strHtmlSummaryFile.writeline("tr.TRcolor1{font-family: "& Q("Franklin Gothic Medium")&" ;background-color:silver;color: black ;font-size: 11pt } ")
	strHtmlSummaryFile.writeline("tr.TRcolor2{font-family: "& Q("Franklin Gothic Medium")&" ;background-color:#FFFFDD;color: black ;font-size: 11pt } ")
	strHtmlSummaryFile.writeline("td.Graph{border:1px solid green ;align=left;padding:.05px; background: white repeat;} ")

	strHtmlSummaryFile.writeline("</style></head>")

	strHtmlSummaryFile.writeline("<body> ")
	strHtmlSummaryFile.writeline("<table>")
	strHtmlSummaryFile.writeline("<tr align ="& Q("left")&">")
	'strHtmlSummaryFile.writeline("<td width = 100% ><Img  src='ScreenShots\"& gstrLogoFileName   & " '   alt ="& Q(gsrtLogoAltText) &" width=" & Q(150)&" height="& Q(75) &" ></td>")
    strHtmlSummaryFile.writeline("<td> </td>")
	strHtmlSummaryFile.writeline("</tr>")

	strHtmlSummaryFile.writeline("</table>")
	strHtmlSummaryFile.writeline("<table>")
	strHtmlSummaryFile.writeline("<tr>")
	strHtmlSummaryFile.writeline("<td >")
	strHtmlSummaryFile.writeline("</td>")

	strHtmlSummaryFile.writeline("<td width =100% class= "& Q("eSwiftTitle") &" align ="& Q("right") &" > "& gstrSummaryTitle  &"<br> Generated On : "& Now()&" </td></td>")
	strHtmlSummaryFile.writeline("</tr>")
	strHtmlSummaryFile.writeline("</table>")
	strHtmlSummaryFile.writeline("<hr style=""border: 1px solid silver;"">")

	strHtmlSummaryFile.writeline("<table width = 100% border="& Q(2)&" BORDERCOLOR="& Q("#0066CC") &" cellpadding="& Q(0) &" > ")
	strHtmlSummaryFile.writeline("<tr>")
	strHtmlSummaryFile.writeline("<td class= "& Q("CompanyTitle") &" align="& Q("center") & " > "& gstrTestingType & " </td> ")
	strHtmlSummaryFile.writeline("</tr>")
	strHtmlSummaryFile.writeline("</table>")

	strHtmlSummaryFile.writeline("<hr style= "& Q("border: 1px solid silver;") &">")
	strHtmlSummaryFile.writeline("<br>")

	strHtmlSummaryFile.writeline("<table width = 100% class="& Q("Stat") &  " > ")
	strHtmlSummaryFile.writeline("<tr> ")
	strHtmlSummaryFile.writeline("<td width=60%> ")
	strHtmlSummaryFile.writeline("<table  border= "& Q(0) &" cellpadding= " & Q(0) & " >")
	strHtmlSummaryFile.writeline("<tr align="& Q("center") &">")
	strHtmlSummaryFile.writeline(" <td width = 12% class="& Q("TotalNo") &" align=" &Q("center")&"> "& giTotalTCCount &"</td>")
	strHtmlSummaryFile.writeline(" <td width = 12% class="& Q("PassNo")& " align="& Q("center")&" style=""border-left: 1px solid #3366FF;></td>")
	strHtmlSummaryFile.writeline(" <td width = 12% class="& Q("PassNo")& " align= "& Q("center")& ">" & giTotalPassCount &" </td>")
	strHtmlSummaryFile.writeline(" <td width = 12% class="& Q("FailNo")& " align=" & Q("center")& " style= "" border-left: 1px solid #3366FF;></td>")
	strHtmlSummaryFile.writeline(" <td width = 12% class="& Q("FailNo")& " align="&Q("center") &" > " & giTotalFailCount &" </td>")
	strHtmlSummaryFile.writeline(" <td width = 12% class="& Q("succRate")&" align="&Q("center")&" style= "" border-left: 1px solid #3366FF;></td>")
	strHtmlSummaryFile.writeline(" <td width = 20% class="& Q("succRate")&" align="&Q("center")& " align="& Q("center")&">"& iFailurePercent & " </td>") 
	strHtmlSummaryFile.writeline(" <td width = 5%  class="& Q("succRate")&" align="&Q("center")& " style= ""border-left:1px solid #3366FF;></td>")
	strHtmlSummaryFile.writeline(" </tr>")
	strHtmlSummaryFile.writeline(" <br>")

	strHtmlSummaryFile.writeline("<table width = 50% border= "& Q(0) & " cellpadding= "& Q(0) & ">")
	strHtmlSummaryFile.writeline("<tr align="& Q("center")& " >") 
	strHtmlSummaryFile.writeline(" <td class= "& Q("Total") &" valign=" & Q("Top" ) & " align =" & Q("center" ) & " >Total TestCases</td>")
	strHtmlSummaryFile.writeline(" <td class= "& Q("Pass") &" valign=" & Q("Top" ) & " align =" & Q("center" ) & " >Passed </td> ")
	strHtmlSummaryFile.writeline(" <td class= "& Q("Fail") &" valign=" & Q("Top" ) & " align =" & Q("center" ) & " >Failed </td>")
	strHtmlSummaryFile.writeline(" <td class= "& Q("succ") &" valign=" & Q("Top" ) & " align =" & Q("center" ) & "> Failure Rate </td>")
	strHtmlSummaryFile.writeline(" </tr>")
	strHtmlSummaryFile.writeline(" </table>")
	strHtmlSummaryFile.writeline(" </td>")

	strHtmlSummaryFile.writeline("<td  class=" & Q("Graph") & " width = 20%> ")
	strHtmlSummaryFile.writeline("<table>")
	strHtmlSummaryFile.writeline("<tr>")
	strHtmlSummaryFile.writeline("<td>")
	strHtmlSummaryFile.writeline("<table>")
	strHtmlSummaryFile.writeline("<tr><td align=""center""><SPAN class=""PieHeader""><u> Pie Chart </td> </tr>")
	strHtmlSummaryFile.writeline("<tr>")
	strHtmlSummaryFile.writeline("<td>")
	strHtmlSummaryFile.writeline("<div style=""margin-top=5pt"" align = ""center"">")
	strHtmlSummaryFile.writeline("<v:group style=""height=188pt; width=250pt"" coordsize=""4320,3240"">")
	strHtmlSummaryFile.writeline("<v:shape style='position:relative; width:4320; height:3240' fillcolor=#C0C0C0 path=""M 790 760 AE 790 760 707 707 " & iStartPoint_Pie &" "& iMagicNumber_Pie & " X E"">")
	strHtmlSummaryFile.writeline("<v:stroke on=""False""/>")
	strHtmlSummaryFile.writeline("</v:shape>")



	For iCnt=0 to 1 
		If iCnt=0 then 
			iPieValue= giTotalPassCount
			sFillColor = "#008000"
		Else 	
			iPieValue= giTotalFailCount 
			sFillColor = "#FF0000"
		End if 
		If iSumofValues_Pie=0 Then
			iSumofValues_Pie =1
		End If
		iPercentage = FormatNumber(iPieValue/iSumofValues_Pie, 3)
		iEndPoint_Pie = iMagicNumber_Pie * iPercentage 
		iEndPoint_Pie = FormatNumber(iEndPoint_Pie, 0)
		iEndPoint_Pie = Fix(iEndPoint_Pie)
		strHtmlSummaryFile.writeline("<v:shape style='width:4320; height:3240' strokeweight=0.5pt fillcolor= "& sFillColor & " path=""M 750 720 AE 750 720 707 707 "& iStartPoint_Pie &" "& iEndPoint_Pie & " X E""/>")
		iStartPoint_Pie = iStartPoint_Pie + iEndPoint_Pie
	next 
	strHtmlSummaryFile.writeline("</v:group></div>")
	strHtmlSummaryFile.writeline("</td>")

	strHtmlSummaryFile.writeline("<td width = 20%>")
	strHtmlSummaryFile.writeline("<table align =""right"">")
	strHtmlSummaryFile.writeline("<tr>")
	strHtmlSummaryFile.writeline("<td><img  border=1 width='5' height='5' style='background:Green;'/></td>")
	strHtmlSummaryFile.writeline("<td ><SPAN class=""PieLabel"">Pass :</td>")
	strHtmlSummaryFile.writeline("<td align=""left""><SPAN class=""BarNo"">"& giTotalPassCount & " </td>")


	strHtmlSummaryFile.writeline("</tr>")
	strHtmlSummaryFile.writeline("<tr>")
	strHtmlSummaryFile.writeline("<td><img border=1 width='5' height='5' style='background:Red;'/></td>")
	strHtmlSummaryFile.writeline("<td width=""90""><SPAN class=""PieLabel"">Fail :</td>")
	strHtmlSummaryFile.writeline("<td align=""left""><SPAN class=""BarNo""> "& giTotalFailCount &" </td>")
	strHtmlSummaryFile.writeline(" </tr>")
	strHtmlSummaryFile.writeline(" <tr>")
      strHtmlSummaryFile.writeline("<td align=""left"" colspan=3 ><SPAN class=""BarNo""> <hr> </td>")
	strHtmlSummaryFile.writeline(" </tr>")
	strHtmlSummaryFile.writeline("<tr>") 
	strHtmlSummaryFile.writeline("<td><img border=0 width='5' height='1' style='background:white;'/></td>") 
	strHtmlSummaryFile.writeline("<td ><SPAN class=""PieLabel""> Total :</td>")
	strHtmlSummaryFile.writeline("<td align=""left""><SPAN class=""BarNo"">"& giTotalTCCount & " </td>")

	
	strHtmlSummaryFile.writeline(" </tr>")
	strHtmlSummaryFile.writeline(" </table>")
	strHtmlSummaryFile.writeline("</td> ")
	strHtmlSummaryFile.writeline("<tr></tr>")
	strHtmlSummaryFile.writeline(" </tr>")
	strHtmlSummaryFile.writeline(" </table>")
	strHtmlSummaryFile.writeline("</td>") 
	strHtmlSummaryFile.writeline(" </tr>")
	strHtmlSummaryFile.writeline(" </table>")
	strHtmlSummaryFile.writeline(" </td>")
	strHtmlSummaryFile.writeline(" </tr>")
	strHtmlSummaryFile.writeline(" </table>")
	strHtmlSummaryFile.writeline(" <br>")


	strHtmlSummaryFile.writeline(" <hr style="& Q("border: 2px  outset  #99CCFF;") &"> ")
	strHtmlSummaryFile.writeline(" <br>")
	strHtmlSummaryFile.writeline(" <table width = 100% style="& Q("background-color:Olive;") &"font-family="& Q("Franklin Gothic Medium;")&">")
	strHtmlSummaryFile.writeline("<tr align="& Q("center") & " style=" & Q("background-color:#0066CC;color:white; font-family:Franklin Gothic Medium; font-size:12pt") &" > ")
	strHtmlSummaryFile.writeline("<th>Serial #</th>")
	strHtmlSummaryFile.writeline("<th>TestCase Name</th>")
	strHtmlSummaryFile.writeline("<th>Iteration #</th>")
	strHtmlSummaryFile.writeline("<th>Status</th>")
	strHtmlSummaryFile.writeline("<th>Time</th>")
	strHtmlSummaryFile.writeline("</tr>")

	'********** Table Content for all Test cases **************
	For iCnt=0 To Ubound(aTestCaseDetailsForSummary)
	if NOT( isempty(aTestCaseDetailsForSummary(iCnt,0)) and isempty(aTestCaseDetailsForSummary(iCnt,1))and isempty(aTestCaseDetailsForSummary(iCnt,2)) ) Then
		If (iCnt mod 2)= 0 Then 
			strHtmlSummaryFile.writeline("<tr class="& Q("TRcolor1") &" align = "& Q("center")&">")
		else
			strHtmlSummaryFile.writeline("<tr class="& Q("TRcolor2") &" align = "& Q("center")&">")
		End if 
		If ucase(aTestCaseDetailsForSummary(iCnt,2))="PASS" Then
			strHTMLClass= "Pass"
		else
			strHTMLClass= "Fail"
		end if 
		strHtmlSummaryFile.writeline("<td>"& iCnt+1 & "</td>")
		strHtmlSummaryFile.writeline("<td><a href="& Q(gstrDetailedHTMLFileName )& " target="& Q("_blank")&">" & aTestCaseDetailsForSummary(iCnt,0)&"</td>")	
		strHtmlSummaryFile.writeline("<td><a href="& Q(gstrDetailedHTMLFileName )& " target="& Q("_blank") &"><SPAN class="& Q(strHTMLClass)&">"& aTestCaseDetailsForSummary(iCnt,1) &" </td>")
		strHtmlSummaryFile.writeline("<td><a href="& Q(gstrDetailedHTMLFileName)& " target="& Q("_blank")&"><SPAN class="& Q(strHTMLClass)&">"& aTestCaseDetailsForSummary(iCnt,2) & "</td>")
		strHtmlSummaryFile.writeline("<td>"& aTestCaseDetailsForSummary(iCnt,3)   &" (secs) </td>")
		strHtmlSummaryFile.writeline("</tr>")
	End if 
	Next 



	'****************************************************************


	strHtmlSummaryFile.writeline("</table>")
	strHtmlSummaryFile.writeline("<table padding =100px height = 20>")
	strHtmlSummaryFile.writeline("</table>")
	strHtmlSummaryFile.writeline("<hr style="& Q("border: 2px  outset  #99CCFF;" ) &"> ")
	strHtmlSummaryFile.writeline("<br> ")
	strHtmlSummaryFile.writeline("</body>")
	strHtmlSummaryFile.writeline("</html>")


End Function

Function Q(string)
	Q= chr(34) & string & chr(34) 
End Function







Function CreateSummaryReport_Bar()
	Dim iBarCeiling :	iBarCeiling = giTotalTCCount + 1
 
	If giTotalTCCount <=10 then
		iMultiplier = 15
	elseif giTotalTCCount<=50 Then
		iMultiplier = 5
	elseif giTotalTCCount <=100 then
		iMultiplier = 2
	elseif giTotalTCCount >100 then
		iMultiplier = 0.5
	elseif giTotalTCCount=0 then
		giTotalTCCount=1 
	End if 
	
	If giTotalTCCount <>0 then
		iFailurePercent = FormatPercent(giTotalFailCount/giTotalTCCount,1)

	else
		iFailurePercent = "0%"
	End if 
		
	

	Set strHtmlSummaryFile = fso.CreateTextFile(gstrScenarioResultFolder &"\"& gstrSummaryTitle &".html" , True)
	strHtmlSummaryFile.writeline("<!DOCTYPE html>")
	strHtmlSummaryFile.writeline("<html><head><title>"& gstrSummaryTitle  & "</title><style>")

	strHtmlSummaryFile.writeline("p {color: Blue;	font-size: 10pt;font-weight: Bold;font-family: Franklin Gothic Medium;text-align: center;}")
	strHtmlSummaryFile.writeline("hr{background-color: #eee; border: 0 none;color: blue; height: 1px;}")
	strHtmlSummaryFile.writeline(".BarNo{color:Purple;font-size: 12pt;font-family: Franklin Gothic Medium;}")
	strHtmlSummaryFile.writeline(".Pass{color: Green;font-size: 11pt;}")
	strHtmlSummaryFile.writeline(".Fail{color: Red;font-size: 11pt;} ")

	strHtmlSummaryFile.writeline("td.eSwiftTitle { font-family: "& Q("Franklin Gothic Medium")&" ; color: #808080 ; font-size: 10pt;border-color:green;}")
	strHtmlSummaryFile.writeline("td.CompanyTitle {font-family: "& Q("Franklin Gothic Medium")&" ; font-style: bold; color: #0066CC ; font-size: 15pt; background-color: #FFFFCC;} ")
	strHtmlSummaryFile.writeline("td.Pass    {font-family: "& Q("Franklin Gothic Medium")&" ; color: Green; font-size: 12pt } ")
	strHtmlSummaryFile.writeline("td.Fail    {font-family:"& Q("Franklin Gothic Medium")&" ; color: Red; font-size: 12pt } ")
	strHtmlSummaryFile.writeline("td.Total   {font-family: "& Q("Franklin Gothic Medium")&" ; color: Maroon; font-size: 12pt } ")
	strHtmlSummaryFile.writeline("td.succ    {font-family:"& Q("Franklin Gothic Medium")&" ; color: Purple; font-size: 12pt } ")
	strHtmlSummaryFile.writeline("td.TotalNo {font-family:"& Q("Franklin Gothic Medium")&" ; color: Maroon; font-size: 30pt} ")
	strHtmlSummaryFile.writeline("td.PassNo  {font-family:"& Q("Franklin Gothic Medium")&" ; color: Green; font-size: 30pt ;}  ")
	strHtmlSummaryFile.writeline("td.FailNo  {font-family:"& Q("Franklin Gothic Medium")&" ; color: Red; font-size: 30pt } ")
	strHtmlSummaryFile.writeline("td.succRate{font-family: "& Q("Franklin Gothic Medium")&" ; color: Purple; font-size: 30pt } ")
	strHtmlSummaryFile.writeline("tr.TRcolor1{font-family: "& Q("Franklin Gothic Medium")&" ;background-color:silver;color: black ;font-size: 11pt } ")
	strHtmlSummaryFile.writeline("tr.TRcolor2{font-family: "& Q("Franklin Gothic Medium")&" ;background-color:#FFFFDD;color: black ;font-size: 11pt } ")
	strHtmlSummaryFile.writeline("td.Graph{border:1px solid green ;align=left;padding:.05px; background: white repeat;} ")
	strHtmlSummaryFile.writeline("</style></head>")

	strHtmlSummaryFile.writeline("<body> ")
	strHtmlSummaryFile.writeline("<table>")
	strHtmlSummaryFile.writeline("<tr align ="& Q("left")&">")
	'strHtmlSummaryFile.writeline("<td width = 100% ><Img  src='ScreenShots\"& gstrLogoFileName   & " '   alt ="& Q(gsrtLogoAltText) &" width=" & Q(150)&" height="& Q(75) &" ></td>")
	strHtmlSummaryFile.writeline("<td> </td>")
	strHtmlSummaryFile.writeline("</tr>")

	strHtmlSummaryFile.writeline("</table>")
	strHtmlSummaryFile.writeline("<table>")
	strHtmlSummaryFile.writeline("<tr>")
	strHtmlSummaryFile.writeline("<td >")
	strHtmlSummaryFile.writeline("</td>")

	strHtmlSummaryFile.writeline("<td width =100% class= "& Q("eSwiftTitle") &" align ="& Q("right") &" > "& gstrSummaryTitle  &"<br> Generated On : "& Now()&" </td></td>")
	strHtmlSummaryFile.writeline("</tr>")
	strHtmlSummaryFile.writeline("</table>")
	strHtmlSummaryFile.writeline("<hr>")

	strHtmlSummaryFile.writeline("<table width = 100% border="& Q(2)&" BORDERCOLOR="& Q("#0066CC") &" cellpadding="& Q(0) &" > ")
	strHtmlSummaryFile.writeline("<tr>")
	strHtmlSummaryFile.writeline("<td class= "& Q("CompanyTitle") &" align="& Q("center") & " > "& gstrTestingType & " </td> ")
	strHtmlSummaryFile.writeline("</tr>")
	strHtmlSummaryFile.writeline("</table>")

	strHtmlSummaryFile.writeline("<hr style= "& Q("border: 1px dotted silver;") &">")
	strHtmlSummaryFile.writeline("<br>")

	strHtmlSummaryFile.writeline("<table width = 100% class="& Q("Stat") &  " > ")
	strHtmlSummaryFile.writeline("<tr> ")
	strHtmlSummaryFile.writeline("<td width=60%> ")
	strHtmlSummaryFile.writeline("<table  border= "& Q(0) &" cellpadding= " & Q(0) & " >")
	strHtmlSummaryFile.writeline("<tr align="& Q("center") &">")
	strHtmlSummaryFile.writeline(" <td width = 12% class="& Q("TotalNo") &" align=" &Q("center")&"> "& giTotalTCCount &"</td>")
	strHtmlSummaryFile.writeline(" <td width = 12% class="& Q("PassNo")& " align="& Q("center")&" style=""border-left: 1px solid #3366FF;></td>")
	strHtmlSummaryFile.writeline(" <td width = 12% class="& Q("PassNo")& " align= "& Q("center")& ">" & giTotalPassCount &" </td>")
	strHtmlSummaryFile.writeline(" <td width = 12% class="& Q("FailNo")& " align=" & Q("center")& " style= "" border-left: 1px solid #3366FF;></td>")
	strHtmlSummaryFile.writeline(" <td width = 12% class="& Q("FailNo")& " align="&Q("center") &" > " & giTotalFailCount &" </td>")
	strHtmlSummaryFile.writeline(" <td width = 12% class="& Q("succRate")&" align="&Q("center")&" style= "" border-left: 1px solid #3366FF;></td>")
	strHtmlSummaryFile.writeline(" <td width = 20% class="& Q("succRate")&" align="&Q("center")& " align="& Q("center")&">"& iFailurePercent & " </td>") 
	strHtmlSummaryFile.writeline(" <td width = 5%  class="& Q("succRate")&" align="&Q("center")& " style= ""border-left:1px solid #3366FF;></td>")
	strHtmlSummaryFile.writeline(" </tr>")
	strHtmlSummaryFile.writeline(" <br>")

	strHtmlSummaryFile.writeline("<table width = 50% border= "& Q(0) & " cellpadding= "& Q(0) & ">")
	strHtmlSummaryFile.writeline("<tr align="& Q("center")& " >") 
	strHtmlSummaryFile.writeline(" <td class= "& Q("Total") &" valign=" & Q("Top" ) & " align =" & Q("center" ) & " >Total TestCases</td>")
	strHtmlSummaryFile.writeline(" <td class= "& Q("Pass") &" valign=" & Q("Top" ) & " align =" & Q("center" ) & " >Passed </td> ")
	strHtmlSummaryFile.writeline(" <td class= "& Q("Fail") &" valign=" & Q("Top" ) & " align =" & Q("center" ) & " >Failed </td>")
	strHtmlSummaryFile.writeline(" <td class= "& Q("succ") &" valign=" & Q("Top" ) & " align =" & Q("center" ) & ">Failure Rate </td>")
	strHtmlSummaryFile.writeline(" </tr>")
	strHtmlSummaryFile.writeline(" </table>")
	strHtmlSummaryFile.writeline(" </td>")

	strHtmlSummaryFile.writeline("<td  class=" & Q("Graph") & " width = 20%> ")
	strHtmlSummaryFile.writeline("<table class=" & Q("Graph") &">")
	strHtmlSummaryFile.writeline("<tbody width = 20%>")
	strHtmlSummaryFile.writeline("<tr>")

	strHtmlSummaryFile.writeline("<td width = 20%><br></td> ")
	strHtmlSummaryFile.writeline("<td align =" & Q("Center") &" valign = "& Q("top") &"><SPAN class="& Q("BarNo") & " > " & giTotalTCCount  &"</td>")
	strHtmlSummaryFile.writeline(" <td width = 20%><br></td>")
	strHtmlSummaryFile.writeline(" <td align = " & Q("Center") & " valign = "& Q("top")& " ><SPAN class="& Q("BarNo")& ">" & giTotalPassCount &"</td>")
	strHtmlSummaryFile.writeline(" <td width = 20%><br></td>")
	strHtmlSummaryFile.writeline(" <td align = " & Q("Center") & " valign = "& Q("top")& " ><SPAN class="& Q("BarNo")& ">" & giTotalFailCount &"</td>")
	strHtmlSummaryFile.writeline(" <td width = 20%><br><p></td>")
	strHtmlSummaryFile.writeline(" </tr>")

	strHtmlSummaryFile.writeline("<tr >")
	strHtmlSummaryFile.writeline("<td width=20%><br></td>")
	strHtmlSummaryFile.writeline("<td valign ="& Q("bottom") &" align = "& Q("Center") &" ><img  width =50  height=" & (giTotalTCCount mod iBarCeiling)*iMultiplier  & " src= "& Q("ScreenShots\Purple.gif")&"></td>")
	strHtmlSummaryFile.writeline("<td width = 20%><br></td>")
	strHtmlSummaryFile.writeline(" <td valign = "& Q("bottom")& " align ="& Q("Center")& " ><img width =50 height= "& (giTotalPassCount mod iBarCeiling)*iMultiplier  & " src='ScreenShots\Green.gif ' align="& Q("middle")&"> </td>")
	strHtmlSummaryFile.writeline(" <td width = 20%><br></td>")
	strHtmlSummaryFile.writeline("<td valign ="& Q("bottom") &" align = "& Q("Center") &" ><img  width = 50 height="& (giTotalFailCount mod iBarCeiling)*iMultiplier  &" src='ScreenShots\Red.gif' align="& Q("middle")&"></td>")

	strHtmlSummaryFile.writeline("<td width = 20%><br></td></tr>")
	strHtmlSummaryFile.writeline(" <tr valign = "& Q("bottom")&"  >")
	strHtmlSummaryFile.writeline(" <td width = 20%><br></td>")
	strHtmlSummaryFile.writeline("<td align ="& Q("left")& " valign = " & Q("top") &" ><p>Total TestCases</td> ")
	strHtmlSummaryFile.writeline(" <td width = 20%> <br></td>")
	strHtmlSummaryFile.writeline("<td align ="& Q("left")& " valign = "& Q("top") &" ><p> Passed  </td> ")
	strHtmlSummaryFile.writeline(" <td width = 20%> <br></td>")
	strHtmlSummaryFile.writeline("<td align ="& Q("left")& " valign = "& Q("top") &" ><p> Failed </td> ")
	strHtmlSummaryFile.writeline(" <td width = 20%><br><p></td>") 
	strHtmlSummaryFile.writeline(" </tr>")
	strHtmlSummaryFile.writeline(" </table>")
	strHtmlSummaryFile.writeline(" </td>")
	strHtmlSummaryFile.writeline(" </tr>")
	strHtmlSummaryFile.writeline(" </table>")
	strHtmlSummaryFile.writeline(" <br>")

	strHtmlSummaryFile.writeline(" <hr style="& Q("border: 2px  outset  #99CCFF;") &"> ")
	strHtmlSummaryFile.writeline(" <br>")
	strHtmlSummaryFile.writeline(" <table width = 100% style=="& Q("background-color:Olive;") &"font-family="& Q("Franklin Gothic Medium;")&">")
	strHtmlSummaryFile.writeline("<tr align="& Q("center") & " style=" & Q("background-color:#0066CC;color:white; font-family:Franklin Gothic Medium; font-size:12pt") &" > ")
	strHtmlSummaryFile.writeline("<th>Serial #</th>")
	strHtmlSummaryFile.writeline("<th>TestCase Name</th>")
	strHtmlSummaryFile.writeline("<th>Iteration #</th>")
	strHtmlSummaryFile.writeline("<th>Status</th>")
	strHtmlSummaryFile.writeline("<th>Time</th>")
	strHtmlSummaryFile.writeline("</tr>")

	'********** Table Content for all Test cases **************
	For iCnt=0 To Ubound(aTestCaseDetailsForSummary)
	if NOT( isempty(aTestCaseDetailsForSummary(iCnt,0)) and isempty(aTestCaseDetailsForSummary(iCnt,1))and isempty(aTestCaseDetailsForSummary(iCnt,2)) ) Then
		If (iCnt mod 2)= 0 Then 
			strHtmlSummaryFile.writeline("<tr class="& Q("TRcolor1") &" align = "& Q("center")&">")
		else
			strHtmlSummaryFile.writeline("<tr class="& Q("TRcolor2") &" align = "& Q("center")&">")
		End if 
		If ucase(aTestCaseDetailsForSummary(iCnt,2))="PASS" Then
			strHTMLClass= "Pass"
		else
			strHTMLClass= "Fail"
		end if 
		strHtmlSummaryFile.writeline("<td>"& iCnt+1 & "</td>")
		strHtmlSummaryFile.writeline("<td><a href="& Q(gstrDetailedHTMLFileName)& " target="& Q("_blank")&">" & aTestCaseDetailsForSummary(iCnt,0)&"</td>")	
		strHtmlSummaryFile.writeline("<td><a href="& Q(gstrDetailedHTMLFileName )& " target="& Q("_blank") &"><SPAN class="& Q(strHTMLClass)&">"& aTestCaseDetailsForSummary(iCnt,1) &" </td>")
		strHtmlSummaryFile.writeline("<td><a href="& Q(gstrDetailedHTMLFileName)& " target="& Q("_blank")&"><SPAN class="& Q(strHTMLClass)&">"& aTestCaseDetailsForSummary(iCnt,2) & "</td>")
		strHtmlSummaryFile.writeline("<td>"& aTestCaseDetailsForSummary(iCnt,3)   &" (secs) </td>")
		strHtmlSummaryFile.writeline("</tr>")
	End if 
	Next 



	'****************************************************************


	strHtmlSummaryFile.writeline("</table>")
	strHtmlSummaryFile.writeline("<table padding =100px height = 20>")
	strHtmlSummaryFile.writeline("</table>")
	strHtmlSummaryFile.writeline("<hr style="& Q("border: 2px  outset  #99CCFF;" ) &"> ")
	strHtmlSummaryFile.writeline("<br> ")
	strHtmlSummaryFile.writeline("</body>")
	strHtmlSummaryFile.writeline("</html>")


End Function



Function ConvertArrayToString(arrSourceArray)
Dim strTempString
On error Resume Next
strTempString  = ""
If isArray(arrSourceArray) Then
For  i=Ubound(arrSourceArray) to 0   Step -1
strTempString = cstr(arrSourceArray(i)) & " " & strTempString  
Next 
End If
ConvertArrayToString = cstr(strTempString)
End Function



