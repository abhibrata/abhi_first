

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'	IP Name: e-Swift Framework									
'	Copyright © 2011 TCSL. All Rights Reserved       
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'	Framework Owner: TCS ASU-ERP & Niche Testing COE			   
'	Summary: 	e-Swift framework is an intellectual Property of TCSL Which works as	an accelerator for Automation Testing of ERP Solutions.	No part of this work 
'	may be reproduced, stored in a retrieval system,adapted or transmitted 		in any form or by any means electronic,	mechanical,photographic, 
'	optic recording or otherwise without the prior written permission of TCSL. 			       	    
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Public Function GetCreationTime()
   On Error Resume Next
   Set oDesc = Description.Create() 
   oDesc("micclass").Value = "Browser" 
   Set Browsers =Desktop.ChildObjects (oDesc)
   NumberofBrowsers = Browsers.Count() 
   GetCreationTime=NumberofBrowsers-1
   Err.Clear
End Function

'***********************************************************************************'***********************************************************************************
'Name of the Function  -> GetErrorPopUpMessageOnWeb_HCM
'Author		   						  ->TCS
'Dat		     						->25 feb 2015
'Description  	   				->  Verify Error Pop Message in a HCM Fusion Webpage
'Input Parameters	     ->  WebTableClassName = ClassName of WebTable
'Output Parameters     ->  strErrorMessage = By refrence Message , if any found, will be returned
'***********************************************************************************'***********************************************************************************


Function GetErrorPopUpMessageOnWeb_HCM(WebTableClassName,ByRef strErrorMessage)
    If Not Environment.Value("blnFatalError") Then
					Dim iCreationTime
					iCreationTime=CInt(GetCreationTime) 
					BrowserName=Browser("CreationTime:="& iCreationTime).GetROProperty("name")
					stepName="Verify a Error pop window on a Webpage"
					inputParameter="<b>Browsername:</b>"& formShortTitle &"<br><b>WebTable: </b>"&  tabbedRegionLableName
					strStepDescription= stepName
					
					If Browser("name:=" & BrowserName).Page("title:=" & BrowserName).WebTable("class:="&WebTableClassName, "index:=0").exist(1) Then
										Set objWebTable=  Browser("name:=" & BrowserName).Page("title:=" & BrowserName).WebTable("class:="& WebTableClassName, "index:=0")
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
															ImagePath=CaptureScreenshot(objError,strStepDescription)
                                    	End if 
										 strActualMessage = Browser("name:=" & BrowserName).Page("title:=" & BrowserName).WebTable("class:="& WebTableClassName,"index:=0").getROProperty("innertext")
                                         status="PASS"
										 blnCaptureFlag = True
										 strErrorMessage= strActualMessage 
										 

					Else
										 status="FAIL"
										 Flag=1
										 message="Error Pop Up Not Found on WebPage [" & BrowserName  & " ]" 
					End If
			
					If Flag =1  Then
										 GetErrorPopUpMessageOnWeb_HCM = message
										 blnMainFailFlag = True
										 ImagePath=CaptureScreenshot(objError,message)
					Else
										 GetErrorPopUpMessageOnWeb_HCM = True
					End If
					If blnDefault_eSwiftReporting Then  
										 Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
End if
End Function 


'***********************************************************************************'***********************************************************************************
'Name of the Function  -> GetAvailableTableRowForDataEntry
'Author		   						  ->TCS
'Dat		     						->30/06/2014
'Description  	   				->  Find the Table row which is blank for entering data
'Input Parameters	     ->  objTable = Object variable containing the Table 
'Output Parameters     ->  Captured Value in the required field
'***********************************************************************************'***********************************************************************************

Function GetAvailableTableRowForDataEntry(objTable)
   On error resume next
	Dim blnEditable,iCnt
	iCnt= 0
	If objTable.Exist(1) Then
				iRowCount = objTable.GetROProperty("visible rows")
				Do 
						iCnt= iCnt+1
						blnEditable = objTable.IsFieldEditable(iCnt,2)
				Loop Until  iCnt > iRowCount or ( blnEditable = False) 
				GetAvailableTableRowForDataEntry = iCnt
	End If

End Function


'***********************************************************************************'***********************************************************************************
'Name of the Function  -> CaptureTextTabbedRegion
'Author		   						  ->TCS
'Dat		     						->30/06/2014
'Description  	   				->  Capture Text from Tabbed REgion 
'Input Parameters	     ->  formShortTitle
'											   tabbedRegionLabel
'                                              tabbedRegionIndex
'                                              textFieldPromptOrDescriptionOrDeveloperName
'                                              textFieldIndex

'Output Parameters     ->  Captured Value in the required field
'***********************************************************************************'***********************************************************************************


Public Function CaptureTextTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescriptionOrDeveloperName,textFieldIndex)
  If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError
			    blnObjectError=False
				
				stepName="Capture Runtime Value from Oracle Tabbed Text Field"
				inputParameter="<b>Short Title of the Form : </b> "& formShortTitle &"<br><b>Description Or Prompt of the Text Field : </b> " & textFieldPromptOrDescriptionOrDeveloperName & "<br><b>Index of the text field : </b> " & textFieldIndex
				strStepDescription= "Capture Text from Tabbed Region [ " & tabbedRegionLabel & " ]"
				Dim strFieldValue,intSetFlag,objText
				intSetFlag=1
			
				On Error Resume Next
				If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Description
										Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex)
										intSetFlag=0
				ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleTextField("prompt:="& textFieldPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Prompt
										Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleTextField("prompt:="& textFieldPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex)
										intSetFlag=0
				ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleTextField("developer name:="& textFieldPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Prompt
										Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleTextField("developer name:="& textFieldPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex)
										intSetFlag=0
				Else
										status="FAIL"
										Flag=1
										message=" Oracle Tabbed region Text Field [ "& textFieldPromptOrDescriptionOrDeveloperName & " ] does not Exist."
										blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"CaptureTextTabbedRegion","1",stepName,message)
				End If

				If intSetFlag=0 Then
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																ImagePath=CaptureScreenshot(objText,strStepDescription)
										End if
										strFieldValue=objText.GetROProperty("value")
										outputParameter= strFieldValue
										blnExceptionFlag = Error_Listener ("CaptureTextTabbedRegion",objText)

										If Not blnExceptionFlag Then
															status="DONE"
															
															message="[ " & textFieldPromptOrDescriptionOrDeveloperName & " ] value Captured during run time."
															Call ReporterFunction(strLibraryFileName,"CaptureTextTabbedRegion","2",stepName,message)
										 Else
															status="FAIL"
															Flag=1
															message="<br> Unexpected Error Encountered while fetching the Run Time Data</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
															Call ReporterFunction(strLibraryFileName,"CaptureTextTabbedRegion","1",stepName,message)
										End If
										
				End If
	
				Set objText=Nothing
				If Flag =1  Then
							CaptureTextTabbedRegion = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
				Else
						CaptureTextTabbedRegion = strFieldValue
				End If
				If blnDefault_eSwiftReporting Then  
						Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
	End If	
End Function


'**********************************************************************************'***********************************************************************************
'Name of the Function   : EnterTextTable_Indexed
'Author		     					  :TCS
'Date			 				     :13/09/2011
'Description		          : Entering a field in a table
'Input Parameters	     : formShortTitle->Form window short title
'										 		 tableBlockName->blockName of the oracle table
'													 dataRowNo->RowNumber
'														 dataColumnName->ColumnName  of the field    
'															 valueToEnter ->value which will be entered                                   
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'***********************************************************************************

Function EnterTextTable_Indexed(formShortTitle,tableBlockName,tableIndex,dataRowNo,dataColumnName,valueToEnter)
 If Not Environment.Value("blnFatalError") Then
						 Dim blnObjectError:	blnObjectError=False
						'startTime=timer()
						stepName="Entering Data  under  a table column "
						inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br> <b>Block Name of Oracle table:</b> "& tableBlockName & "<br><b> Row Number: </b>" & dataRowNo &"<br> <b>Name of the column : </b>" & dataColumnName &"<br> <b>Value : </b>" & valueToEnter
						strStepDescription= "Enter text in the Table [ " & tableBlockName & " ] at Row number [ " & dataRowNumber & " ] and Column Number [ " & dataColumnNumber & " ]"
						'On error resume next
						If  OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName,"index:="& tableIndex).Exist(gObjectTimeoutLimit)  Then
												Set objTable = OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName,"index:="& tableIndex)
												If objTable.IsFieldEditable(dataRowNo,dataColumnName) or objTable.getROproperty("enabled") Then   ' Commented this validation  as it was failing  to check Accounting Allowed check box in  "Invoice and hold reason" forms
																		If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																							ImagePath=CaptureScreenshot(objTable,strStepDescription)
																						  End if
																	  OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName,"index:="& tableIndex).EnterField dataRowNo,dataColumnName,valueToEnter
																	If (instr(err.description,"The parameter is incorrect") >0) or (instr(err.description,"The operation cannot be performed") >0 )then
																						err.clear
																						status="FAIL"
																						Flag=1
																						blnObjectError=True  '// added
																						message="<br> Column Name "& dataColumnName &" Does Not Exist <br>"
																						Call ReporterFunction(strLibraryFileName,"EnterTextTable_Indexed","1",stepName,message)
																						EnterTextTable = message
																						blnMainFailFlag = True
																						ImagePath=CaptureScreenshot(stepName,inputParameter )
																						Exit Function
																		End if 
                                                                      blnExceptionFlag = Error_Listener ("EnterTextTable_Indexed",objTable)
																	  If  not blnExceptionFlag Then
																						  strEnteredValue=objTable.GetFieldValue(dataRowNo,dataColumnName)
																						  status="DONE"
																						  
																						  message=valueToEnter & ":  entered Under  the "& dataColumnName &" Table Column "
																						  Call ReporterFunction(strLibraryFileName,"EnterTextTable_Indexed","2",stepName,message)
															
																	 Else
																						  status="FAIL"
																						  Flag=1
																						  message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																						  Call ReporterFunction(strLibraryFileName,"EnterTextTable_Indexed","1",stepName,message)
																	  End If
											   Else
																		Flag=1
																		status="FAIL"
																		 blnObjectError=True  
																		message="[ " & dataColumnName & " ]: Table Column Field  is Not Editable"
																	   Call ReporterFunction(strLibraryFileName,"EnterTextTable_Indexed","1",stepName,message)
					
											  End If
						Else
											 Flag=1
											  status="FAIL"
											   blnObjectError=True  '// added
											message="[ " & tableBlockName & " ] Table not Found"
   										 Call ReporterFunction(strLibraryFileName,"EnterTextTable_Indexed","1",stepName,message)
						End If
	
						'endTime=timer()
						'exeTime= FormatNumber(endTime - startTime,3) 
						'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
						If Flag =1  Then
							EnterTextTable_Indexed = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTable,message)
						Else
								EnterTextTable_Indexed = True
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
End if 
End Function



'************************************************************************************************************************************************************************
'Name of the Function   :AddResponsibility (DummySSO,UserResponsibility)
'Author		     					  :TCS
'Date			 				     :06/03/2014
'Description		          : Adds Responsibility and saves. If Already added, closes the form.
'Input Parameters	     : Dummy SSO and Responsibility to be added

'Output Parameters        :True For Suceess/Fail for Failed
'*****************************************************************************************************************************************************************




'************************************************************************************************************************************************************************
'Name of the Function   :ClickObjectInTableCellWeb(objWebTable,iRowNumber,iColumnNumber,strObjectType,iObjectIndex)
'Author		     					  :TCS
'Date			 				     :20/02/2014
'Description		          : Click a link,image inside a cell of a table in web.
'Input Parameters	     :objWebTable = Object of the webTable
'								:iRowNumber = Row Number of the Cell to be clicked pf the WebTable
'								:iColumnNumber = Column Number of the Cell to be clicked of the WebTable.
'								:strObjectType= Link or Image
'								:iObjectIndex=index of the link or image.

'Output Parameters        :True For Suceess/Fail for Failed
'*****************************************************************************************************************************************************************


Function ClickObjectInTableCellWeb(objWebTable,iRowNumber,iColumnNumber,strObjectType,iObjectIndex)
      If Not Environment.Value("blnFatalError")  Then
  					  strStepDescription= "Click the object [ " & strObjectType & " ] in the WebTable at Column number[ " & dataColumnNumber & " ] and Row number [ " & iRowNumber & " ]"
					  If objWebTable.Exist(1) Then
						  set objToBeClicked= objWebTable.ChildItem(iRowNumber,iColumnNumber,strObjectType,iObjectIndex)
						  If objToBeClicked.exist(1) Then
						  
						  			  If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											ImagePath=CaptureScreenshot(objToBeClicked,strStepDescription)
									  End if
							          objToBeClicked.Click
									  status="DONE"
									  message="[ " & strObjectType &"] Clicked Successfully."
									  Call ReporterFunction(strLibraryFileName,"ClickObjectInTableCell","2",stepName,message)
									  ClickObjectInTableCell=True
								else
									  status="FAIL"
									  Flag=1
									  blnMainFailFlag = True
									  Message=strObjectType  &" does not exists"
									  Environment.Value("blnFatalError")=True
									  ClickObjectInTableCell=Message
						  End If
						  	
					   Else
						  status="FAIL"
						  Flag=1
						  Message="WebTable Object "&  objWebTable   &" does not exists"
						  Environment.Value("blnFatalError")=True
'						  ClickObjectInTableCell=Message
'						  blnMainFailFlag = True
					
					  End If
				
					Set objToBeClicked= Nothing				
					  
				     If Flag =1  Then
							ClickObjectInTableCellWeb = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objToBeClicked,message)
					Else
							ClickObjectInTableCellWeb = True
					End If
					If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
					  
					  

     End If
             
End Function

'************************************************************************************************************************************************************************
'Name of the Function   :ExportAndAttachFileFromOracle(shortTitle, blnTrueForAttach,Byref strPathDownloaded)
'Author		     					  :TCS
'Date			 				     :27/02/2014
'Description		          : Export a file from Oracle Applications from File->Export and attach the same with the report html file
'Input Parameters	     :shortTitle = Short Title of the form
'								:blnTrueForAttach = true to attach file; false not to attach the file.
'								:strPathDownloaded = Byref parameter
'Output Parameters        :True For Suceess/Fail for Failed
'************************************************************************************************************************************************************************
Function ExportAndAttachFileFromOracle(shortTitle, blnTrueForAttach,Byref strPathDownloaded)
                                                                Dim strSaveTo
                                                                Set clipboard = createobject("mercury.clipboard")
                                                                clipboard.Clear
                                                                'clipboard.SetText("D:\502209932\Results\ResultOutput.xls")
                                                                strFileName= "ResultOutput"& RandomNumber(1,100) & ".tsv"
                                                                strSaveTo = gstrScenarioResultFolder&"\" & strFileName
                                                                clipboard.SetText(strSaveTo)
                                                                strPathDownloaded = strSaveTo
																Set objFileDownload = Dialog("text:=0% of fnd_gfm.tsv from erpdevl1.health.ge.com Completed").Dialog("text:=File Download").WinButton("text:=&Save")

                                                                OracleFormWindow("short title:=" & shortTitle).SelectMenu "File->Export"
																Browser("name:=Oracle Applications Home Page").Page("title:=Oracle Applications Home Page").Sync
                                                                wait(10)
																If objFileDownload.exist(gObjectTimeoutLimit+1) Then
																	objFileDownload.Click
																elseif objFileDownload.Exist(gObjectTimeoutLimit+1) Then
															       objFileDownload.Click
																End If

																Set oShell = CreateObject("WScript.Shell")
                                                                Do 
                                                                                bResult = oShell.AppActivate("Save As") 
                                                                                If bResult = True Then 
                                                                                                oShell.SendKeys "^V" 
                                                                                                wait(2)
                                                                                   oShell.SendKeys "{Enter}" 
                                                                                                ' or "%K" for Alt+k, for OK and "%N" (Alt+N) for Cancel
                                                                                                Exit Do 
                                                                                End If 
                                                                Loop

                                                                If  Dialog("text:=Download Complete").WinButton("text:=Close").Exist(1) Then
                                                                                                                                                Dialog("text:=Download Complete").WinButton("text:=Close").Click
                                                                                                                                                If blnTrueForAttach Then
                                                                                                                                                                                                                aFileAttachmentPathArray(giFileAttachmentCounterForHTML) = ".\" & strFileName
                                                                                                                                                                                                                giFileAttachmentCounterForHTML= giFileAttachmentCounterForHTML+1
                                                                                                                                                End If
                                                                                                                                                ExportAndAttachFileFromOracle= True
                                                                else
                                                                                                                                                ExportAndAttachFileFromOracle= "File Could not downloaded/File download absent"
                                                                End If
                                                                clipboard.Clear
                                                                Set clipboard= Nothing
End Function






'************************************************************************************************************************************************************************
'Name of the Function   :ClickWebElement(browserName,strInnerText,iIndex)
'Author		     					  :TCS
'Date			 				     :25/02/2014
'Description		          : Click Objects which appear as WebElement in web based applicaitons
'Input Parameters	     :browserName= Name of the Browser
'								:strInnerText = Innertext property of the webelement
'Output Parameters        :True For Suceess/Fail for Failed
'************************************************************************************************************************************************************************

Function ClickWebElement(browserName,strInnerText,iIndex)
   If Not Environment.Value("blnFatalError") Then
							Dim blnObjectError:    blnObjectError=False
							'startTime=Timer()
							stepName="Select from List"
							inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Innertext : </b>"& strInnerText &"<br><b>Index : </b>" & valueToSelect
							strStepDescription= "Click the Web Element [ " & strInnerText & " ]"
							 On Error Resume Next
							 pageTitle= browserName
							 If Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("innertext:="& strInnerText,"index:="&iIndex).Exist(gObjectTimeoutLimit+5) Then	'Check Field for Description
							 			Set objWebElement= Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("innertext:="& strInnerText,"index:="&iIndex)
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											ImagePath=CaptureScreenshot(objWebElement,strStepDescription)
										End if
										Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("innertext:="& strInnerText,"index:="&iIndex).Click
										status="DONE"
                                        message="[ " & strInnerText & " ] Web Element clicked successfully."
										Call ReporterFunction(strLibraryFileName,"ClickWebElement","2",stepName,message)
							 Else
										status="FAIL"
										Flag=1
										message="Web Element "& strInnerText  & " Missing/not Matching"
										blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"ClickWebElement","1",stepName,message)
							 End If
							'endTime = Timer()
							'ExeTime = FormatNumber(endTime - startTime,3)
							 ' Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
							  If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										'Call Error_Recovery ("CloseAllForms")
							  End If
  						If Flag =1  Then
							ClickWebElement = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebElement,message)
						Else
								ClickWebElement = True
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If

	End If
End Function






'************************************************************************************************************************************************************************
'Name of the Function   : GetRowNumOfSpecificValueInTableColumn
'Author		     					  :TCS
'Date			 				     :20/02/2014
'Description		          : Search and get the Row number of specific value in oracle Table column
'Input Parameters	     :objTable->Object of the Table.'
											'iColumnName->Name of the Column in which value needs to search
												'SearchValue-> Specific value that need to be searched
'Output Parameters        :Row number on Success ; Failure messsage on Fail
'****************************************************************************************************************************************************************************
Function  GetRowNumOfSpecificValueInTableColumn(objTable,iColumnName,SearchValue)

  If  Not Environment.Value("blnFatalError")    Then
			If objTable.Exist(gObjectTimeoutLimit) Then
								Dim blnValueExist,blnObjectError
								blnValueExist=False
								blnObjectError=False
								err.clear
								On error resume next
								Dim iRowCount : iRowCount=1
								objTable.SetFocus iRowCount,iColumnName
								Do
											strRecordValue = objTable.GetFieldValue(iRowCount,iColumnName)
											If strRecordValue  =SearchValue Then
												blnValueExist=True
												Exit Do
											else
											
												Set oShell = CreateObject("WScript.Shell")
												oShell.SendKeys "{DOWN}"
												iRowCount=iRowCount+1
											
											End If
											If Not err.number = 0  Then
												Exit Do
											End If
								Loop
								If blnValueExist Then
									GetRowNumOfSpecificValueInTableColumn=iRowCount
									else 
									Environment.Value("blnFatalError")=True
									blnObjectError=True
									GetRowNumOfSpecificValueInTableColumn="The value  '" & SearchValue & "' was not found in Table column '" & iColumnName &"'" 
								End If
			
			End If
  End If
	
End Function


'**********************************************************************************'***********************************************************************************
'Name of the Function		:DownloadExcelOutputFileAnyBrowser
'Author		     					  :TCS
'Date			 				     :18.02.2014
'Description		          : To download the excel file from any browser application
'Input Parameters	     : blnTrueForAttach = boolean 'True' to attach excel file to the test step 
'																	  = boolean 'False' for not to attach excel file to the test step
'										strBrowserNameOrTitle  =  browser title or name
  
'Output Parameters       :strPathDownloaded   = Path of the location of downloaded excel file
'										 strFileName = Name of the downloaded excel file
'**********************************************************************************'***********************************************************************************



Function DownloadExcelOutputFileAnyBrowser(blnTrueForAttach,strBrowserNameOrTitle,Byref strPathDownloaded,Byref strFileName)
                                                                Dim strSaveTo
                                                                Set clipboard = createobject("mercury.clipboard")
                                                                clipboard.Clear
                                                                strFileName= "ResultOutput"& RandomNumber(1,100)&".xls"
                                                                strSaveTo = gstrScenarioResultFolder&"\" & strFileName
                                                                clipboard.SetText(strSaveTo)
                                                                strPathDownloaded = strSaveTo
																Set objTitle = Browser("title:="&strBrowserNameOrTitle)
																Set objName = Browser("name:="&strBrowserNameOrTitle)

																If  objTitle.Exist(gObjectTimeoutLimit+1) Then
																	Browser("title:="&strBrowserNameOrTitle).Dialog("text:=File Download").WinButton("text:=&Save").Click
																elseif objName.Exist(gObjectTimeoutLimit+1) Then
															       Browser("name:="&strBrowserNameOrTitle).Dialog("text:=File Download").WinButton("text:=&Save").Click
																End If
																                                                          
                                                                wait(10)
                                                                Set oShell = CreateObject("WScript.Shell")
                                                                Do 
                                                                                bResult = oShell.AppActivate("Save As") 
                                                                                If bResult = True Then 
                                                                                                oShell.SendKeys "^V" 
                                                                                                wait(2)
                                                                                   oShell.SendKeys "{Enter}" 
                                                                                                ' or "%K" for Alt+k, for OK and "%N" (Alt+N) for Cancel
                                                                                                Exit Do 
                                                                                End If 
                                                                Loop 
                                                                If  Dialog("text:=Download Complete").WinButton("text:=Close").Exist(1) Then
                                                                                                                                                Dialog("text:=Download Complete").WinButton("text:=Close").Click
                                                                                                                                                If blnTrueForAttach Then
                                                                                                                                                                                                                aFileAttachmentPathArray(giFileAttachmentCounterForHTML) = ".\" & strFileName
                                                                                                                                                                                                                giFileAttachmentCounterForHTML= giFileAttachmentCounterForHTML+1
                                                                                                                                                End If
                                                                                                                                                DownloadExcelOutputFileAnyBrowser = True
                                                                else
                                                                                                                                                DownloadExcelOutputFileAnyBrowser = "File Could not downloaded/File download absent"
                                                                End If
                                                                clipboard.Clear
                                                                Set clipboard= Nothing
End Function



'**********************************************************************************'***********************************************************************************
'Name of the Function		:ClickLOVButton
'Author		     					  :TCS
'Date			 				     :17.02.2014
'Description		          : Capture Runtime Value from Oracle Tab List
'Input Parameters	     : formShortTitle,ListPromptOrDescriptionOrDeveloperName,textFieldIndex
'Output Parameters       :Runtime Value Captured
'**********************************************************************************'***********************************************************************************

Function ClickLOVButton(strLOVTitle,ButtonLabel)
		If OracleListOfValues("title:="& strLOVTitle).OracleButton("label:="& ButtonLabel).Exist(1) Then
				OracleListOfValues("title:="& strLOVTitle).OracleButton("label:="& ButtonLabel).Click
				ClickLOVButton= True
		Else
				ClickLOVButton= "LOV "&strLOVTitle & "OR LOV Button" & ButtonLabel & "Not found "
				blnMainFailFlag = True
		End If
End Function
'**********************************************************************************'***********************************************************************************

'Name of the Function		:CaptureTextTabListValue
'Author		     					  :TCS
'Date			 				     :17.02.2014
'Description		          : Capture Runtime Value from Oracle Tab List
'Input Parameters	     : formShortTitle,ListPromptOrDescriptionOrDeveloperName,textFieldIndex
'Output Parameters       :Runtime Value Captured
'***********************************************************************************'***********************************************************************************
Public Function CaptureTextTabListValue(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,ListPromptOrDescriptionOrDeveloperName,textFieldIndex)
  If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError
			    blnObjectError=False
				
				stepName="Capture Runtime Value from Oracle Tab List"
				inputParameter="<b>Short Title of the Form : </b> "& formShortTitle &"<br><b>Description Or Prompt of the Text Field : </b> " & textFieldPromptOrDescriptionOrDeveloperName & "<br><b>Index of the text field : </b> " & textFieldIndex
				strStepDescription= "Capture Text from Tabbed List [ " & ListPromptOrDescriptionOrDeveloperName & " ] in the form [ " & tabbedRegionLabel & " ]"
				Dim strFieldValue,intSetFlag,objText
				intSetFlag=1
			
				On Error Resume Next
				If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleList("description:="& ListPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Description
										Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleList("description:="& ListPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex)
										intSetFlag=0
				ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleList("prompt:="& ListPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Prompt
										Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleList("prompt:="& ListPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex)
										intSetFlag=0
				ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleList("developer name:="& ListPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Prompt
										Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleList("developer name:="& ListPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex)
										intSetFlag=0
				Else
										status="FAIL"
										Flag=1
										message="Given  Oracle Tab List [ "& ListPromptOrDescriptionOrDeveloperName & " ] does not Exist."
										blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"CaptureTextTabListValue","1",stepName,message)
				End If

				If intSetFlag=0 Then
					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																ImagePath=CaptureScreenshot(objText,strStepDescription)
															End if
										strFieldValue=objText.GetROProperty("value")
										outputParameter= strFieldValue
										blnExceptionFlag = Error_Listener ("CaptureTextTabListValue",objText)

										If Not blnExceptionFlag Then
															status="DONE"
															
															message="[ " & ListPromptOrDescriptionOrDeveloperName & " ] value Captured during run time."
															Call ReporterFunction(strLibraryFileName,"CaptureTextTabListValue","2",stepName,message)
										 Else
															status="FAIL"
															Flag=1
															message="<br> Unexpected Error Encountered while fetching the Run Time Data</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
															Call ReporterFunction(strLibraryFileName,"CaptureTextTabListValue","1",stepName,message)
										End If
										
				End If
				'strTextOutput=strFieldValue									'Returning the Value 
				'outputParameter=strFieldValue						'Setting Output Parameter
				Set objText=Nothing
				'endTime=Timer()
				'ExeTime = FormatNumber(endTime - startTime,3) 
				'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)


						If Flag =1  Then
							CaptureTextTabListValue = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
						Else
								CaptureTextTabListValue = strFieldValue
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
	End If	
End Function


'************************************************************************************************************************************************************************
'Name of the Function   : OpenDFFWindowTabReg
'Author		     					  :TCS
'Date			 				     :13/02/2014
'Description		          : Open DFF window
'Input Parameters	     :formShortTitle->ShortTitle of the form.'
											'TabRegionLabel->Label
												'DFF-> develolper Name
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'************************************************************************************************************************************************************************

Function OpenDFFWindowTabReg(FormShortTitle,Label,DeveloperName)

If  Not Environment.Value("blnFatalError")   Then
	     blnObjectFound=False
         Set TextBoxObj=OracleFormWindow("short title:="&FormShortTitle).OracleTabbedRegion("label:="&Label).OracleTextField("developer name:="&DeveloperName)
               If TextBoxObj.Exist(1)  Then
			 					 TextBoxObj.Click
								 blnObjectFound=True
							  Else
								 status="FAIL"
								 Flag=1
								 message="<br>DFF object Not Found   </br > "
								 Call ReporterFunction(strLibraryFileName,"OpenDFFWindowTabReg","1",stepName,message)
		        End If
                If blnObjectFound  Then
									OpenDFFWindowTabReg=True
								 Else
								   OpenDFFWindowTabReg="DFF object not found"
								   Environment.Value("strFatalMessage")=True
		        End If
   End If
End Function


'************************************************************************************************************************************************************************
'Name of the Function   : SelectCheckBoxTabbedRegionWithValidation
'Author		     					  :TCS
'Date			 				     :12/02/2014
'Description		          : Select and unselect checkbox based on the value specified
'Input Parameters	     :formShortTitle->ShortTitle of the form.'
											'checkBoxDescription->description or DeveloperName  property of checkbox 
												'checkBoxOption-> Yes/No/True /False/T/F
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'****************************************************************************************************************************************************************************


Function SelectCheckBoxTabbedRegionWithValidation(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,checkBoxDescriptionorDeveloperName,checkBoxOption)
    If Not Environment.Value("blnFatalError") Then
						Dim blnObjectError:	blnObjectError=False
						Dim blnObjExist : blnObjExist=False
					   'startTime=timer()
						stepName="Check/Uncheck Check Box "
						inputParameter="Short Title of  Form:"& formShortTitle &"<br>Check Box : "& checkBoxDescriptionorDeveloperName& "<br> Option: " & checkBoxOption 
						strStepDescription= "Select the option [ " & checkBoxOption & " ] in the CheckBox [ " & checkBoxDescriptionorDeveloperName & " ]"
						On Error Resume Next
						If  OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleCheckbox("description:=" & checkBoxDescriptionorDeveloperName).Exist(gObjectTimeoutLimit) Then
								   Set objCheckBox=OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleCheckbox("description:="& checkBoxDescriptionorDeveloperName)
								   blnObjExist=True
						ElseIf  OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleCheckbox("developer name:="& checkBoxDescriptionorDeveloperName).Exist(gObjectTimeoutLimit) Then
								   Set objCheckBox=OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleCheckbox("developer name:="& checkBoxDescriptionorDeveloperName)
									   blnObjExist=True
						Else
									    Flag=1
										Status="FAIL"
										message=checkBoxDescriptionorDeveloperName & " : CheckBox not found"
										blnObjectError=True
									Call ReporterFunction(strLibraryFileName,"SelectCheckBoxTabbedRegionWithValidation","1",stepName,message)
						End if

									 If blnObjExist Then
																If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																		ImagePath=CaptureScreenshot(objCheckBox,strStepDescription)
																End if
                                       							If objCheckBox.GetROProperty("Enabled")  Then
																		If Ucase(checkBoxOption)="YES" or Ucase(checkBoxOption)="TRUE" Then
																				If   objCheckBox.IsSelected Then
																								message=checkBoxDescriptionorDeveloperName & " :CheckBox already selected"
																				Else
																								'if not already selected ,select it
																								objCheckBox.Select
																								 message="Checkbox" & checkBoxDescriptionorDeveloperName &"selected"
																				End If
																ElseIf Ucase(checkBoxOption)="NO" or Ucase(checkBoxOption)="FALSE" Then
																								'If already selected  clear /uncheck it
																								If  objCheckBox.IsSelected Then
																										  objCheckBox.Clear
																											  message=checkBoxDescriptionorDeveloperName & " :CheckBox  unchecked"
																								Else
																											 message=checkBoxDescriptionorDeveloperName & " :CheckBox already unchecked"
																							   End If
																Else
																								status="FAIL"
																								Flag=1
																								message="[ " & checkBoxOption & " ] Invalid Option."
																							
																								Call ReporterFunction(strLibraryFileName,"SelectCheckBoxTabbedRegionWithValidation","1",stepName,message)
																End If
												 End If
																blnExceptionFlag = Error_Listener ("SelectCheckBoxTabbedRegionWithValidation",objCheckBox)
																If  Not blnExceptionFlag Then
																								status="DONE"
                                                                                                Call ReporterFunction(strLibraryFileName,"SelectCheckBoxTabbedRegionWithValidation","2",stepName,message)
																else
																								Flag=1
																								status="FAIL"
																								message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																								Call ReporterFunction(strLibraryFileName,"SelectCheckBoxTabbedRegionWithValidation","1",stepName,message)
																								
																End If
								   
									 Else
															 status="FAIL"
															 Flag=1
															message=checkBoxDescriptionorDeveloperName & " : CheckBox disabled"
													
															Call ReporterFunction(strLibraryFileName,"SelectCheckBoxTabbedRegionWithValidation","1",stepName,message)
								  End If

				 Set objCheckBox=Nothing

						If Flag =1  Then
							SelectCheckBoxTabbedRegionWithValidation = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objCheckBox,message)
						Else
								SelectCheckBoxTabbedRegionWithValidation = True
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
End If 

End Function



'**********************************************************************************************************************************************************************
'Name of the Function: ClickWebArea(browserName,webAreaHTMLId)
'Author : TCS
'Date : 11.02.2014
'Description               : Click on WebArea
'Input Parameters : 
'Output Parameters : None
'**********************************************************************************************************************************************************************

Public Function ClickWebArea(browserName,webAreaHTMLId)
		If Not Environment.Value("blnFatalError") Then
						Dim blnObjectError:    blnObjectError=False
						'startTime=Timer()
						stepName="Click Image"
						inputParameter="<b>Browser Name : </b>" & browserName &"<br><b>WebArea HTML Id : </b>"& webAreaHTMLId
						strStepDescription= "Click the WebArea [ " & webAreaHTMLId & " ] in the Browser [ " & browserName & " ]"
						On Error Resume Next
						
									Set obj= Description.Create()
									obj("micclass").value="Page"
									Set childObj=Browser("name:="& browserName).ChildObjects(obj)
									pageTitle=childObj(0).getroproperty("title")
									Set objLink=Browser("name:="& browserName).Page("title:="& pageTitle).WebArea("html id:="& webAreaHTMLId)
									Call WaitForObject (objLink,10)
									If  objLink.Exist(gObjectTimeoutLimit+3) Then
													If objLink.GetROProperty("disabled")=0  Then
																	If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																							ImagePath=CaptureScreenshot(objLink,strStepDescription)
																	End if
																	objLink.Click
																	blnExceptionFlag = Error_Listener ("ClickWebArea",objLink)
																	If  Not blnExceptionFlag Then
																						status="DONE"
                                                                                        message="Link [ "& linkName &" ] has been Clicked Successfully."
																						Call ReporterFunction(strLibraryFileName,"ClickWebArea","2",stepName,message)
																	else
																							Flag=1
																							status="FAIL"
																							message =  "<br> Unexpected Error Encountered on Clicking Link " &  linkName  &" </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																							Call ReporterFunction(strLibraryFileName,"ClickWebArea","1",stepName,message)																	
																	End If
													Else
																	status="FAIL"
																	Flag=1
																	message="Link [ "& linkName &" ] is Disabled."
																	blnObjectError=True
																	Call ReporterFunction(strLibraryFileName,"ClickWebArea","1",stepName,message)
													End If
									Else
													status="FAIL"
													Flag=1
													message="Link [ "& linkName &" ] not Found."
													blnObjectError=True
													Call ReporterFunction(strLibraryFileName,"ClickWebArea","1",stepName,message)
									End If
									Set objLink=Nothing
									Set childObj=Nothing
									Set obj=Nothing
									'endTime = Timer()
									'ExeTime = FormatNumber(endTime - startTime,3)
								   'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

  						If Flag =1  Then
							ClickWebArea = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objLink,message)
						Else
								ClickWebArea = True
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
	End If
End Function
'**********************************************************************************************************************************************************************
'Name of the Function: DownloadPDFOutputFile (strURL,ByRef strPDFFilePath,blnTrueForAttach)
'Author : TCS
'Date : 16.01.2014
'Description               : Set Focus on opened Browser window
'Input Parameters : strURL  : Link address of the browser
'							strPDFFilePath: Varibale that will hold the PDF file path after function is over.Its out parameter
'							blnTrueForAttach : Booelan True for attachign the PDF file to HTML report
'Output Parameters : None
'**********************************************************************************************************************************************************************



Function  DownloadPDFOutputFile (strURL,ByRef strPDFFilePath,blnTrueForAttach)


																Dim strSaveTo
                                                                Set clipboard = createobject("mercury.clipboard")
                                                                clipboard.Clear
'																gstrScenarioResultFolder ="D:\502209932"
                                                                
                                                                strFileName= "ResultOutput"& RandomNumber(1,100)&".pdf"
                                                                strSaveTo = gstrScenarioResultFolder&"\" & strFileName
																strPDFFilePath= strSaveTo
                                                                clipboard.SetText(strSaveTo)
																Wait(10)
                                                                Call SetFocusBrowser (strURL,False)
																Set oShell = CreateObject("WScript.Shell")
																oShell.SendKeys "^+s" 
																
																iCnt = 0 
                                                                Do 
																				iCnt= iCnt+ 1
																				wait(2)
                                                                                bResult = oShell.AppActivate("Save As") 
                                                                               If bResult = True or iCnt > 3 Then 
																				    
                                                                                   oShell.SendKeys "^V" 											
                                                                                   oShell.SendKeys "{Enter}" 

                                                                                   Exit Do 
                                                                                End If 
                                                                Loop 
																wait(5)
                                                                If fso.FileExists(strSaveTo) Then
																						If blnTrueForAttach Then
																										aFileAttachmentPathArray(giFileAttachmentCounterForHTML) = ".\" & strFileName
																										giFileAttachmentCounterForHTML= giFileAttachmentCounterForHTML+1
																						End If
																						DownloadPDFOutputFile= True
																else
																						DownloadPDFOutputFile= "File could not be downloaded"
																End If
																
                                                                clipboard.Clear
                                                                Set clipboard= Nothing



End Function


'**********************************************************************************************************************************************************************
'Name of the Function: SetFocusBrowser url,blnTrueForMaximizeBrowser)
'Author : TCS
'Date : 16.01.2014
'Description               : Set Focus on opened Browser window
'Input Parameters : url  : Link address of the browser
'							blnTrueForMaximizeBrowser: Booelan True for maximizing the browser 
'Output Parameters : None
'**********************************************************************************************************************************************************************


Function SetFocusBrowser(url,blnTrueForMaximizeBrowser)
   wait(15)
   call Waitforobject(Browser("title:=.*" & url &".*"),20)
	If blnTrueForMaximizeBrowser or blnTrueForMaximizeBrowser <>"" Then
			MaximizeBrowser("FNDWRR")
	End If

	If Browser("title:=.*"& url & ".*").exist(1) Then
		On error resume next
			
			ghwnd = Browser("title:=.*"& url & ".*").GetROProperty("hwnd")
			Window("hwnd:=" & ghwnd).Restore
			Window ("hwnd:="& ghwnd).Activate 'May pop an "object not visible" error. Disregard. 
		   on error goto 0
		   SetFocusBrowser= True
	Else
			SetFocusBrowser= False
	End If
End Function


'**********************************************************************************************************************************************************************
'Name of the Function: VerifyValueinPDF (aArrayOfExpectedValue,strPDFFilePath)
'Author : TCS
'Date : 16.01.2014
'Description               : Verify a value in a PDF file
'Input Parameters : aArrayOfExpectedValue : Array containing the expected valueto be verified 
'							strPDFFilePath:File path of the PDF
'Output Parameters : True on Success ; Failure messsage on Fail having list of value not found
'**********************************************************************************************************************************************************************

Function VerifyValueinPDF(aArrayOfExpectedValue,strPDFFilePath)
	On error resume next
	Dim blnValueNotFound:blnValueNotFound=False
	
'	strStepDescription= Verify value [ " & dataRowNumber & " ] and Column Number [ " & dataColumnNumber & " ]"
	If fso.FileExists(strPDFFilePath) Then
			strpdffilename = strPDFFilePath
    		systemutil.Run strpdffilename
			wait(5)
			Set objCB = CreateObject("Mercury.Clipboard")
			objCB.Clear
			Window("regexpwndtitle:=Adobe Reader","regexpwndclass:=AcrobatSDIWindow").Activate		'Set Page Display to Single Page
			wait(3)
			Window("regexpwndtitle:=Adobe Reader","regexpwndclass:=AcrobatSDIWindow").Type micCtrlDwn + "a" + micCtrlUp		'Select all text in the current page
			Window("regexpwndtitle:=Adobe Reader","regexpwndclass:=AcrobatSDIWindow").Type micCtrlDwn + "c" + micCtrlUp	'Copy the whole text in clipboard
			While objCB.GetText=""
					 wait 1
			Wend
		 
			PDFTxt =  objCB.GetText
		
		'	Dim fso
		'	Set fso=Createobject("Scripting.Filesystemobject")
		'	Set f=fso.OpenTextFile("D:\502209932\PDFExtractFinal.txt",2,True)
		'	f.Write PDFTxt
		'	f.Close
			objCB.Clear

			For iCnt = 0 to Ubound(aArrayOfExpectedValue)
				If  Not isEmpty(aArrayOfExpectedValue(iCnt)) Then
							If  instr(PDFTxt,aArrayOfExpectedValue(iCnt)) = 0 Then
										strValueNotFound = strValueNotFound & " ' " & aArrayOfExpectedValue(iCnt) &" ' " 
										blnValueNotFound= True
							End If
				
				End If
			Next
		
			SystemUtil.CloseProcessByName "AcroRD32.exe" 
			If blnValueNotFound Then
				VerifyValueinPDF = " Values Not found in PDF : " & strValueNotFound  
			else
				VerifyValueinPDF = True
			End If
	else
			VerifyValueinPDF = "PDF File not found in path " & strPDFFilePath
	End If

End Function







'**********************************************************************************************************************************************************************
'Name of the Function: VerifySingleValueInOutputExcel (InputFilePath,iColumnNoToCheck,strValueToCheck)
'Author : TCS
'Date : 16.01.2014
'Description               : Verify a value which is in an excel sheet      
'Input Parameters : InputFilePath : Path of the excel file
' iColumnNoToCheck : Column No. in the excel sheet to check the value
' strValueToCheck :  Value with which the value in excel is to be compared
'Output Parameters : True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************


Function VerifySingleValueInOutputExcel(InputFilePath,iColumnNoToCheck,strValueToCheck)
                                On error resume next
                                strStepDescription= "Verify the Value [ " & strValueToCheck & " ] in the Excel file [ " & InputFilePath & " ]"
                                err.clear
                                Dim MaximumRowLimit :             MaximumRowLimit= 500
                                Set objExcel = CreateObject("Excel.Application")                             
                                
                                Set objWorkbook = objExcel.Workbooks.Open(InputFilePath)
                                If err.number <> 0 Then
                                                                VerifySingleValueInOutputExcel = " File Not Found/Could Not read file in Path = ' " & InputFilePath &" '"
                                                                Set objExcel= Nothing
                                                                Exit Function
                                End If
                                objExcel.Visible = True
                                If blnCaptureFlag = True Then
                                                ImagePath =CaptureScreenshot("","")
                                End If
                                
                                Set objSheet = objExcel.ActiveWorkbook.Worksheets(1)
                                For iRow=1 to MaximumRowLimit
                                                                strCellValue= objSheet.Cells(iRow, iColumnNoToCheck).Value
                                                  If  strCellValue= strValueToCheck Then
                                                                                VerifySingleValueInOutputExcel = true
                                                                Exit For
                                                  End If
                                Next
                                If iRow > MaximumRowLimit Then
                                                                VerifySingleValueInOutputExcel = " Value ' " & strValueToCheck &" ' Not Found in Outpput Excel file"
                                End If
                                objExcel.quit
                                set objExcel= Nothing
End Function


'**********************************************************************************************************************************************************************
'Name of the Function: DownloadExcelOutputFile(blnTrueForAttach,Byref strPathDownloaded)
'Author : TCS
'Date : 16.01.2014
'Description               : To download an excel file
'Input Parameters : blnTrueForAttach : is to be 'True'  to download the file
'Output Parameters : strPathDownloaded :  path of the downloaded file
'**********************************************************************************************************************************************************************



Function DownloadExcelOutputFile(blnTrueForAttach,Byref strPathDownloaded)
                                                                Dim strSaveTo
                                                                Set clipboard = createobject("mercury.clipboard")
                                                                clipboard.Clear
                                                                'clipboard.SetText("D:\502209932\Results\ResultOutput.xls")
                                                                strFileName= "ResultOutput"& RandomNumber(1,100)&".xls"
                                                                strSaveTo = gstrScenarioResultFolder&"\" & strFileName
                                                                clipboard.SetText(strSaveTo)
                                                                strPathDownloaded = strSaveTo
                                                                Browser("title:=.*FNDWRR.*").Dialog("text:=File Download").WinButton("text:=&Save").Click
                                                                wait(10)
                                                                Set oShell = CreateObject("WScript.Shell")
                                                                Do 
                                                                                bResult = oShell.AppActivate("Save As") 
                                                                                If bResult = True Then 
                                                                                                oShell.SendKeys "^V" 
                                                                                                wait(2)
                                                                                   oShell.SendKeys "{Enter}" 
                                                                                                ' or "%K" for Alt+k, for OK and "%N" (Alt+N) for Cancel
                                                                                                Exit Do 
                                                                                End If 
                                                                Loop 
                                                                If  Dialog("text:=Download Complete").WinButton("text:=Close").Exist(1) Then
                                                                                                                                                Dialog("text:=Download Complete").WinButton("text:=Close").Click
                                                                                                                                                If blnTrueForAttach Then
                                                                                                                                                                                                                aFileAttachmentPathArray(giFileAttachmentCounterForHTML) = ".\" & strFileName
                                                                                                                                                                                                                giFileAttachmentCounterForHTML= giFileAttachmentCounterForHTML+1
                                                                                                                                                End If
                                                                                                                                                DownloadExcelOutputFile= True
                                                                else
                                                                                                                                                DownloadExcelOutputFile= "File Could not downloaded/File download absent"
                                                                End If
                                                                clipboard.Clear
                                                                Set clipboard= Nothing
End Function


Function DownloadAndAttachRequestOutputFile(strShortLinkURL,strFileExtension,blnTrueForAttach,strHTMLText)
                                                   Dim objStream,strPageBody
												   strPageBody= ""
												   iNum = RandomNumber(1,100)
                                                   If strFileExtension="" Then
						 														strFileName= "RequestOutput"& iNum& ".txt"
                                                                                

                                                   elseIf instr(strFileExtension,".") = 0 then
																				strFileName = "RequestOutput"& iNum & "." & strFileExtension
																				
												   else

                                                                                strFileName = "RequestOutput."& iNum  & strFileExtension
                                                   End If
                                                   strSaveTo = gstrScenarioResultFolder &"\" & strFileName
                                                   Set objFSO = CreateObject("Scripting.FileSystemObject")
                                                   If objFSO.FileExists(strSaveTo) Then
                                                                  objFSO.DeleteFile(strSaveTo)
                                                   End If

                                                                strPageBody = CaptureContentOfWebPage(strShortLinkURL)

                                                                If strPageBody<>"" Then
																				Set objStream = CreateObject("ADODB.Stream")
																				strHTMLText =strPageBody 
																				With objStream
																																								.Type = 2 'adTypeBinary
																																								.Open
																																								'.Write objHTTP.ResponseBody                                                 
																																								.WriteText strPageBody
																																								.SaveToFile strSaveTo
																																								.Close
																				End With
																				set objStream = Nothing

																				If blnTrueForAttach Then
																					aFileAttachmentPathArray(giFileAttachmentCounterForHTML) = ".\"&strFileName
																					giFileAttachmentCounterForHTML= giFileAttachmentCounterForHTML+1
																				End If
																				DownloadAndAttachRequestOutputFile= True
																Else
																				DownloadAndAttachRequestOutputFile = "Output  Not found or No Data could be read from the Ouput "

																End If
End Function




Function ClickViewOutputAndGetPageTextBody(strExpectedProcessRequestID,strURL)
                If strExpectedProcessRequestID <> "" Then
                                iMaxRow   = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetROProperty("visible rows")
                                                For i=1 to iMaxRow
                                                                                iActualProcessRequestID=OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(i,"Request ID")
                                                                If  iActualProcessRequestID  = strExpectedProcessRequestID Then
                                                                                                                Call OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").SetFocus(i,"Request ID")
                                                                                                                OracleFormWindow("short title:=Requests").OracleButton("label:=View Output").Click
                                                                                End if 
                                                Next
                else
                                                OracleFormWindow("short title:=Requests").OracleButton("label:=View Output").Click
                End If
                Call WaitForObject(Browser("title:=.*"& strURL &".*"),10)
                ClickViewOutputAndGetPageTextBody=              CaptureContentOfWebPage(strURL)
End Function

Function CaptureContentOfWebPage(strBrowserTitle)
				Dim blnBrowserFound : blnBrowserFound= False
        		Dim hWnd,objBrowser1,objBrowser2
				strBrowserName = strBrowserTitle
		
				set objBrowser1=Browser("name:=.*"& strBrowserName &".*")
				set objBrowser2=Browser("title:=.*"& strBrowserName &".*")
			
				 If objBrowser1.Exist(1) then
					strBrowserURL = objBrowser1.GetROProperty("title")
					set Object = objBrowser1
					blnBrowserFound= True
				elseIf objBrowser2.Exist(1) Then
					set Object = objBrowser2
					strBrowserURL = objBrowser2.GetROProperty("title")
					blnBrowserFound= True
				End if 

				If  blnBrowserFound= True Then
					Set oShell = CreateObject("WScript.Shell")
					bResult = oShell.AppActivate(strBrowserURL) 
					oShell.SendKeys "% x"
				   If bResult = True Then 
							Set clipboard = createobject("mercury.clipboard")
                            clipboard.Clear
							ghwnd =Object.GetROProperty("hwnd")

    						Window ("hwnd:="& ghwnd).Type micCtrlDwn + "a" + micCtrlUp		'Select all text in the current page
							Window ("hwnd:="& ghwnd).Type micCtrlDwn + "c" + micCtrlUp	'Copy the whole text in clipboard

							strPageBody= clipboard.GetText
							clipboard.Clear
                            Set clipboard= Nothing

							If strPageBody<>"" Then
				
															CaptureContentOfWebPage = strPageBody
							else
															CaptureContentOfWebPage = ""

								End if 

					End if 
					set oShell= Nothing
				End If
End Function

'Function CaptureContentOfWebPage(strShortLinkURL)

'				strURL=strShortLinkURL
'                If Browser("title:=.*"& strURL &".*").Exist(1) then
'                                                strPageText= Browser("title:=.*"& strURL &".*").object.document.outerhtml
'												'strPageText= Browser("title:=.*"& strURL &".*").object.Document.Body.innerHTML
'                                                aSplit1 =split(strPageText,"<PRE>")
'                                                aSplit2 = split(aSplit1(1),"</PRE>")
'                                                CaptureContentOfWebPage = aSplit2(0)
'
'                else
'                                                CaptureContentOfWebPage = ""
'                End if 
'End Function







'**********************************************************************************************************************************************************************
'Name of the Function: ClickButtonwithoutValidation(formShortTitle,buttonDescriptionOrLabelOrDeveloperName)
'Author : TCS
'Date : 06.01.2011
'Description               : Click a Button in Oracle Form       
'Input Parameters : formShortTitle : Short Title Property of the Oracle Form
' buttonDescriptionOrLabel : Description / Label Property of the Button 
' (Choose which one is available. Can choose either  in case both are present)
'Output Parameters : True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function ClickButtonwithoutValidation(formShortTitle,buttonDescriptionOrLabelOrDeveloperName)
If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		startTime=Timer()
		stepName="Click Button"
		inputParameter="<b>Short Title of the Form : </b>" & formShortTitle & "<br><b>Button Description/Label : </b>" & buttonDescriptionOrLabelOrDeveloperName
		strStepDescription= "Click the Button [ " & buttonDescriptionOrLabelOrDeveloperName & " ] in the form [ " & formShortTitle & " ]"
		On Error Resume Next
		Dim objButton,intSetFlag
		intSetFlag=1

		If OracleFormWindow("short title:="& formShortTitle).OracleButton("description:="& buttonDescriptionOrLabelOrDeveloperName).Exist(gObjectTimeoutLimit) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle).OracleButton("description:="& buttonDescriptionOrLabelOrDeveloperName)
				intSetFlag=0
		ElseIf OracleFormWindow("short title:="& formShortTitle).OracleButton("label:="& buttonDescriptionOrLabelOrDeveloperName).Exist(gObjectTimeoutLimit) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle).OracleButton("label:="& buttonDescriptionOrLabelOrDeveloperName)
				intSetFlag=0
		ElseIf OracleFormWindow("short title:="& formShortTitle).OracleButton("developer name:="& buttonDescriptionOrLabelOrDeveloperName).Exist(gObjectTimeoutLimit) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle).OracleButton("developer name:="& buttonDescriptionOrLabelOrDeveloperName)
				intSetFlag=0
		Else
				status="FAIL"
				Flag=1
				message="[ " & buttonDescriptionOrLabelOrDeveloperName &"] Button does not Exist."
				blnObjectError=True
				Call ReporterFunction(strLibraryFileName,"ClickButton","1",stepName,message)
		End If

		If intSetFlag=0 Then
			If objButton.GetROProperty("enabled") Then
				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
						ImagePath=CaptureScreenshot(objButton,strStepDescription)
				End if
			objButton.Click
			If  Not blnExceptionFlag Then
			status="DONE"
			
			message="[ " & buttonDescriptionOrLabelOrDeveloperName &"] Button clicked Successfully."
			Call ReporterFunction(strLibraryFileName,"ClickButton","2",stepName,message)
			else
			Flag=1
			status="FAIL"
			message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
			Call ReporterFunction(strLibraryFileName,"ClickButton","1",stepName,message) 
			End If     
			Else
			status="FAIL"
			Flag=1
			message="[ " & buttonDescriptionOrLabelOrDeveloperName &"] Button is Disabled."
			blnObjectError=True
			  Call ReporterFunction(strLibraryFileName,"ClickButton","1",stepName,message)
			End If
End If 
Set objButton=Nothing
'endTime=Timer()
'ExeTime = FormatNumber(endTime - startTime,3)
'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

		If Flag =1  Then
			ClickButtonwithoutValidation = message
			blnMainFailFlag = True
			ImagePath=CaptureScreenshot(objButton,message)
		Else
				ClickButtonwithoutValidation = True
		End If
		If blnDefault_eSwiftReporting Then  
				Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
End if 
End Function

'**********************************************************************************'***********************************************************************************
'Name of the Function   : EnterTextTableWithoutValidation
'Author		     					  :TCS
'Date			 				     :06/12/2013
'Description		          : Entering an invalid data in a field of a table
'Input Parameters	     : formShortTitle->Form window short title
'										 		 tableBlockName->blockName of the oracle table
'													 dataRowNo->RowNumber
'														 dataColumnName->ColumnName  of the field    
'															 valueToEnter ->value which will be entered                                   
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'***********************************************************************************

Function EnterTextTableWithoutValidation(formShortTitle,tableBlockName,dataRowNo,dataColumnName,valueToEnter)
 If Not Environment.Value("blnFatalError") Then
						 Dim blnObjectError:	blnObjectError=False
						'startTime=timer()
						stepName="Entering Data  under  a table column "
						inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br> <b>Block Name of Oracle table:</b> "& tableBlockName & "<br><b> Row Number: </b>" & dataRowNo &"<br> <b>Name of the column : </b>" & dataColumnName &"<br> <b>Value : </b>" & valueToEnter
						strStepDescription= "Enter the text [ " & valueToEnter & " ] in the table [ " & tableBlockName & " ] at Row number [ " & dataRowNumber & " ] and Column Number [ " & dataColumnNumber & " ]"
						On error resume next
						If  OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit)  Then
												Set objTable = OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName)
												blnObjectFound = True
																												Else
																					status="FAIL"
																					Flag=1
                                                                                    blnObjectError=True
																					message="Given Text field [ " & textFieldPromptOrDescription & " ]  not found"
																				   Call ReporterFunction(strLibraryFileName,"EnterTextForm","1",stepName,message)
																    End If
									
									
																	If  blnObjectFound = True  Then 
																								If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																															ImagePath=CaptureScreenshot(objTable,strStepDescription)
																														End if
																								objTable.EnterField dataRowNo,dataColumnName,valueToEnter
																								strErrorFormName = formShortTitle
																							
			
																								
																														status="DONE"
																														
																														message="Value to enter : [ " & valueToEnter & " ]"
																														Call ReporterFunction(strLibraryFileName,"EnterTextTableWithoutValidation","2",stepName,message)
																								Else 
																														
																														status="FAIL"
																														Flag=1
																														message="<br> Unexpected Error Encountered After Entering Text in Form  </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																														Call ReporterFunction(strLibraryFileName,"EnterTextTableWithoutValidation","1",stepName,message)
																								End If
																								
																				
																	End if 
							


					
					
								
						If Flag =1  Then
							EnterTextTableWithoutValidation = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTable,message)
						Else
								EnterTextTableWithoutValidation = True
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
	
End Function


'**********************************************************************************'***********************************************************************************
'Name of the Function   :SaveWithoutValidation
'Author		     					  :TCS
'Date			 				     :01.01.2014
'Description		          : Selects Save From Menu without any validation
'Input Parameters	     : formShortTitle,menuPath
'Output Parameters       :
'****************************************************************************************************************************************************************************

Public Function SaveWithoutValidation(formShortTitle,menuPath)
   If Not Environment.Value("blnFatalError") Then
    Dim blnObjectError:   blnObjectError=False
    'startTime=Timer()
    inputParameter="<b>Short Title of the Form : </b>"& formShortTitle &"<br><b>Menu Path : </b>"& menuPath
    strStepDescription= "Save the Form [ " & formShortTitle & " ] without validation"
    On error resume next
        If  OracleFormWindow("short title:="& formShortTitle).Exist(gObjectTimeoutLimit) Then 
                  If OracleFormWindow("short title:="& formShortTitle).GetROProperty("enabled") Then
                  Set objForm= OracleFormWindow("short title:="& formShortTitle)
				  If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
						ImagePath=CaptureScreenshot(objForm,strStepDescription)
				   End if
                  OracleFormWindow("short title:="& formShortTitle).SelectMenu menuPath 
		           stepName="Save Without Validation"
                   message="Saved"
                   status="DONE"
                   
                   Call ReporterFunction(strLibraryFileName,"SaveWithoutValidation","2",stepName,message)
		           Else 
                     stepName="Save without validation"
                    message="Oracle Form Disabled."
                   Flag=1
                   status="FAIL"
		           End If
		  Else 
		  message="Oracle Form not found."
          Flag=1
          status="FAIL"
	 End If

				If Flag =1  Then
					SaveWithoutValidation = message
					blnMainFailFlag = True
					ImagePath=CaptureScreenshot(objForm,message)
				Else
						SaveWithoutValidation = True
				End If
				If blnDefault_eSwiftReporting Then  
						Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If

End If 
 End Function


'**********************************************************************************'***********************************************************************************
'Name of the Function   :EnterTextFormWithoutValidation
'Author		     					  :TCS
'Date			 				     :01.01.2014
'Description		          : Enters Text in the 'form' field without any validation
'Input Parameters	     : formShortTitle,textFieldPromptOrDescription,textFieldIndex,valueToEnter)
'Output Parameters       :
'****************************************************************************************************************************************************************************
Function EnterTextFormWithoutValidation(formShortTitle,textFieldPromptOrDescription,textFieldIndex,valueToEnter) 
   
    If Not Environment.Value("blnFatalError") Then
								   Dim blnObjectError,blnObjectFound

								   blnObjectError=False
								   blnObjectFound = False
									'startTime=timer()
									stepName="Enter Text "
									inputParameter="<b> Form:</b>"& formShortTitle &"<br><b> Text Box :</b>"& textFieldPromptOrDescription &"<br> <b>Value to enter : </b>" & valueToEnter 
									strStepDescription= "Enter the text [ " & valueToEnter & " ] in the Text field [ " & textFieldPromptOrDescription & " ] in the form [ " & formShortTitle & " ]"
									On Error Resume Next
																	If  OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
																				blnObjectFound = True 
																	Elseif OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:="& textFieldPromptOrDescription,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
																				blnObjectFound = True 
																	Elseif OracleFormWindow("short title:="& formShortTitle).OracleTextField("developer name:="& textFieldPromptOrDescription,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=OracleFormWindow("short title:="& formShortTitle).OracleTextField("developer name:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
																				blnObjectFound = True 
																	Else
																					status="FAIL"
																					Flag=1
                                                                                    blnObjectError=True
																					message="Given Text field [ " & textFieldPromptOrDescription & " ]  not found"
																				   Call ReporterFunction(strLibraryFileName,"EnterTextForm","1",stepName,message)
																    End If
									
									
																	If  blnObjectFound = True  Then 
																					If  objTextField.GetROProperty("editable") Then
                                                                                                objTextField.Enter valueToEnter
																								If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																															ImagePath=CaptureScreenshot(objTextField,strStepDescription)
																								End if
																								strErrorFormName = formShortTitle
																							
			
																								If  Not blnExceptionFlag Then	
																														status="DONE"
																														
																														message="Value to enter : [ " & valueToEnter & " ]"
																														Call ReporterFunction(strLibraryFileName,"EnterTextFormWithoutValidation","2",stepName,message)
																								Else 
																														
																														status="FAIL"
																														Flag=1
																														message="<br> Unexpected Error Encountered After Entering Text in Form  </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																														Call ReporterFunction(strLibraryFileName,"EnterTextFormWithoutValidation","1",stepName,message)
																								End If
																								
																					Else
																								 status="FAIL"
																								Flag=1
																								blnObjectError=True
																								message="[ " & textFieldPromptOrDescription  & " ] : text box is non-editable"
																								Call ReporterFunction(strLibraryFileName,"EnterTextFormWithoutValidation","1",stepName,message)
																							
																					End If
					
																	End if 
								
					

						
									'endTime=timer()
									'exeTime=FormatNumber(endTime - startTime,3) 
									Set objTextField=nothing
									'Call  UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)


					
									
						If Flag =1  Then
							EnterTextFormWithoutValidation = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTextField,message)
						Else
								EnterTextFormWithoutValidation = True
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
	End if 
End Function


'**********************************************************************************'***********************************************************************************
'Name of the Function   :CaptureTextListValue
'Author		     					  :TCS
'Date			 				     :01.01.2014
'Description		          : Capture Runtime Value from Oracle List
'Input Parameters	     : formShortTitle,ListPromptOrDescriptionOrDeveloperName,textFieldIndex
'Output Parameters       :Runtime Value Captured
'***********************************************************************************'***********************************************************************************
Public Function CaptureTextListValue(formShortTitle,ListPromptOrDescriptionOrDeveloperName,textFieldIndex)
  If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError
			    blnObjectError=False
				
				stepName="Capture Runtime Value from Oracle List"
				inputParameter="<b>Short Title of the Form : </b> "& formShortTitle &"<br><b>Description Or Prompt of the Text Field : </b> " & textFieldPromptOrDescriptionOrDeveloperName & "<br><b>Index of the text field : </b> " & textFieldIndex
				strStepDescription= "Capture Value from the list [ " & ListPromptOrDescriptionOrDeveloperName & " ]"
				Dim strFieldValue,intSetFlag,objText
				intSetFlag=1
			
				On Error Resume Next
				If OracleFormWindow("short title:="& formShortTitle).OracleList("description:="& ListPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Description
										Set objText=OracleFormWindow("short title:="& formShortTitle).OracleList("description:="& ListPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex)
										intSetFlag=0
				ElseIf OracleFormWindow("short title:="& formShortTitle).OracleList("prompt:="& ListPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Prompt
										Set objText=OracleFormWindow("short title:="& formShortTitle).OracleList("prompt:="& ListPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex)
										intSetFlag=0
				ElseIf OracleFormWindow("short title:="& formShortTitle).OracleList("developer name:="& ListPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Prompt
										Set objText=OracleFormWindow("short title:="& formShortTitle).OracleList("developer name:="& ListPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex)
										intSetFlag=0
				Else
										status="FAIL"
										Flag=1
										message="Given  Oracle List [ "& ListPromptOrDescriptionOrDeveloperName & " ] does not Exist."
										blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValue","1",stepName,message)
				End If

				If intSetFlag=0 Then
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																ImagePath=CaptureScreenshot(objText,strStepDescription)
															End if
										strFieldValue=objText.GetROProperty("value")
										outputParameter= strFieldValue
										blnExceptionFlag = Error_Listener ("CaptureTextFieldValue",objText)

										If Not blnExceptionFlag Then
															status="DONE"
															
															message="[ " & ListPromptOrDescriptionOrDeveloperName & " ] value Captured during run time."
															Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValue","2",stepName,message)
										 Else
															status="FAIL"
															Flag=1
															message="<br> Unexpected Error Encountered while fetching the Run Time Data</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
															Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValue","1",stepName,message)
										End If
										
				End If
				'strTextOutput=strFieldValue									'Returning the Value 
				'outputParameter=strFieldValue						'Setting Output Parameter
				Set objText=Nothing
				'endTime=Timer()
				'ExeTime = FormatNumber(endTime - startTime,3) 
				'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)


						If Flag =1  Then
							CaptureTextListValue = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
						Else
								CaptureTextListValue = strFieldValue
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
	End If	
End Function









'*********************************************************************************************************************************************************************
'Name of the Function:	SelectOracleListTabbedRegion (formShortTitle,listDeveloperName,valueToSelect)
'Author									:	TCS
'Date								:	27.09.2011
'Description					:	Selecting a value from a Oracle List
'Input Parameters        :	formShortTitle : Short Title Property of the Oracle Form
'												listDeveloperName : Developer Name Property of the Oracle List
'												valueToSelect : Value to be Selected from the List
'Output Parameters 	: Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************

Public Function SelectOracleListTabbedRegion (formShortTitle,strTabbedRegionLabel,iTabbedRegionIndex,DeveloperNameOrDescription,valueToSelect)
	Dim blnObjectFound :blnObjectFound = False 
	Dim blnObjectError: blnObjectError= False
	If Not Environment.Value("blnFatalError") Then
									'startTime=Timer()
									stepName="Select from List"
									inputParameter="<b>Form Short Title :</b>" & formShortTitle &"<br><b>List Developer Name : </b>"& listDeveloperName &"<br><b>Value to Select : </b>"& valueToSelect
									strStepDescription= "Select the value [ " & valueToSelect & " ] from the list [ " & DeveloperNameOrDescription & " ] in the Tabbed region [ " & strTabbedRegionLabel & " ]" 
									On Error Resume Next
									If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& strTabbedRegionLabel,"index:=" & iTabbedRegionIndex).OracleList("developer name:="& DeveloperNameOrDescription).Exist(gObjectTimeoutLimit) Then
											Set objOracleList= OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& strTabbedRegionLabel,"index:=" & iTabbedRegionIndex).OracleList("developer name:="& DeveloperNameOrDescription)
											blnObjectFound = True
									ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& strTabbedRegionLabel,"index:=" & iTabbedRegionIndex).OracleList("description:="& DeveloperNameOrDescription).Exist(gObjectTimeoutLimit) Then
											Set objOracleList= OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& strTabbedRegionLabel,"index:=" & iTabbedRegionIndex).OracleList("description:="& DeveloperNameOrDescription)
											blnObjectFound = True
									Else
											status="FAIL"
											Flag=1
											blnObjectError=True
											message="Given Oracle List Box [ " & DeveloperNameOrDescription & " ]  not found"
											Call ReporterFunction(strLibraryFileName,"SelectOracleListTabbedRegion","1",stepName,message)
									End if 
									 If blnObjectFound = True Then
														If objOracleList.GetROProperty("enabled") Then
															If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																					ImagePath=CaptureScreenshot(objOracleList,strStepDescription)
																				End if
																		objOracleList.Select valueToSelect
																		If trim(objOracleList.GetROProperty("selected item"))=trim(valueToSelect) Then
																				status="DONE"
																				
																				message="[ " & valueToSelect & " ] has been Selected Successfully."
																				Call ReporterFunction(strLibraryFileName,"SelectOracleListTabbedRegion","2",stepName,message)
																		Else
																				status="FAIL"
																				Flag=1
																				message="[ " & valueToSelect & " ] is an Invalid Selection."
																				Call ReporterFunction(strLibraryFileName,"SelectOracleListTabbedRegion","1",stepName,message)
																		End If
														Else
																		blnObjectError= True
																		status="FAIL"
																		Flag=1
																		message="[ " & DeveloperNameOrDescription & " ] is Disabled."
																		Call ReporterFunction(strLibraryFileName,"SelectOracleListTabbedRegion","1",stepName,message)
														End If
									Else
														blnObjectError= True
														status="FAIL"
														Flag=1
														message="[ " & DeveloperNameOrDescription & " ] Not Found"
														Call ReporterFunction(strLibraryFileName,"SelectOracleListTabbedRegion","1",stepName,message)
									End If

					
										'endTime = Timer()
										'ExeTime = FormatNumber(endTime - startTime,3)
									  'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
									
						If Flag =1  Then
							SelectOracleListTabbedRegion = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objOracleList,message)
						Else
								SelectOracleListTabbedRegion = True
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
			End If
End Function



'**********************************************************************************'***********************************************************************************
'Name of the Function	 ->ClickTextTableField
'Author									->TCS
'Date									 ->29-Nov-2012
'Description					   ->Clicks a TextField in Tabbed Region Table
'Output Parameters		  ->Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'***********************************************************************************
Function ClickTextTableField(formShortTitle,TableBlockName,DataRowNo,DataColumnName)
	  If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError:	blnObjectError=False
				'startTime=timer()
				stepName="Clicking on a Text Field in a Tabbed Table region"
				inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br><b>Block Name of Oracle table:</b> "& TableBlockName & "<br><b> Row Number: </b>" & DataRowNo &"<br> <b>Name of the column : </b>" & DataColumnName
				strStepDescription= "Click the text Field at the row number [ " & DataRowNo & " ] and Column Number [ " & DataColumnName & " ] in the table [ " & TableBlockName & " ]"
				intSetFlag=1
				On error resume next		
						If  OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit)Then
											Set objTable = OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName)
                                            intSetFlag=0   
						Else
										  status="FAIL"
										  Flag=1
										  message="Table Text Field " & DataColumnName & " object Not Found."
											blnObjectError = True
										 Call ReporterFunction(strLibraryFileName,"ClickTextTableField","1",stepName,message)
						End If
						 If intSetFlag=0 Then
										 If  objTable.GetROProperty("enabled") Then
											  If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																					ImagePath=CaptureScreenshot(objTable,strStepDescription)
																			   End if
													objTable.Click
																	blnExceptionFlag = Error_Listener ("ClickTextTableField",objTable)
																		If Not blnExceptionFlag Then
																			   status="DONE"
																			  
																			   message="[ " & DataColumnName & " ] Clicked Sucessfully."
																			   Call ReporterFunction(strLibraryFileName,"ClickTextTableField","2",stepName,message)
																		 Else
																				status="FAIL"
																				Flag=1
																				message="<br> Unexpected Error Encountered: </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																				Call ReporterFunction(strLibraryFileName,"ClickTextTableField","1",stepName,message)
																		End If
														 
										   Else
																		 status="FAIL"
																		 Flag=1
																		 message="Text Table Field " & DataColumnName & " is  Disabled."
																		   blnObjectError = True
																		Call ReporterFunction(strLibraryFileName,"ClickTextTableField","1",stepName,message)

										  End If
						End If
						Set objTable=Nothing
						'endTime=Timer()
						'ExeTime = FormatNumber(endTime - startTime,3) 
						'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

						 
						If Flag =1  Then
							ClickTextTableField = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTable,message)
						Else
								ClickTextTableField = True
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
   End If
End Function





'*********************************************************************************************************************************************************************
'Name of the Function	:	CaptureTextWebEdit(browserName,webEditName,webEditIndex)
'Author									:	TCS
'Date                             		:	11.10.2013
'Description                    :	Capture text value of webedit

'**********************************************************************************************************************************************************************

Public Function CaptureTextWebEdit(browserName,webEditName,webEditIndex)
    If Not Environment.Value("blnFatalError") Then
							Dim blnObjectError:blnObjectError=False
							Dim strCapturedText
							'startTime=Timer()
							stepName="Capture Text in WebEdit"
							inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Web Edit Name : </b>" & webEditName &"<br><b>Web Edit Index : </b>" & webEditIndex
							strStepDescription= "Capture the value from the WebEdit [ " & webEditName & " ] in the browser [ " & browserName & " ]"
							On Error Resume Next
							
'							Set obj= Description.Create()
'							obj("micclass").value="Page"
'							'Set childObj=Browser("name:="& browserName).ChildObjects(obj)
'							'pageTitle=childObj(0).getroproperty("title")
							pageTitle = browserName

							If  Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& webEditName , "index:=" & webEditIndex).Exist(gObjectTimeoutLimit) Then
											If  Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& webEditName , "index:=" & webEditIndex).GetROProperty("visible") Then
																	strCapturedText =	Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& webEditName , "index:=" & webEditIndex).GetROProperty("value")
																	Set objWebElement=Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& webEditName , "index:=" & webEditIndex)
																	If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																										ImagePath=CaptureScreenshot(objWebElement,strStepDescription)
																									End if											
																	outputParameter= strCapturedText
																	blnExceptionFlag = Error_Listener ("CaptureTextWebEdit",objWebElement)
																																			'// end
					
																	If Not blnExceptionFlag Then
																									status="DONE"
																									
																									message="Inner Text Captured during Runtime."
																									Call ReporterFunction(strLibraryFileName,"CaptureTextWebEdit","2",stepName,message)
																	Else
																								   status="FAIL"
																									Flag=1
																									message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																									Call ReporterFunction(strLibraryFileName,"CaptureTextWebEdit","1",stepName,message)
								
																	End If
									'								outputParameter=strCapturedText
											Else
																	status="FAIL"
																	Flag=1
																	message="Web Edit is not Visible."
																	 blnObjectError=True
																	Call ReporterFunction(strLibraryFileName,"CaptureTextWebEdit","1",stepName,message)
											End If
            
							Else
											status="FAIL"
											Flag=1
											message="Given WebEdit Not Found"
											 blnObjectError=True
											Call ReporterFunction(strLibraryFileName,"CaptureTextWebEdit","1",stepName,message)
							End If
							
							outputParameter=strCapturedText						'Setting Output Parameter
							Set objWebElement=Nothing
							'endTime = Timer()
							'ExeTime = FormatNumber(endTime - startTime,3)
							'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)


							If Flag =1  Then
							CaptureTextWebEdit = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebElement,message)
							Else
									CaptureTextWebEdit = strCapturedText
							End If
							If blnDefault_eSwiftReporting Then  
									Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
							End If
End If	
End Function



Function DeleteBlankLogFile()
   FileName =gstrScenarioResultFolder & "\" & "e-Swift LogFile" &".txt"
	Set fs = CreateObject("Scripting.FileSystemObject")
	If fs.FileExists(FileName) Then
	    Set file = fs.GetFile(FileName)
	    If file.Size = 0 Then
		fs.DeleteFile(FileName)
	    End if 
	End If
End Function





'***************************************************************************************************************************************
'Name of the Function   : RefreshRequestByProcessNameAndGetPhaseAndStatus
'***************************************************************************************************************************************


Function FindRequestRowNo(strRequestName,iRequestNumber)
				Dim blnRequestFound :blnRequestFound = False
				iMaxRow   = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetROProperty("visible rows")
				For iRow=1 to iMaxRow
								strProcessName = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Name")
								iCurrentRequestID=OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Request ID")
								If  strProcessName  = strRequestName Then
									If  iRequestNumber <>"" then
															If  iRequestNumber = iCurrentRequestID Then
																		FindRequestRowNo =iRow
																		blnRequestFound = True
															End If
									else
															FindRequestRowNo =iRow
															blnRequestFound = True
									End If
									Exit For 
								End if 
				Next
				If  blnRequestFound = False Then
						FindRequestRowNo = True
				End If
End Function



Function RefreshRequestByProcessNameAndGetPhaseAndStatus(strExpectedProcessName,maxTimeOut,ByRef iRequestID ,ByRef strPhase,Byref strStatus)
If Not Environment.Value("blnFatalError") Then
							   Dim blnRequestFound,blnContinue,blnFirstTime
							   blnContinue= False
							   blnRequestFound=False
							   blnFirstTime = True

								Do
										If blnFirstTime Then
													iRow = FindRequestRowNo(strExpectedProcessName,"")
													blnFirstTime = False
										else
													iRow = FindRequestRowNo(strExpectedProcessName,iRequestID)	
										End If
										If iRow<>"" Then
															blnRequestFound = True 
															Call OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").SetFocus(iRow,"Request ID")
															iRequestID=OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Request ID")
															strPhase= OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Phase")

															If strPhase= "Completed" then
																					blnRequestFound=True
																					strStatus = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Status") 
																					iRequestID=OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Request ID")
																					
															Else
																					iCnt =1
																					Do
																									iCnt =iCnt +1
																									OracleFormWindow("short title:=Requests").OracleButton("description:=Refresh Data").Click
																									iRow = FindRequestRowNo(strExpectedProcessName,iRequestID)
																									Call OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").SetFocus(iRow,"Request ID")
																									wait(1)
																									iWaitCounter= iWaitCounter +1
																									iRow = FindRequestRowNo(strExpectedProcessName,iRequestID)
																									strPhase= OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Phase")
																									strStatus = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Status") 
																					
																					Loop Until (strPhase = "Completed") OR (iCnt >5 ) 
															End if 
										else
															blnRequestFound  = False					
										End If
								Loop Until (strPhase = "Completed") OR (iWaitCounter >maxTimeOut) or (blnRequestFound = False)



								    If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
													  ImagePath=CaptureScreenshot(stepName,inputParameter )
								    ElseIf Flag=1 Then 
													ImagePath=CaptureScreenshot(stepName,inputParameter )
								    End If



								If blnRequestFound AND strStatus ="Normal" AND strPhase ="Completed" Then
											RefreshRequestByProcessNameAndGetPhaseAndStatus = True
								elseif blnRequestFound and strStatus ="Error" Then
											RefreshRequestByProcessNameAndGetPhaseAndStatus = "Status for Process Name ' "& strExpectedProcessName &" '  Found : =  'Error' "
								elseif blnRequestFound = False Then
											RefreshRequestByProcessNameAndGetPhaseAndStatus ="Given ProcessName ' "& strExpectedProcessName &" ' Not Found"	
								elseif iWaitCounter > maxTimeOut and blnContinue=False then
											RefreshRequestByProcessNameAndGetPhaseAndStatus = "Given ProcessName ' "& strExpectedProcessName &" ' did not complete within maximum timout set at  [ "& maxTimeOut & "  ] seconds "
								else
											RefreshRequestByProcessNameAndGetPhaseAndStatus = "Given ProcessName ' "& strExpectedProcessName &" '  has Status = " &strStatus & " , Phase = " & strPhase
								End If
		End If
End Function



Function RefreshRequestByProcessName(strExpectedProcessName,maxTimeOut,ByRef iRequestID )
If Not Environment.Value("blnFatalError") Then

							   Dim blnRequestFound,blnContinue,blnFirstTime
							   blnContinue= False
							   blnRequestFound=False
							   blnFirstTime = True

								Do
										If blnFirstTime Then
													iRow = FindRequestRowNo(strExpectedProcessName,"")
													blnFirstTime = False
										else
													iRow = FindRequestRowNo(strExpectedProcessName,iRequestID)	
										End If
										If iRow<>"" Then
															blnRequestFound = True 
															Call OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").SetFocus(iRow,"Request ID")
															iRequestID=OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Request ID")
															strPhase= OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Phase")

															If strPhase= "Completed" then
																					blnRequestFound=True
																					strStatus = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Status") 
																					iRequestID=OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Request ID")
																					
															Else
																					iCnt =1
																					Do
																									iCnt =iCnt +1
																									OracleFormWindow("short title:=Requests").OracleButton("description:=Refresh Data").Click
																									iRow = FindRequestRowNo(strExpectedProcessName,iRequestID)
																									Call OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").SetFocus(iRow,"Request ID")
																									wait(1)
																									iWaitCounter= iWaitCounter +1
																									iRow = FindRequestRowNo(strExpectedProcessName,iRequestID)
																									strPhase= OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Phase")
																									strStatus = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Status") 
																					
																					Loop Until (strPhase = "Completed") OR (iCnt >5 ) 
															End if 
										else
															blnRequestFound  = False					
										End If
								Loop Until (strPhase = "Completed") OR (iWaitCounter >maxTimeOut) or (blnRequestFound = False)



								    If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
													  ImagePath=CaptureScreenshot(stepName,inputParameter )
								    ElseIf Flag=1 Then 
													ImagePath=CaptureScreenshot(stepName,inputParameter )
								    End If



								If blnRequestFound and strStatus ="Normal" and strPhase ="Completed" Then
											RefreshRequestByProcessName = True
								elseif blnRequestFound and strStatus ="Error" Then
											RefreshRequestByProcessName = "Status for Process Name ' "& strExpectedProcessName &" '  Found : =  'Error' "
								elseif blnRequestFound = False Then
											RefreshRequestByProcessName ="Given ProcessName ' "& strExpectedProcessName &" ' Not Found"	
								elseif iWaitCounter > maxTimeOut and blnContinue=False then
											RefreshRequestByProcessName = "Given ProcessName ' "& strExpectedProcessName &" ' did not complete within maximum timout set at  [ "& maxTimeOut & "  ] seconds "
								else
											RefreshRequestByProcessName = "Given ProcessName ' "& strExpectedProcessName &" '  has Status = " &strStatus & " , Phase = " & strPhase
			End if 
	End If
End Function




'************************************************************************************************************************************************************************
'Name of the Function   : VerifyBlankField

'**************************************************************************************************************************************************************************


Function VerifyBlankField(CapturedData)

           If  CapturedData="" Then
                                           Status="DONE"
											message="The Selected Field is empty"
											Call ReporterFunction(strLibraryFileName,"VerifyBlankField","2",stepName,message)

	       Else 
	       Flag=1
           status="FAIL"
	       message =  "The Selected Field is not empty"
	       Call ReporterFunction(strLibraryFileName,"VerifyBlankField","1",stepName,message)	
 
           End If
If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
				 ImagePath=CaptureScreenshot(stepName,inputParameter )
				 ElseIf Flag=1 Then 
								ImagePath=CaptureScreenshot(stepName,inputParameter )
				 End If
				 If Flag =1  Then
								VerifyBlankField = message
								'blnMainFailFlag = True
				Else
								VerifyBlankField = True
				End If
End Function


'************************************************************************************************************************************************************************
'Name of the Function   : MaximiseActiveWindow

'***************************************************************************************************************************************************************************
Function MaximizeActiveWindow
   Set oShell = CreateObject("WScript.Shell")
oShell.SendKeys "% x"
set oShell= Nothing
End Function


Function RestoreActiveWindow()

	Set oShell = CreateObject("WScript.Shell")
	oShell.SendKeys "% r"
	set oShell= Nothing
End Function

Function MinimizeActiveWindow()

	Set oShell = CreateObject("WScript.Shell")
	oShell.SendKeys "% n"
	set oShell= Nothing
End Function



'************************************************************************************************************************************************************************
'Name of the Function   : FindValueinArray
'Author		     					  :TCS
'Date			 				     :19/11/2013
'Description		          : Get the list of content of LOV  in an array
'Input Parameters	     :strValue: Vlue to find in an Arrar,aMainArray:Array in which value needs to find, blnSubstringMatch set as FALSE
'Output Parameters        :Boolean True on Success ,Boolean False on Failure
'***************************************************************************************************************************************************************************
Function FindValueinArray(strValue,aMainArray,blnSubstringMatch)
   If blnSubstringMatch= "" or ucase(blnSubstringMatch)= "FALSE" Then
	   blnSubstringMatch= False
	elseif ucase(blnSubstringMatch)= "TRUE" then
		 blnSubstringMatch= True
		else
		 blnSubstringMatch= False
   End If

If Ubound(aMainArray)>0 Then
	   For i=0 to ubound(aMainArray)
		   If blnSubstringMatch= False Then
							If trim(aMainArray(i))= trim(strValue) Then
								FindValueinArray= true
								Exit Function
							End If
			Else
							If instr(trim(aMainArray,i),trim(strValue)) Then
									FindValueinArray= true
									Exit Function
							End If			
    	   End If
	   Next
End If
	FindValueinArray= False	
End Function


'************************************************************************************************************************************************************************
'Name of the Function   : GetListContentOfLOV
'Author		     					  :TCS
'Date			 				     :19/11/2013
'Description		          : Get the list of content of LOV  in an array
'Input Parameters	     :LOV title
'Output Parameters        :LOV array on Success 
'****************************************************************************************************************************************************************************
Function GetListContentOfLOV(strLOVTitle)
		If  OracleListOfValues("title:="& strLOVTitle).exist(1) Then
            strListContent=OracleListOfValues("title:="& strLOVTitle).GetROProperty("list content")
			aTemp= split(strListContent,";")
			GetListContentOfLOV=aTemp
	  End If
End Function



'************************************************************************************************************************************************************************
'Name of the Function   : SelectCheckBox
'Author		     					  :TCS
'Date			 				     :14/09/2011
'Description		          : Select and unselect checkbox based on the value specified
'Input Parameters	     :formShortTitle->ShortTitle of the form.'
											'checkBoxDescription->description or DeveloperName  property of checkbox 
												'checkBoxOption-> Yes/No/True /False/T/F
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'****************************************************************************************************************************************************************************


Function SelectCheckBox(formShortTitle,checkBoxDescriptionorDeveloperName,checkBoxOption)
    If Not Environment.Value("blnFatalError") Then
						Dim blnObjectError:	blnObjectError=False
						Dim blnObjExist : blnObjExist=False
					   'startTime=timer()
						stepName="Check/Uncheck Check Box "
						inputParameter="Short Title of  Form:"& formShortTitle &"<br>Check Box : "& checkBoxDescriptionorDeveloperName& "<br> Option: " & checkBoxOption 
						strStepDescription= "Select the option [ " & checkBoxOption & " ] in the CheckBox [ " & checkBoxDescriptionorDeveloperName & " ] in the form [ " & formShortTitle & " ]"
						On Error Resume Next
						If  OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("description:="& checkBoxDescriptionorDeveloperName).Exist(gObjectTimeoutLimit) Then
								   Set objCheckBox=OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("description:="& checkBoxDescriptionorDeveloperName)
								   blnObjExist=True
						Elseif OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("developer name:="& checkBoxDescriptionorDeveloperName).Exist(gObjectTimeoutLimit) Then
                                       Set objCheckBox=OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("developer name:="& checkBoxDescriptionorDeveloperName)
									   blnObjExist=True
						Else
									    Flag=1
										Status="FAIL"
										message=checkBoxDescriptionorDeveloperName & " : CheckBox not found"
										blnObjectError=True
									Call ReporterFunction(strLibraryFileName,"SelectCheckBox","1",stepName,message)
						End if

									 If blnObjExist Then
									
                                       							If objCheckBox.GetROProperty("Enabled")  Then
																		If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																									ImagePath=CaptureScreenshot(objCheckBox,strStepDescription)
																								End if
																		If Ucase(checkBoxOption)="YES" or Ucase(checkBoxOption)="TRUE" Then
																				If   objCheckBox.IsSelected Then
																								message="["& checkBoxDescriptionorDeveloperName & "] CheckBox already selected"
																				Else
																								'if not already selected ,select it
																								objCheckBox.Select
																								 message="Checkbox [" & checkBoxDescriptionorDeveloperName &"] selected"
																				End If
																ElseIf Ucase(checkBoxOption)="NO" or Ucase(checkBoxOption)="FALSE" Then
																								'If already selected  clear /uncheck it
																								If  objCheckBox.IsSelected Then
																										  objCheckBox.Clear
																											  message="["& checkBoxDescriptionorDeveloperName & "] CheckBox  unchecked"
																								Else
																											 message="["& checkBoxDescriptionorDeveloperName & "] CheckBox already unchecked"
																							   End If
																Else
																								status="FAIL"
																								Flag=1
																								message="[ " & checkBoxOption & " ] Invalid Option."
																								'blnObjectError=True
																								Call ReporterFunction(strLibraryFileName,"SelectCheckBox","1",stepName,message)
																End If
												 End If
																blnExceptionFlag = Error_Listener ("SelectCheckBox",objCheckBox)
																If  Not blnExceptionFlag Then
																								status="DONE"
																							
																								Call ReporterFunction(strLibraryFileName,"SelectCheckBox","2",stepName,message)
																else
																								Flag=1
																								status="FAIL"
																								message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																								Call ReporterFunction(strLibraryFileName,"SelectCheckBox","1",stepName,message)
																								
																End If
								   
									 Else
															 status="FAIL"
															 Flag=1
															message=checkBoxDescriptionorDeveloperName & " : CheckBox disabled"
															'blnObjectError=True
															Call ReporterFunction(strLibraryFileName,"SelectCheckBox","1",stepName,message)
								  End If

'				   Else
'									status="FAIL"
'									Flag=1
'									message=checkBoxDescriptionorDeveloperName & " : CheckBox not found"
'									blnObjectError=True
'									Call ReporterFunction(strLibraryFileName,"SelectCheckBox","1",stepName,message)
'				  End If
				 Set objCheckBox=Nothing
				'endTime=Timer()
				 'exeTime=FormatNumber(endTime - startTime,3) 
				'Call  UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)


						If Flag =1  Then
							SelectCheckBox = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objCheckBox,message)
						Else
								SelectCheckBox = True
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
End If 

End Function




'**********************************************************************************'***********************************************************************************
'Name of the Function : CaptureStatusLineMessage
'Author		     					  :TCS
'Date			 				     :18.11.2013
'Description		          : Return Status Line message 
'Output Parameters       :Status line message on Success ; Failure messsage on Fail
'***********************************************************************************'***********************************************************************************

Function CaptureStatusLineMessage()
	If OracleStatusLine("micclass:=OracleStatusLine").Exist( gObjectTimeoutLimit) Then
								 If OracleStatusLine("micclass:=OracleStatusLine").getROProperty("message")<>"" Then 
									 StatusBarMessage=OracleStatusLine("micclass:=OracleStatusLine").getROProperty("message")
									 CaptureStatusLineMessage=StatusBarMessage
									 else
									 CaptureStatusLineMessage="Status Line message is null"
								 End If
	 End If
End Function

'**********************************************************************************'***********************************************************************************
'Name of the Function : CompareAndVerifyData
'Author		     					  :TCS
'Date			 				     :18.11.2013
'Description		          : If two data do not match then the test fails 
'Output Parameters       :Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'***********************************************************************************


Function CompareAndVerifyData(ExpectedData,sActualValue)
	'startTime=Timer()
	stepName="Compare and Verify Expected and Actual Data"
	inputParameter=" Expected Data  [ <b>"  & ExpectedData &" ] </b><br> Actual Data : <b>[ " & sActualValue & " ] </b>"
	'blnCaptureFlag =  True
	ExpectedData= cstr(ExpectedData)
	sActualValue= cstr(sActualValue)
    If blnTrueIfFullStringMatch Then
					If ExpectedData =  sActualValue Then
								status="PASS"
								message="Expected Data :  [ "&  ExpectedData  & " ] : Matches with Actual  Value : [ " & sActualValue & " ] "
								Call ReporterFunction(strLibraryFileName,"CompareAndVerifyData","2",stepName,message)  
							
					Else
								Flag =1
								status="FAIL"
								message="Expected Data :  [ "&  ExpectedData  & " ] : DOES NOt MATCHwith Actual  Value : [ " & sActualValue & " ] "
									blnObjectError = True
										 Call ReporterFunction(strLibraryFileName,"CompareAndVerifyData","1",stepName,message)
					End If
	else
					If Instr(sActualValue,ExpectedData) > 0 Then
									status="PASS"
									message="Expected Data :  [ "&  ExpectedData  & " ] : Matches with Actual  Value : [ " & sActualValue & " ] "
									Call ReporterFunction(strLibraryFileName,"CompareAndVerifyData","2",stepName,message)  
									
					Else
									Flag =1
									status="FAIL"
									message="Expected Data :  [ "&  ExpectedData  & " ] : DOES NOt MATCHwith Actual  Value : [ " & sActualValue & " ] "
										blnObjectError = True
										 Call ReporterFunction(strLibraryFileName,"CompareAndVerifyData","1",stepName,message)
									
					End If

					
   End If

   If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
									   ImagePath=CaptureScreenshot(stepName,inputParameter )
						ElseIf Flag=1 Then 
										ImagePath=CaptureScreenshot(stepName,inputParameter )
						End If
						If Flag =1  Then
										CompareAndVerifyData = message
										blnMainFailFlag = True
						Else
										CompareAndVerifyData = True
End If
'	End If
	'endTime=Timer()
	'ExeTime = FormatNumber(endTime - startTime,3) 
	'outputParameter= ""
	'Call UpdateResultHtml(status,inputParameter,outputParameter,strMessage,ExeTime,stepName)


End Function




'**********************************************************************************'***********************************************************************************
'Name of the Function   : ClickNotificationButtonWithoutVarification
'Author		     					  :TCS
'Date			 				     :14.10.2013
'Description		          : Approve/Decline/cancel action on Notification window if Notification window comes again for another varification 
'Input Parameters	     : notificationTitle:-title property value of the notification window   
 '                                           buttonLabelOrDescription-   Label Or Description property value of the notification window button
'Output Parameters       :Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'***********************************************************************************
Function  ClickNotificationButtonWithoutVerification(notificationTitle,buttonLabelOrDescription )
		If Not Environment.Value("blnFatalError") Then
						Dim strFunctionName :strFunctionName = "ClickNotificationButtonWithoutVerification"
						Dim blnObjectError:			   blnObjectError=False
						Dim blnObjectFound :		blnObjectFound = False
						'startTime=Timer()
						stepName="Check Notification"
						inputParameter="<b>Title of the Oracle Notification : </b>" & notificationTitle & "<br><b> Label or Description of the Button  : </b> " & buttonLabelOrDescription
						strStepDescription= "Click the Notification Button [ " & buttonLabelOrDescription & " ] in the Notification [ " & notificationTitle & " ] without validation"
						On error resume next
  
					   If  OracleNotification("title:=" & notificationTitle).OracleButton("label:=" & buttonLabelOrDescription).Exist(gObjectTimeoutLimit) Then
										Set objButtonLabelOrDescription=OracleNotification("title:=" & notificationTitle).OracleButton("label:=" & buttonLabelOrDescription)
										blnObjectFound = True
					   ElseIf OracleNotification("title:=" & notificationTitle).OracleButton("description:=" & buttonLabelOrDescription).Exist(gObjectTimeoutLimit) Then
										 Set objButtonLabelOrDescription=OracleNotification("title:=" & notificationTitle).OracleButton("description:=" & buttonLabelOrDescription)
										 blnObjectFound = True
					   Else
										status="FAIL"
										'Flag=1
										message=" Notification window Not Found."
										'blnObjectError=True
										Call ReporterFunction(strLibraryFileName,strFunctionName,"1",stepName,message)
					   End If
						If blnObjectFound = True Then
									   If objButtonLabelOrDescription.Exist(gObjectTimeoutLimit) Then 
									   					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
															ImagePath=CaptureScreenshot(objButtonLabelOrDescription,strStepDescription)
														End if
													   objButtonLabelOrDescription.Click
													   status="DONE"													   
														message="[ " & notificationTitle & " ] Notification  window closed successfully"
														Call ReporterFunction(strLibraryFileName,strFunctionName,"2",stepName,message) 	
										   End If
						End If
					   Set objButtonLabelOrDescription=Nothing
						
						If Flag =1  Then
							ClickNotificationButtonWithoutVerification = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objButtonLabelOrDescription,message)
						Else
								ClickNotificationButtonWithoutVerification = True
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
 End If
  
 End Function




'*******************************************************************************************************************************

'**********************************************************************************'***********************************************************************************
'Name of the Function	 ->ClickTextTabbedRegionTableField
'Author									->TCS
'Date									 ->14-Nov-2012
'Description					   ->Clicks a TextField in Tabbed Region Table
'Output Parameters		  ->Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'***********************************************************************************
Function ClickTextTabbedRegionTableField(formShortTitle,TabbedRegionLabel,TabbedRegionIndex,TableBlockName,DataRowNo,DataColumnName)
	  If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError:	blnObjectError=False
				'startTime=timer()
				stepName="Clicking on a Text Field in a Tabbed Table region"
				inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& TabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & TabbedRegionIndex & "<br> <b>Block Name of Oracle table:</b> "& TableBlockName & "<br><b> Row Number: </b>" & DataRowNo &"<br> <b>Name of the column : </b>" & DataColumnName
				strStepDescription= "Click the text field in the Table [ " & TableBlockName & " ] in the Tabbed region [ " & TabbedRegionLabel & " ] at Row Number [ " & DataRowNo & " ] and Column Number [ " & DataColumnName & " ]"
				intSetFlag=1
				On error resume next		
						If  OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit)Then
											Set objTable = OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTable("block name:="& tableBlockName)
                                            intSetFlag=0   
						Else
										  status="FAIL"
										  Flag=1
										  message="Tabbed Table Text Field object Not Found."
											blnObjectError = True
										 Call ReporterFunction(strLibraryFileName,"ClickTextTabbedRegionTableField","1",stepName,message)
						End If
						 If intSetFlag=0 Then
										 If  objTable.GetROProperty("enabled") Then		
											 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																					ImagePath=CaptureScreenshot(objTable,strStepDescription)
																				End if
													objTable.Click
																	blnExceptionFlag = Error_Listener ("ClickTextTabbedRegionTableField",objTable)
																		If Not blnExceptionFlag Then
																			   status="DONE"
																			   
																			   message="[ " & DataColumnName & " ] Clicked Sucessfully."
																			   Call ReporterFunction(strLibraryFileName,"ClickTextTabbedRegionTableField","2",stepName,message)
																		 Else
																				status="FAIL"
																				Flag=1
																				message="<br> Unexpected Error Encountered: </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																				Call ReporterFunction(strLibraryFileName,"ClickTextTabbedRegionTableField","1",stepName,message)
																		End If
														 
										   Else
																		 status="FAIL"
																		 Flag=1
																		 message="Text Tabbed Region Table Field  not enabled."
																		   blnObjectError = True
																		Call ReporterFunction(strLibraryFileName,"ClickTextTabbedRegionTableField","1",stepName,message)

										  End If
						End If
						Set objTable=Nothing
						'endTime=Timer()
						'ExeTime = FormatNumber(endTime - startTime,3) 
						'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

						  If Flag =1  Then
							ClickTextTabbedRegionTableField = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTable,message)
						Else
								ClickTextTabbedRegionTableField = True
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
   End If
End Function

'**********************************************************************************
'Name of the Function   : VerifyCheckBoxSelection
'Author		    				 :   TCS
'Date						     :07-NOV-2013
'Description		     : To verify if the checkbox is selected or not
'			        
'			        
'Input Parameters	     : objCheckBox,blnExpectedProperty
                                         
'Output Parameters        :
'***********************************************************************************

Function VerifyCheckBoxSelection(objCheckBox,blnExpectedProperty)
	On error resume next
	If Not Environment.Value("blnFatalError") Then
				If ucase(blnExpectedProperty)= "TRUE" Then
							blnExpectedProperty = True
				elseIf ucase(blnExpectedProperty)= "FALSE" then 
							blnExpectedProperty = False
				End If
			
				If  objCheckBox.Exist(gObjectTimeoutLimit) Then
						blnSelectedProp = objCheckBox.GetROProperty("selected")
						If  blnSelectedProp =blnExpectedProperty  Then
									VerifyCheckBoxSelection= True
							else
									VerifyCheckBoxSelection="Check Box Selection Does not match as expected"
						End If
				else
						VerifyCheckBoxSelection= "Check box does not exist"
				End If
	end if 
End Function


'**********************************************************************************
'Name of the Function   : CloseFormWithoutSaving
'Author		    				 :   TCS
'Date						     :01-NOV-2013
'Description		     : To Close a oracle form window without saving the input form data
'			        
'			        
'Input Parameters	     : formShortTitle: -Short title property value of the window,in case of multiple window input  short title property value of the parent window
                                         
'Output Parameters        :
'***********************************************************************************
Function CloseFormWithoutSaving(formShortTitle)
     If Not Environment.Value("blnFatalError") Then
								Dim blnObjectError
							      blnObjectError=False
								'startTime=Timer()
								stepName="Close Oracle Form"
								inputParameter="<b> Form Short title : </b>" & formShortTitle
								strStepDescription= "Close the Form [ " & formShortTitle & " ] without validation"
								On error resume next
							
							
								Set objFormWindow=OracleFormWindow("short title:=" & formShortTitle)
								If objFormWindow.exist(gObjectTimeoutLimit) Then 
														If blnCloseAllForms= True  Then
																objFormWindow.SelectMenu "File->Close Form"
														End If
							  
															 If objFormWindow.exist(gObjectTimeoutLimit) Then 
																					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																																			ImagePath=CaptureScreenshot(objFormWindow,strStepDescription)
																						End if
																			  objFormWindow.CloseWindow
																				 '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
																				 If OracleNotification("title:=Forms").Exist(gObjectTimeoutLimit) Then
																					 OracleNotification("title:=Forms").OracleButton("label:=No").Click 
																				 End If
																								blnExceptionFlag = Error_Listener ("CloseForm",objFormWindow)																														'// end
														
																												If Not blnExceptionFlag Then
																															If objFormWindow.Exist(1) Then
																																		status="FAIL"
																																		Flag=1
																																		message="[ " & formShortTitle & " ] form closed "
																																		blnObjectError=True
																																		Call ReporterFunction(strLibraryFileName,"CloseFormWithoutSaving","1",stepName,message)
																								
																															Else
																																		status="DONE"
																																		
																																		message="[ " & formShortTitle & " ] form closed successfully"
																																		Call ReporterFunction(strLibraryFileName,"CloseFormWithoutSaving","2",stepName,message)  
																															End If
																											Else
																														status="FAIL"
																														Flag=1
																														message="<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																														Call ReporterFunction(strLibraryFileName,"CloseFormWithoutSaving","1",stepName,message)
																											End If
																	 else					
											
																									status="DONE"
																									message="[ " & formShortTitle & " ] form closed successfully"
																									Call ReporterFunction(strLibraryFileName,"CloseFormWithoutSaving","2",stepName,message)  
																	   End If
		Else
							status="FAIL"
							Flag=1
							message="[ " & formShortTitle & " ] form does not exist"
							blnObjectError=True										
							Call ReporterFunction(strLibraryFileName,"CloseFormWithoutSaving","1",stepName,message)
		End if


			Set objFormWindow=Nothing
			'endTime=Timer()
			'ExeTime = FormatNumber(endTime - startTime,3) 
			'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

			If Flag =1  Then
				CloseFormWithoutSaving = message
				blnMainFailFlag = True
				ImagePath=CaptureScreenshot(objFormWindow,message)
			Else
					CloseFormWithoutSaving = True
			End If
			If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If
	End if
End Function

'**********************************************************************************************************************
'Name of the Function   : EnterTextFormWithDeveloperName
'Author		     					  :TCS
'Date			 				     : 15/09/2011
'Description		          : Entering a text to the text field      
'Input Parameters	     : formShortTitle->short title of oracle form window,
' 													textFieldPromptOrDescription->Description of the text field
'															textFieldIndex -> Index of the text field
' 																valueToEnter->value which will be entered
'Output Parameters        :  Boolean True on Success ; Failure messsage on Fail
'****************************************************************************************************************************
Function EnterTextFormWithDeveloperName(formShortTitle,textFieldPromptOrDescription,textFieldIndex,valueToEnter) 
    If Not Environment.Value("blnFatalError") Then
								   Dim blnObjectError,blnObjectFound
								   blnObjectError=False
								   blnObjectFound = False
									'startTime=timer()
									stepName="Enter Text "
									inputParameter="<b> Form:</b>"& formShortTitle &"<br><b> Text Box :</b>"& textFieldPromptOrDescription &"<br> <b>Value to enter : </b>" & valueToEnter 
									strStepDescription= "Enter the text [ " & valueToEnter & " ] in the text field [ " & textFieldPromptOrDescription & " ] in the form [ " & formShortTitle & " ]"
									On Error Resume Next
																	If  OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
																				blnObjectFound = True 
																	Elseif OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:="& textFieldPromptOrDescription,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
																				blnObjectFound = True 
																	Elseif OracleFormWindow("short title:="& formShortTitle).OracleTextField("developer name:="& textFieldPromptOrDescription,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=OracleFormWindow("short title:="& formShortTitle).OracleTextField("developer name:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
																				blnObjectFound = True 
																	Else
																					status="FAIL"
																					Flag=1
                                                                                    blnObjectError=True
																					message="Given Text field [ " & textFieldPromptOrDescription & " ]  not found"
																				   Call ReporterFunction(strLibraryFileName,"EnterTextFormWithDeveloperName","1",stepName,message)
																    End If
									
									
																	If  blnObjectFound = True  Then 
																					If  objTextField.GetROProperty("editable") Then
																						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																															ImagePath=CaptureScreenshot(objTextField,strStepDescription)
																														End if
																								objTextField.Enter valueToEnter
																								strErrorFormName = formShortTitle
																								blnExceptionFlag = Error_Listener ("EnterTextFormWithDeveloperName",objTextField)
			
																								If  Not blnExceptionFlag Then	
																														status="DONE"
																														
																														message="Value to enter : [ " & valueToEnter & " ]"
																														Call ReporterFunction(strLibraryFileName,"EnterTextFormWithDeveloperName","2",stepName,message)
																								Else 
																														
																														status="FAIL"
																														Flag=1
																														message="<br> Unexpected Error Encountered After Entering Text in Form  </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																														Call ReporterFunction(strLibraryFileName,"EnterTextFormWithDeveloperName","1",stepName,message)
																								End If
																								
																					Else
																								 status="FAIL"
																								Flag=1
																								blnObjectError=True
																								message="[ " & textFieldPromptOrDescription  & " ] : text box is non-editable"
																								Call ReporterFunction(strLibraryFileName,"EnterTextFormWithDeveloperName","1",stepName,message)
																							
																					End If
					
																	End if 
								
					

						
									'endTime=timer()
									'exeTime=FormatNumber(endTime - startTime,3) 
									Set objTextField=nothing
									'Call  UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)



					
									If Flag =1  Then
										EnterTextFormWithDeveloperName = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objTextField,message)
									Else
											EnterTextFormWithDeveloperName = True
									End If
									If blnDefault_eSwiftReporting Then  
											Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
									End If
	End if 
End Function




'************************************************************************************'************************************************************************************
'Name of the Function   : SelectFromLOVFast
'Description     : Fast selection of a value from a LOV
'Input Parameters     : titleOfLOVWindow->Title of the LOV Window  
' passedValue->value to be selected from the LOV
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'************************************************************************************
Public Function SelectFromLOVFast(titleOfLOVWindow,passedValue)
If Not Environment.Value("blnFatalError") Then
						Dim blnObjectError:blnObjectError=False
						Dim searchFlag  : searchFlag=0'Flag to check if the passed value exists in the LOV or not
						'startTime=timer()
						stepName="Select from LOV: "& titleOfLOVWindow
						inputParameter="Title of  LOV Window:"& titleOfLOVWindow & "<br> Value to be selected: "&passedValue
						strStepDescription= "Select the vlaue[ " & passedValue & " ] from the LOV [ " & titleOfLOVWindow & " ]"
						On error resume next
						'Check if parameters are empty
						If   OracleListOfValues("title:="& titleOfLOVWindow).exist(gObjectTimeoutLimit) Then
											Set objLOV=  OracleListOfValues("title:="& titleOfLOVWindow)
											 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																							ImagePath=CaptureScreenshot(objLOV,strStepDescription)
																						End if
											OracleListOfValues("title:="& titleOfLOVWindow).Find passedValue 
											listContent_Str=OracleListOfValues("title:="& titleOfLOVWindow).GetROProperty("list content")
											If  listContent_Str<>"" Then
																		listContent_Arr=Split(listContent_Str,";")
																		For i=0 to Ubound(listContent_Arr)
																							If Cstr(listContent_Arr(i))=Cstr(passedValue) Then
																												 OracleListOfValues("title:="& titleOfLOVWindow).Select listContent_Arr(i)
																												 searchFlag=1
																												 Exit for
																							End If
																		Next
																		If searchFlag<>1 Then
																		
																						 status="FAIL"
																						 Flag=1
																						 message="Value " & passedValue & "not in LOV"
																						  blnObjectError=false
																						 Call ReporterFunction(strLibraryFileName,"SelectFromLOVFast","1",stepName,message)
																		Else 
																						 status="DONE"
																						
																						 message=passedValue& "- selected from LOV :"& titleOfLOVWindow
																						 Call ReporterFunction(strLibraryFileName,"SelectFromLOVFast","2",stepName,message)
																		End If
																		Else
																						status="FAIL"
																						Flag=1
																						message="LOV doesn't have any value"
																						blnObjectError=false
																						Call ReporterFunction(strLibraryFileName,"SelectFromLOVFast","1",stepName,message)
																		End If
											Else
																			status="FAIL"
																			Flag=1
																			message="LOV "& titleOfLOVWindow &" Not found"
																			blnObjectError=False
																			Call ReporterFunction(strLibraryFileName,"SelectFromLOVFast","1",stepName,message)
											End if

							If Flag =1  Then
									SelectFromLOVFast = message
									blnMainFailFlag = True
									ImagePath=CaptureScreenshot(objLOV,message)
							Else
									SelectFromLOVFast = True
							End If
							If blnDefault_eSwiftReporting Then  
									Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
							End If


		End If
End Function




'*********************************************************************************************************************************************************************
'Name of the Function :	EnterTextTabbedRegion(formTitle,tabbedRegionLabel,tabbedRegionIndex ,tableBlockName,dataRowNo,dataColumnName,,valueToEnter)
'Author                         	:	TCS
'Date			   				   :	21-Jun-2012
'Description				:	Entering value in Text Field inside Oracle Tabbed Region
'Input Parameters	 :	formShortTitle : Short Title Property of the Oracle Form Window
'												tabbedRegionLabel : Label Property of the Oracle Tabbed Region
'												tabbedRegionIndex : Index of the Oracle Tabbed Region(Normally set as 0. For more than one identical object need to change accordingly.)
'										 		 tableBlockName->blockName of the oracle table
'													 dataRowNo->RowNumber
'														 dataColumnName->ColumnName  of the field   
'												valueToEnter : Value to be Entered
'Output Parameters    :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************

public Function EnterTextTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescriptionorDevelopername,textFieldIndex,valueToEnter)
	  If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError:       blnObjectError=False
				'startTime=Timer()
				stepName="Enter Text"
				inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel & "<br><b>Prompt Or Description of the TextField : </b>" & textFieldPromptOrDescription & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b>Index of the Text Field : </b>" & textFieldIndex & "<br><b>Value to Enter : </b>" & valueToEnter
				strStepDescription= "Enter the value [ " & valueToEnter & " ] in the text field [ " & textFieldPromptOrDescriptionorDevelopername & " ] in the Tabbed region [ " & tabbedRegionLabel & " ]"
				On Error Resume Next
				Dim intSetFlag,objText
				intSetFlag=1
				
				If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescriptionorDevelopername,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then
							Set objText = OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescriptionorDevelopername,"index:=" & textFieldIndex)
							intSetFlag = 0

				ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("prompt:="& textFieldPromptOrDescriptionorDevelopername,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then
							Set objText = OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("prompt:="& textFieldPromptOrDescriptionorDevelopername,"index:=" & textFieldIndex)
							intSetFlag = 0

                 ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("developer name:="& textFieldPromptOrDescriptionorDevelopername,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then
							Set objText = OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("developer name:="& textFieldPromptOrDescriptionorDevelopername,"index:=" & textFieldIndex)
							intSetFlag = 0


				Else
							status="FAIL"
							Flag=1
							message="Given  Text Field Object "& textFieldPromptOrDescriptionorDevelopername & " Not Found."
							blnObjectError=True
							Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegion","1",stepName,message)
				End If

				If intSetFlag = 0 Then
								If objText.GetROProperty("editable") AND objText.GetROProperty("enabled") Then
									If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																					ImagePath=CaptureScreenshot(objText,strStepDescription)
																				End if
																objText.Enter valueToEnter
																
																blnExceptionFlag = Error_Listener ("EnterTextFieldTabbedRegion",objText)  '// Calling Error_Listener
																If Not blnExceptionFlag Then
																				status="DONE"
																				
																				message="[ " &  valueToEnter & " ] :  has been entered in theText Field."
																				Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegion","2",stepName,message)
															   Else
																				 status="FAIL"
																				 Flag=1
																				 message="<br> Unexpected Error Encountered After Entering Text   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																				 Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegion","1",stepName,message)
																End If
								 Else
																status="FAIL"
																Flag=1
																message="The Text field "& textFieldPromptOrDescriptionorDevelopername & "  is NonEditable/Disabled."
																blnObjectError=True
																Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegion","1",stepName,message)
								End If
				End If
				'endTime=Timer()
				'ExeTime = FormatNumber(endTime - startTime,3) 
				'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

			

						If Flag =1  Then
							EnterTextTabbedRegion = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
						Else
								EnterTextTabbedRegion = True
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
End If	
  
End Function



'***********************************************************************************'***********************************************************************************
'Name of the Function  	 :  RunRequest_PickSimulationSet
'Author		     						:  TCS
'Date			 				   	 	: 26-Oct-2013
'Description		    		 :  Extract Request numbers from a OracleNotification of type Note 
'Input Parameters	     :  maxTimeout
'Output Parameters      : requestNumber	'Request Number on Success ; "" (Blank ) value on failure
'***********************************************************************************'***********************************************************************************



Function RunRequest_PickSimulationSet(maxTimeOut,Byref iRowNumberFound)
If Not Environment.Value("blnFatalError") Then
			Dim iCounter: iCounter=0
			iRowNumber = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetROProperty("visible rows")
			For iCnt= 1 to iRowNumber 
                    Do
							iCounter = iCounter+1 
							OracleFormWindow("short title:=Requests").OracleButton("description:=Refresh Data").Click

					Loop Until iCounter <5


					iRequestID_Child=  OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iCnt,1)
					iRequestID_Parent=  OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iCnt+1,1)
			
					strRequestName_Child=  OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iCnt,2)
					strRequestName_Parent=  OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iCnt+1,2)
			
					iParentRequestID_Child=  OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iCnt,3)
			
					
					If  strRequestName_Child = "Reserve Orders" and strRequestName_Parent = "GE ONT VS VNJ Pick Simulation Set (Report Set)" Then
						If  iRequestID_Parent =  iParentRequestID_Child Then
								Do
										Wait(1)
										OracleFormWindow("short title:=Requests").OracleButton("description:=Refresh Data").Click
										iWaitCounter = iWaitCounter  + 1
										strRequestPhase= OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iCnt,4)
										strParentRequestPhase= OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iCnt+1,4)

										strRequestStatus = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iCnt,5)

								Loop Until ((strRequestPhase = "Completed") and strParentRequestPhase= "Completed") OR (iWaitCounter >maxTimeOut)
			
								If  strRequestStatus ="Normal" Then
										
										Call SetFocusTable(Requests,JOBS,0,iCnt-1,1)
										iRowNumberFound = iCnt-1
										RunRequest_GEONTVSVNJPickSimulationSet = True
								Elseif iWaitCounter >maxTimeOut then
										RunRequest_GEONTVSVNJPickSimulationSet = "Request Did not complete within defined Timeout"
								Else
										RunRequest_GEONTVSVNJPickSimulationSet = "Request Completed.But Status is Not Normal"
										'RunRequest_GEONTVSVNJPickSimulationSet = True
										iRowNumberFound = iCnt-1
								End If
						End If
						Exit Function
					End If
			Next
End if	
 End Function




Function SetFocusOnTabbedRegionTableRow(objTabbedRegionTableObject,iColumnNumber,strExpectedNumber)
				
				iRowCount =objTabbedRegionTableObject.GetROProperty("visible rows")
				For iCnt = 1 to iRowCount
						strRecordNumber = objTabbedRegionTableObject.GetFieldValue(iCnt,iColumnNumber)
						If strRecordNumber  = strExpectedNumber Then
							Call objTabbedRegionTableObject.SetFocus(iCnt,iColumnNumber)
							Exit For
						End If
				Next
				If  iCnt > iRowCount Then
						SetFocusOnTabbedRegionTableRow = False
				else
						SetFocusOnTabbedRegionTableRow = True
				End If 
End Function


Function SetFocusOnTabbedRegionTableRowByColumnName(objTabbedRegionTableObject,iColumnName,strExpectedValue)
				
				iRowCount =objTabbedRegionTableObject.GetROProperty("visible rows")
				For iCnt = 1 to iRowCount
						strRecordNumber = objTabbedRegionTableObject.GetFieldValue(iCnt,iColumnName)
						If strRecordNumber  = strExpectedNumber Then
							Call objTabbedRegionTableObject.SetFocus(iCnt,iColumnName)
							Exit For
						End If
				Next
				If  iCnt > iRowCount Then
						SetFocusOnTabbedRegionTableRowByColumnName = False
				else
						SetFocusOnTabbedRegionTableRowByColumnName = True
				End If 
End Function
'***********************************************************************************'***********************************************************************************
'Name of the Function  	 :  CaptureTwoRequestNumbersFromNotePopUp
'Author		     						:  TCS
'Date			 				   	 	: 18-Oct-2013
'Description		    		 :  Extract Request numbers from a OracleNotification of type Note 
'Input Parameters	     :  requestType  ' type of request submitted  e.g CONCURRENT
'Output Parameters      : requestNumber	'Request Number on Success ; "" (Blank ) value on failure
'***********************************************************************************'***********************************************************************************


Function CaptureTwoRequestNumbersFromNotePopUp(requestType,Byref aRequestNo)

 If Not Environment.Value("blnFatalError") Then
									Dim blnObjectError
									blnObjectError=False
''									Dim requestNumber()
'									Dim req_2()
									Dim req_3,req_4
'									byref request
									
									blnFound = ""
									'startTime=Timer()
									stepName="Clicks the Note Box and extracts the Request Number if any"
									inputParameter="<b>Request Type :</b>" & requestType
									strStepDescription= "Capture the Request Numbers from Request[ " & requestType & " ]"
									If  requestType <> "" Then		
													 If UCASE (requestType) ="CONCURRENT" Then
																	 Set objOracleNotification=OracleNotification("title:=Note")
																	 If objOracleNotification.Exist(gObjectTimeoutLimit)     Then
																					message = objOracleNotification.GetROProperty("message")
																					If  instr(1,message,"concurrent request") >= 0 Then

'																											posX =instr(1,message,"is") 
'																											posX=posX+len("is")
'																											posY=instr(1,message,".") 
'																											requestNumber = trim(mid (message,posX+8,posY-1-posX))
																											requestNumber = Split(message,"requests: ")
                                                                                                            req_2=Split(requestNumber(1), ",")
                                                                                                            aRequestNo(0)=Trim(req_2(0))
                                                                                                            aRequestNo(1)=Trim(req_2(1))
																											If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																												ImagePath=CaptureScreenshot(objOracleNotification,strStepDescription)
																											End if

																											OracleNotification("title:=Note").Approve
																											blnExceptionFlag = Error_Listener ("CaptureTwoRequestNumbersFromNotePopUp",objOracleNotification)
																											 If blnExceptionFlag Then
																					'												status="DONE"
																					'												message="[ " & textFieldPromptOrDescription & " ] value Captured during run time."
																					'												Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValue","2",stepName,message)
																						'										     Else
																																	status="FAIL"
																																	Flag=1
																																	message="<br> Unexpected Error Encountered while fetching the Run Time Data</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																																	Call ReporterFunction(strLibraryFileName,"CaptureTwoRequestNumbersFromNotePopUp","1",stepName,message)
																											 End If
																											status="DONE"
																											message=" Concurrent Request Number  " & aRequestNo(0) & "and" &  aRequestNo(1) &" Successfully Extracted: "
																											Call ReporterFunction(strLibraryFileName,"CaptureTwoRequestNumbersFromDecisionPopUp","2",stepName,message)
																											 
																					End if 
																
																		Else											
																					status="FAIL"
																					message=" Oracle Note Pop-up not Found" 
																					blnObjectError=True
																					Flag=1
																					Call ReporterFunction(strLibraryFileName,"CaptureTwoRequestNumbersFromDecisionPopUp","1",stepName,message)
																		End If
													End If
							Else
													status="FAIL"
													Flag=1
													message="Insufficient Data Provided."
													blnObjectError=True
													Call ReporterFunction(strLibraryFileName,"CaptureTwoRequestNumbersFromDecisionPopUp","1",stepName,message)
							End If
							Set objOracleNotification=Nothing
							'endTime=Timer()
							'exeTime=FormatNumber(endTime - startTime,3) 
							'Call  UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)

							
						If Flag =1  Then
							CaptureTwoRequestNumbersFromNotePopUp = ""
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objOracleNotification,message)
						Else
								CaptureTwoRequestNumbersFromNotePopUp = request
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
	
End If
End Function


'***********************************************************************************************************************************
'       To get  row number from a table

'*********************************************************************************************************************************
Function GetRowNumber(objTabbedRegionTableObject,iColumnNumber,strExpectedValue)
   If objTabbedRegionTableObject.Exist(1) Then
					iRowCount =objTabbedRegionTableObject.GetROProperty("visible rows")
					For iCnt = 1 to iRowCount
							strRecordValue = objTabbedRegionTableObject.GetFieldValue(iCnt,iColumnNumber)
							If strRecordValue  = strExpectedValue Then
								GetRowNumber=iCnt
								Exit For
							End If
					Next
					If iCnt > iRowCount  Then
						GetRowNumber=False
					End If
   End If
End Function



Function GetRowNumberByColumnName(objTabbedRegionTableObject,iColumnName,strExpectedValue)
   If objTabbedRegionTableObject.Exist(1) Then
					iRowCount =objTabbedRegionTableObject.GetROProperty("visible rows")
					For iCnt = 1 to iRowCount
							strRecordValue = objTabbedRegionTableObject.GetFieldValue(iCnt,iColumnName)
							If strRecordValue  = strExpectedValue Then
								GetRowNumberByColumnName=iCnt
								Exit For
							End If
					Next
					If iCnt > iRowCount  Then
						GetRowNumberByColumnName=False
					End If
   End If
End Function


'***********************************************************************************'***********************************************************************************
'Name of the Function    :  CaptureRequestNumberFromNotePopUp
'Author             :  TCS
'Date              : 03-Jul-2012
'Description         :  Extract Request number from a OracleNotification of type Note 
'Input Parameters      :  requestType  ' type of request submitted  e.g CONCURRENT
'Output Parameters      : requestNumber 'Request Number on Success ; "" (Blank ) value on failure
'***********************************************************************************'***********************************************************************************

Function CaptureRequestNumberFromNotePopUp()'Byref aReturnArray)
 If Not Environment.Value("blnFatalError") Then
         Dim blnObjectError
         blnObjectError=False
         Dim requestNumber 
         blnFound = ""
         'startTime=Timer()
         stepName="Clicks the Note Box and extracts the Request Number if any"
         inputParameter="<b>Request Type :</b>" & requestType
         strStepDescription= "Capture request number from NotePopUp"
'         If  requestType <> "" Then  
'              If UCASE (requestType) ="CONCURRENT" Then
                  Set objOracleNotification=OracleNotification("title:=Note")
                  If objOracleNotification.Exist(gObjectTimeoutLimit)     Then
                     strValueMessage = objOracleNotification.GetROProperty("message")
													 
								'                           posX =instr(1,message,"is") 
								'                           posX=posX+len("is")
								'                           posY=instr(1,message,".") 
								'                           requestNumber = trim(mid (message,posX+1,posY-1-posX))
								
'																outputParameter= strValueMessage
															If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																ImagePath=CaptureScreenshot(objOracleNotification,strStepDescription)
															End if
														   OracleNotification("title:=Note").Approve
														   blnExceptionFlag = Error_Listener ("CaptureRequestNumberFromNotePopUp",objOracleNotification)
														   strReturn = ExtractNumberFromString(strValueMessage ,aReturnArray)
														   For arrayCounter = 0 to uBound(aReturnArray)
															   If  arrayCounter= uBound(aReturnArray) Then
																   outputParameter= outputParameter & aReturnArray(arrayCounter)
																   else
																   outputParameter= outputParameter & aReturnArray(arrayCounter) & ", "
															   End If
																 
														   Next
'														   outputParameter= strReturn
														   If blnExceptionFlag Then
													 '            status="DONE"
													 '            message="[ " & textFieldPromptOrDescription & " ] value Captured during run time."
													 '            Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValue","2",stepName,message)
													 '               Else
																 status="FAIL"
																 Flag=1
																 message="<br> Unexpected Error Encountered while fetching the Run Time Data</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																 Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromNotePopUp","1",stepName,message)
														   End If
														   If  strReturn = True Then
																		   status="DONE"
																		   message=" Concurrent Request Number  " & outputParameter &" Successfully Extracted: "
																		   Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromNotePopUp","2",stepName,message)
																		   CaptureRequestNumberFromNotePopUp = outputParameter 
															else
																			status="FAIL"
																			 Flag=1
																			 message="<br> No Number Found in Note Message </br > ' " & strValueMessage & "'"
																			 Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromNotePopUp","1",stepName,message)
														   End If
					 
				
                  Else           
                     status="FAIL"
                     message=" Oracle Note Pop-up not Found" 
                     blnObjectError=True
                     Flag=1
                     Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromNotePopUp","1",stepName,message)
                  End If
'             End If
'       Else
'             status="FAIL"
'             Flag=1
'             message="Insufficient Data Provided."
'             blnObjectError=True
'             Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromNotePopUp","1",stepName,message)
'       End If
       Set objOracleNotification=Nothing
       'endTime=Timer()
       'exeTime=FormatNumber(endTime - startTime,3) 
       'Call  UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
'	   If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
'               ImagePath=CaptureScreenshot(stepName,inputParameter )
'       ElseIf Flag=1 Then 
'               ImagePath=CaptureScreenshot(stepName,inputParameter )
'       End If

       If  blnObjectError  Then
             Environment.Value("blnFatalError")=True
             Call Error_Recovery ("CONTINUE")
        End If
        
        If Flag =1  Then
			CaptureRequestNumberFromNotePopUp = ""
			blnMainFailFlag = True
			ImagePath=CaptureScreenshot(objOracleNotification,message)
		Else
				CaptureRequestNumberFromNotePopUp = outputParameter
		End If
		If blnDefault_eSwiftReporting Then  
				Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

        
'
'       If strReturn = True Then
'             CaptureRequestNumberFromNotePopUp = True
'       Else
'             CaptureRequestNumberFromNotePopUp = message
'             blnMainFailFlag = True
'             
'       End If 
End If
End Function



'-----------------------------------------------------------------------------------------------------------------------------------------------------
Function ExtractNumberFromString(myString,Byref aReturnArray)
    Dim colMatches, objMatch, objRE, strPattern' Default if no numbers are found
    Val = 0
    strPattern = "[-+0-9]+"   
    Set objRE = New RegExp        ' Create regular expression object.
    objRE.Pattern    = strPattern ' Set pattern.
    objRE.IgnoreCase = True       ' Set case insensitivity.
    objRE.Global     = True       ' Set global applicability:
    Set colMatches = objRE.Execute( myString )  ' Execute search.
 If  colMatches.count  >0 Then
  ReDim aReturnArray(colMatches.count-1)
  i=0
  For Each objMatch In colMatches             ' Iterate Matches collection.
            aReturnArray(i) = objMatch.Value
   i=i+1
  Next
  ExtractNumberFromString = True
 Else
  ExtractNumberFromString= False
 End If
 Set objRE= Nothing
End Function
 

Public Function ClickImageWeb(browserName,imageAlt0rFileName,imageIndex)
  If Not Environment.Value("blnFatalError") Then
	 On Error Resume Next
     Dim blnObjectError:       blnObjectError=False
     'startTime=Timer()
     stepName="Click Image"
     inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Image Alt : </b>"& imageAlt0rFileName &"<br><b>Image Index : </b>" & imageIndex
     strStepDescription= "Click the Web image [ " & imageAlt0rFileName & " ] in the Browser [ " & browserName & " ]"
'     Set obj= Description.Create()
'     obj("micclass").value="Page"
'     Set childObj=Browser("name:="& browserName).ChildObjects(obj)
'     pageTitle=childObj(0).getroproperty("title")
	 pageTitle=browserName
     If  Browser("name:="& browserName).Page("title:="& pageTitle).Image("alt:="& imageAlt0rFileName,"index:="& imageIndex).Exist(gObjectTimeoutLimit+5) Then
             If Browser("name:="& browserName).Page("title:="& pageTitle).Image("alt:="& imageAlt0rFileName,"index:="& imageIndex).GetROProperty("disabled")=0  Then
             	 Set imgObject=Browser("name:="& browserName).Page("title:="& pageTitle).Image("alt:="& imageAlt0rFileName,"index:="& imageIndex)
                 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
					ImagePath=CaptureScreenshot(imgObject,strStepDescription)
				 End if
                 Browser("name:="& browserName).Page("title:="& pageTitle).Image("alt:="& imageAlt0rFileName,"index:="& imageIndex).Click
                 blnExceptionFlag = Error_Listener (stepName,imgObject)
                   If Not blnExceptionFlag Then
                        status="DONE"
                        message="Image Button [ "& imageAlt0rFileName &" ] has been Clicked Successfully."
                        Call ReporterFunction(strLibraryFileName,"ClickImageWeb","2",stepName,message)
                 Else
                        status="FAIL"
                        Flag=1
                        message="<br> Unexpected Error Encountered while Cliking Image</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
                        Call ReporterFunction(strLibraryFileName,"ClickImageWeb","1",stepName,message)
         
                 End If
                    
             Else
                 status="FAIL"
                 Flag=1
                 message="Image Button [ "& imageAlt0rFileName &" ] is Disabled."
                 blnObjectError=True
                 Call ReporterFunction(strLibraryFileName,"ClickImageWeb","1",stepName,message)
             End If
     
                                          
          Else If  Browser("name:="& browserName).Page("title:="& pageTitle).Image("file name:="& imageAlt0rFileName,"index:="& imageIndex).Exist(gObjectTimeoutLimit+5) Then
             If Browser("name:="& browserName).Page("title:="& pageTitle).Image("file name:="& imageAlt0rFileName,"index:="& imageIndex).GetROProperty("disabled")=0  Then
                 Browser("name:="& browserName).Page("title:="& pageTitle).Image("file name:="& imageAlt0rFileName,"index:="& imageIndex).Click
                 Set imgObject=Browser("name:="& browserName).Page("title:="& pageTitle).Image("file name:="& imageAlt0rFileName,"index:="& imageIndex)
                 blnExceptionFlag = Error_Listener (stepName,imgObject)

                  If Not blnExceptionFlag Then
                        status="DONE"
                        message="Image Button [ "& imageAlt0rFileName &" ] has been Clicked Successfully."
                        Call ReporterFunction(strLibraryFileName,"ClickImageWeb","2",stepName,message)
                 Else
                        status="FAIL"
                        Flag=1
                        message="<br> Unexpected Error Encountered while Cliking Image</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
                        Call ReporterFunction(strLibraryFileName,"ClickImageWeb","1",stepName,message)
         
                 End If
                    
             Else
                 status="FAIL"
                 Flag=1
                 message="Image Button [ "& imageAlt0rFileName &" ] is Disabled."
                 blnObjectError=True
                 Call ReporterFunction(strLibraryFileName,"ClickImageWeb","1",stepName,message)
             End If
     Else
             status="FAIL"
             Flag=1
             message="Image Button [ "& imageAlt0rFileName &" ] not Found."
             blnObjectError=True
             Call ReporterFunction(strLibraryFileName,"ClickImageWeb","1",stepName,message)
     End If
     End If
     'endTime = Timer()
     'ExeTime = FormatNumber(endTime - startTime,3)
     'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

       
'     If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
'           Wait(5)
'           ImagePath=CaptureScreenshot(stepName,inputParameter )
'     ElseIf Flag=1 Then 
'           Wait(5)
'           ImagePath=CaptureScreenshot(stepName,inputParameter )
'     End If
      If  blnObjectError  Then
             Environment.Value("blnFatalError")=True
             'Call Error_Recovery ("CloseAllForms")
     End If
     
     
     If Flag =1  Then
			ClickImageWeb = message
			blnMainFailFlag = True
			ImagePath=CaptureScreenshot(imgObject,message)
	Else
			ClickImageWeb = True
	End If
	If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
	End If
 End If
  
End Function



'************************************************************************************'************************************************************************************
'Name of the Function   : SelectFromLOV_Negative
'Author		  						  :TCS
'Date			                     :12.09.2011
'Description		     : selecting a value from a LOV
'Input Parameters	     : titleOfLOVWindow->Title of the LOV Window  
'												passedValue->value that should not be in the LOV
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'************************************************************************************
Public Function SelectFromLOV_Negative(titleOfLOVWindow,passedValue)
		 If Not Environment.Value("blnFatalError") Then
								Dim blnObjectError:blnObjectError=False
								Dim searchFlag  :	searchFlag=0'Flag to check if the passed value exists in the LOV or not
								'startTime=timer()
								stepName="Select from LOV: "& titleOfLOVWindow
								inputParameter="Title of  LOV Window:"& titleOfLOVWindow & "<br> Value to be selected: "&passedValue
								strStepDescription= "Value [ " & passedValue & " ] is not in the LOV [ " & titleOfLOVWindow & " ]"
								On error resume next
								'Check if parameters are empty
								 If   OracleListOfValues("title:="& titleOfLOVWindow).exist(gObjectTimeoutLimit) Then
								 					Set objLOV= OracleListOfValues("title:="& titleOfLOVWindow)
													OracleListOfValues("title:="& titleOfLOVWindow).Find "%"&passedValue&"%"	
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
														ImagePath=CaptureScreenshot(objLOV,strStepDescription)
													End if													
													listContent_Str=OracleListOfValues("title:="& titleOfLOVWindow).GetROProperty("list content")
													If  listContent_Str<>"" Then
																	listContent_Arr=Split(listContent_Str,";")
																	For i=0 to Ubound(listContent_Arr)
																			If Ucase(Cstr(listContent_Arr(i)))=Ucase(Cstr(passedValue)) Then
																						  OracleListOfValues("title:="& titleOfLOVWindow).Select listContent_Arr(i)
																						  searchFlag=1
																						  Exit for
																			End If
																	Next
																	If searchFlag=1 Then
																		  status="FAIL"
																		  Flag=1
																		  message="Value " & passedValue & " Found in LOV"
																		   blnObjectError=True
																		  Call ReporterFunction(strLibraryFileName,"SelectFromLOV_Negative","1",stepName,message)
																	Else 
																		  status="PASS"
																		  OracleListOfValues("title:="& titleOfLOVWindow).Cancel
																		  message=passedValue& "Value NOT Found in LOV :"& titleOfLOVWindow

																		  Call ReporterFunction(strLibraryFileName,"SelectFromLOV_Negative","2",stepName,message)
																	End If
												 Else
																	status="PASS"
																	 'blnObjectError=True
																	 message=passedValue& "Value NOT Found in LOV :"& titleOfLOVWindow
																	 OracleListOfValues("title:="& titleOfLOVWindow).Cancel
																	 Call ReporterFunction(strLibraryFileName,"SelectFromLOV_Negative","2",stepName,message)
												 End If
							Else
												 status="FAIL"
												 Flag=1
												 message=titleOfLOVWindow &"  LOV Not found on Screen"
												 blnObjectError=True
												Call ReporterFunction(strLibraryFileName,"SelectFromLOV_Negative","1",stepName,message)
							End if
							'endTime=timer()
							'exeTime= FormatNumber(endTime - startTime,3) 
							'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)

                		If Flag =1  Then
							SelectFromLOV_Negative = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objLOV,message)
						Else
								SelectFromLOV_Negative = True
						End If
						
						If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										Call Error_Recovery ("CloseAllForms")
						End If
							
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
							
							
End If
End Function


Function CancelLOV(strLOVTitle)
		If OracleListOfValues("title:="& strLOVTitle).Exist(1) Then
				OracleListOfValues("title:="& strLOVTitle).Cancel	
				CancelLOV= TRue
		Else
				CancelLOV= "LOV "&strLOVTitle & "Not found "
				blnMainFailFlag = True
		End If
End Function


Function KillExcel()
						 Set objWMIService = GetObject("winmgmts:")		
						Set processList = objWMIService.ExecQuery("SELECT * FROM Win32_Process WHERE Name = 'EXCEL.exe'")
						For Each objProcess in processList
							objProcess.Terminate()
						Next
End Function



Public Function ClickImageWebWithFileName(browserName,imageFileName,imageIndex)
	 If Not Environment.Value("blnFatalError") Then
					Dim blnObjectError:			    blnObjectError=False
					'startTime=Timer()
					stepName="Click Image"
					inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Image Alt : </b>"& imageAlt &"<br><b>Image Index : </b>" & imageIndex
					strStepDescription= "Click Web Image with File name[ " & imageFileName & " ]"
					On Error Resume Next
					'Set obj= Description.Create()
					'obj("micclass").value="Page"
					'Set childObj=Browser("name:="& browserName).ChildObjects(obj)
					'pageTitle=childObj(0).getroproperty("title")
					pageTitle=browserName

					If  Browser("name:="& browserName).Page("title:="& pageTitle).Image("file name:="& imageFileName,"index:="& imageIndex).Exist(gObjectTimeoutLimit+5) Then
													If Browser("name:="& browserName).Page("title:="& pageTitle).Image("file name:="& imageFileName,"index:="& imageIndex).GetROProperty("disabled")=0  Then
																	Browser("name:="& browserName).Page("title:="& pageTitle).Image("file name:="& imageFileName,"index:="& imageIndex).Click
																	Set imgObject=Browser("name:="& browserName).Page("title:="& pageTitle).Image("file name:="& imageFileName,"index:="& imageIndex)
																	If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																		ImagePath=CaptureScreenshot(imgObject,strStepDescription)
																	End if
																	blnExceptionFlag = Error_Listener (stepName,imgObject)
																	 If Not blnExceptionFlag Then
																								status="DONE"
																								message="Image Button [ "& imageAlt &" ] has been Clicked Successfully."
																								Call ReporterFunction(strLibraryFileName,"ClickImageWebWithFileName","2",stepName,message)
																	Else
																								status="FAIL"
																								Flag=1
																								message="<br> Unexpected Error Encountered while Cliking Image</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																								Call ReporterFunction(strLibraryFileName,"ClickImageWebWithFileName","1",stepName,message)
									
																 End If
																				
													Else
																	status="FAIL"
																	Flag=1
																	message="Image Button [ "& imageAlt &" ] is Disabled."
																	blnObjectError=True
																	Call ReporterFunction(strLibraryFileName,"ClickImageWebWithFileName","1",stepName,message)
													End If
					Else
													status="FAIL"
													Flag=1
													message="Image Button [ "& imageAlt &" ] not Found."
													blnObjectError=True
													Call ReporterFunction(strLibraryFileName,"ClickImageWebWithFileName","1",stepName,message)
					End If
					'endTime = Timer()
					'ExeTime = FormatNumber(endTime - startTime,3)
					'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)


'
'					If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
'											Wait(5)
'											ImagePath=CaptureScreenshot(stepName,inputParameter )
'					ElseIf Flag=1 Then 
'												Wait(5)
'											ImagePath=CaptureScreenshot(stepName,inputParameter )
'					End If

					If Flag =1  Then
							ClickImageWebWithFileName = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(imgObject,message)
					Else
							ClickImageWebWithFileName = True
					End If

					 If  blnObjectError  Then
							Environment.Value("blnFatalError")=True
													'Call Error_Recovery ("CloseAllForms")
					End If
					
					If blnDefault_eSwiftReporting Then  
						Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
'					If Flag =1  Then
'										ClickImageWebWithFileName = message
'					Else
'										ClickImageWebWithFileName = True
'					End If
 End If
  
End Function


'**********************************************************************************************************************************

'**********************************************************************************'***********************************************************************************
'Name of the Function   : EnterTextTable_WithoutErrorListener
'Author		     					  :TCS
'Date			 				     :13/11/2013
'Description		          : Entering a field in a table by disabling error listener
'Input Parameters	     : formShortTitle->Form window short title
'										 		 tableBlockName->blockName of the oracle table
'													 dataRowNo->RowNumber
'														 dataColumnName->ColumnName  of the field    
'															 valueToEnter ->value which will be entered                                   
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'***************************************************************

Function EnterTextTable_WithoutErrorListener(formShortTitle,tableBlockName,dataRowNo,dataColumnName,valueToEnter)
 If Not Environment.Value("blnFatalError") Then
						 Dim blnObjectError:	blnObjectError=False
						'startTime=timer()
						Dim blnExceptionFlag
						blnExceptionFlag=False
						stepName="Entering Data  under  a table column "
						inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br> <b>Block Name of Oracle table:</b> "& tableBlockName & "<br><b> Row Number: </b>" & dataRowNo &"<br> <b>Name of the column : </b>" & dataColumnName &"<br> <b>Value : </b>" & valueToEnter
						strStepDescription= "Enter the value [ " & valueToEnter & " ] in the Table [ "& tableBlockName & " ] at Row Number [ " & dataRowNo & " ] and column name [ " & dataColumnName & " ]"
						On error resume next
						If  OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit)  Then
												Set objTable = OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName)
												If OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).IsFieldEditable(dataRowNo,dataColumnName) Then   ' Commented this validation  as it was failing  to check Accounting Allowed check box in  "Invoice and hold reason" forms
																If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																		ImagePath=CaptureScreenshot(objTable,strStepDescription)
																	  End if
																	  OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).EnterField dataRowNo,dataColumnName,valueToEnter
																	  
                                                                      'blnExceptionFlag = Error_Listener ("EnterTextTable",objTable)'commented for this  function
																	  If  not blnExceptionFlag Then
																						  status="DONE"
																						  message=valueToEnter & ":  entered Under  the "& dataColumnName &" Table Column "
																						  Call ReporterFunction(strLibraryFileName,"EnterTextTable_WithoutErrorListener","2",stepName,message)
																	 Else
																						  status="FAIL"
																						  Flag=1
																						  blnObjectError=True  '// added
																						  message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																						  Call ReporterFunction(strLibraryFileName,"EnterTextTable_WithoutErrorListener","1",stepName,message)
																	  End If
											   Else
																		Flag=1
																		status="FAIL"
																		 blnObjectError=True  '// added
																		message="[ " & dataColumnName & " ]: Table Column Field  is Not Editable"
																	   Call ReporterFunction(strLibraryFileName,"EnterTextTable","1",stepName,message)
					
											  End If
						Else
											 Flag=1
											  status="FAIL"
											   blnObjectError=True  '// added
											message="[ " & tableBlockName & " ] Table not Found"
   										 Call ReporterFunction(strLibraryFileName,"EnterTextTable","1",stepName,message)
						End If
	
						'endTime=timer()
						'exeTime= FormatNumber(endTime - startTime,3) 
						'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)

						If Flag =1  Then
							EnterTextTable_WithoutErrorListener = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTable,message)
						Else
								EnterTextTable_WithoutErrorListener = True
						End If

						
						If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										Call Error_Recovery ("CloseAllForms")
						End If
						
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If

End if 
End Function


'******************************************************************************************************
'**********************************************************************************'***********************************************************************************
'Name of the Function   : SetFocusOnTableRowWithParticularValue
'Author		     					  :TCS
'Date			 				     :18/11/2013
'Description		          : Setting focus to a particular row in a table where value from the row is known
'Input Parameters	     :                                  
'Output Parameters        :Returns row number
'***************************************************************



Function SetFocusOnTableRowWithParticularValue(formShortTitle,tableBlockName,columnNoToSearch,dataToSearch)
  If Not Environment.Value("blnFatalError") Then 
                        Dim blnObjectError 
						blnObjectError=False                 
						startTime=Timer() 
						stepName="Set focus on a particular value in a given column of a table" 
						inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br> <b>Block Name of Oracle table:</b> "& tableBlockName & "<br><b>Searching Column Number:  </b>"& columnNoToSearch &"<br> <b>Data  to search: </b>" & dataToSearch
						strStepDescription="Set focus on the data ["&dataToSearch&"] in the cloumn ["& columnNoToSearch &"] of the table  ["&tableBlockName&"]"
                       					
      
						On error resume next 
						 jobDone=0 
						 SetFocusOnTableRowWithParticularValue=0
						If formShortTitle<>"" and tableBlockName<>"" and columnNoToSearch<>"" and  dataToSearch<>"" Then 
                                 
                                                        If  OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit)Then 

                                                                                        Set Ws = CreateObject("WScript.Shell") 
                                                                                                 i=1 
                                                                                                Set tableObj=OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName) 
																								If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																ImagePath=CaptureScreenshot(tableObj,strStepDescription)
														End if
                                                                                                                Do                             
                                                                                                                                        currentRowData=tableObj.GetFieldValue(i,cint(columnNoToSearch)) 
                                                                                                                                                        If currentRowData=dataToSearch Then
																																										 tableObj.SetFocus i,cint(columnNoToSearch)
																																										 SetFocusOnTableRowWithParticularValue=i
                                                                                                                                                                        jobDone=1 
                                                                                                                                                                        Exit Do 
                                                                                                                                                                 Else 
                                                                                                                                                                        tableObj.SetFocus i,cint(columnNoToSearch)
                                                                                                                                                                        Ws.SendKeys "{Down}" 
                                                                                                                                                                        i=i+1 
                                                                                                                                                        End If 
                                                                                                                                  nextRowdata=tableObj.GetFieldValue(i,cint(columnNoToSearch)) 
                                                                                                                Loop Until(currentRowData=nextRowdata) 
                                                                                         Set Ws=nothing 

												blnExceptionFlag = Error_Listener (stepName,objTable) 

                                                If Not blnExceptionFlag and jobDone=1 Then 
                                                        status="DONE" 
														
                                                                message="Focus was successfully set on ["& dataToSearch &"]"
                                                        Call ReporterFunction(strLibraryFileName,"SetFocusOnTableRowWithParticularValue","2",stepName,message) 
                                                  Else 
                                                        status="FAIL" 
                                                        Flag=1 
                                                        message="[" & dataToSearch & "] does not exist in the list ["& columnToSearch &"]"
                                                        Call ReporterFunction(strLibraryFileName,"SetFocusOnTableRowWithParticularValue","1",stepName,message)                 
                                                End If 
												 Else 
                                                                                                                   status="FAIL" 
                                                                                        Flag=1 
                                                                                        message="[" & tableBlockName & "] table doesnot exist"         
                                                                                        Call ReporterFunction(strLibraryFileName,"SetFocusOnTableRowWithParticularValue","1",stepName,message)                 
                                                   End If 

Else 
        status="FAIL" 
        Flag=1 
        message="One or more missing parameters" 
        blnObjectError=True 
        Call ReporterFunction(strLibraryFileName,"SetFocusOnTableRowWithParticularValue","1",stepName,message)                 

                Set tableObj = Nothing 
                endTime=Timer() 
        ExeTime = FormatNumber(endTime - startTime,3) 
                Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName) 
                         If  blnObjectError  Then 
                                Environment.Value("blnFatalError")=True 
                                Call Error_Recovery ("CloseAllForms") 
                        End If ' 
                End If 

        End If '// end of  parameter checking if statement 
End Function








''**********************************************************************************************************************************************************************
'Name of the Function  : ValidateTextFieldTabbedRegion
'Author		    :  TCS
'Date			    :   13 March 2012
'Description	     :  Validation function for matching expected data with runtime data in Oracle Tabbed Text Field 
'Input Parameters	     :  formShortTitle,textFieldPromptOrDescription,ExpectedData,				  						
'Output Parameters     :  TRUE or FALSE
'**********************************************************************************************************************************************************************

Function ValidateTextFieldTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescriptionOrDeveloperName,ExpectedData)
 If Not Environment.Value("blnFatalError") Then
			    Dim blnObjectError,sActualValue
			    blnObjectError=False
				sActualValue =""
				stepName="Validate  Expected Vs Actual Value in Tabbed Text Field"
				inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex &"<br><b>Prompt Or Description of the TextField : </b>" & textFieldPromptOrDescriptionOrDeveloperName & "<br><b>Expected Data : </b>" & ExpectedData & "<br><b>Case Sensitive : </b>" & CaseSensitive
				strStepDescription= "Validate the text [ " & ExpectedData & " ] in the text field [ " & textFieldPromptOrDescriptionOrDeveloperName & " ] in the tabbed region [ " & tabbedRegionLabel & " ]" 
				If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescriptionOrDeveloperName).Exist(gObjectTimeoutLimit) Then
													Set objText= OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescriptionOrDeveloperName)
				ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("developer name:="& textFieldPromptOrDescriptionOrDeveloperName).Exist(gObjectTimeoutLimit)    Then
													Set objText= OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("developer name:="& textFieldPromptOrDescriptionOrDeveloperName)
										            
				Else
													Call ReporterFunction(strLibraryFileName,"ValidateTextFieldTabbedRegion","1","TextField ", " Text  Field  Not Found")
													status="FAIL"
													Flag=1
													message="Given  Text Field object Not Found"
													ValidateTextFieldTabbedRegion = FALSE
				End if 								 
				If  Flag <>1 Then
												If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																														ImagePath=CaptureScreenshot(objText,strStepDescription)
														End if
													sActualValue = objText.GetROProperty("value")
													If  instr(Ucase(sActualValue), Ucase(ExpectedData) ) Then
																											Call ReporterFunction(strLibraryFileName,"ValidateTextFieldTabbedRegion","2","TextField ",ExpectedData &  ": has been successfully Validated in the "& textFieldPromptOrDescription &"Text  field")
																											status="PASS"
																											
																											message="Expected Data  [ "&  ExpectedData  & " ]  Matches with Actual  Value  [ " & sActualValue & " ] "
																											blnCaptureFlag =  True
													Else
																											Call ReporterFunction(strLibraryFileName,"ValidateTextFieldTabbedRegion","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
																											status="FAIL"
																											Flag=1
																											message= " Expected Data  [ " & ExpectedData  &" ] NOT  Matching with  Actual Value  [  " & sActualValue &" ] "
																											
													End If
				End If

			
				If Flag =1  Then
												ValidateTextFieldTabbedRegion = message
												blnMainFailFlag = True
												ImagePath=CaptureScreenshot(objText,message)
				Else
												ValidateTextFieldTabbedRegion = True
				End If
				
				If  blnObjectError  Then
												Environment.Value("blnFatalError")=True
												Call Error_Recovery ("CloseAllForms")
				End If
				
				If blnDefault_eSwiftReporting Then  
												Call UpdateResultHtml (stepName,inputParameter,message,status,sActualValue)
				End If
End If 
	
End Function

''**********************************************************************************'***********************************************************************************
''Name of the Function   : ClickNotificationButtonWithoutNotificationValidation
''Author		     					  :
''Date			 				     :
''Description		          : Clicking a notification button .On clicking the ok button this function will not again check if any other note popup exists.In GLPROD system there are many cases which require clicking a notification twice.This function will help in those cases.
''Input Parameters	     : notificationTitle:-title property value of the notification window   
' '                                           buttonLabelOrDescription-   Label Or Description property value of the notification window button
''Output Parameters       :Boolean True on Success ; Failure messsage on Fail
''***********************************************************************************'***********************************************************************************
Function ClickNotificationButtonWithoutNotificationValidation(notificationTitle,buttonLabelOrDescription )
		If Not Environment.Value("blnFatalError") Then
						Dim blnObjectError:			   blnObjectError=False
						Dim blnObjectFound :		blnObjectFound = False
						'startTime=Timer()
						stepName="Check Notification"
						inputParameter="<b>Title of the Oracle Notification : </b>" & notificationTitle & "<br><b> Label or Description of the Button  : </b> " & buttonLabelOrDescription
						strStepDescription= "Click the Notification button [ " & buttonLabelOrDescription & " ] in the Notification [ " & notificationTitle & " ] without validation"
						On error resume next
  
					   If  OracleNotification("title:=" & notificationTitle).OracleButton("label:=" & buttonLabelOrDescription).Exist(gObjectTimeoutLimit) Then
										Set objButtonLabelOrDescription=OracleNotification("title:=" & notificationTitle).OracleButton("label:=" & buttonLabelOrDescription)
										blnObjectFound = True
					   ElseIf OracleNotification("title:=" & notificationTitle).OracleButton("description:=" & buttonLabelOrDescription).Exist(gObjectTimeoutLimit) Then
										 Set objButtonLabelOrDescription=OracleNotification("title:=" & notificationTitle).OracleButton("description:=" & buttonLabelOrDescription)
										 blnObjectFound = True
					   Else
										status="FAIL"
										'Flag=1
										message=" Notification window Not Found."
										'blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"ClickNotificationButtonWithoutNotificationValidation","1",stepName,message)
					   End If
						If blnObjectFound = True Then
										   If objButtonLabelOrDescription.Exist(gObjectTimeoutLimit) Then 	
													
														If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
															ImagePath=CaptureScreenshot(objButtonLabelOrDescription,strStepDescription)
														End if													
													    objButtonLabelOrDescription.Click
							'						   
'																				   If OracleNotification("title:=" & notificationTitle).Exist(gObjectTimeoutLimit) Then
'																								 status="Fail"
'																								 Flag=1
'																								  blnObjectError=True
'																								message="[ " & notificationTitle & " ] Notification  window not closed successfully"
'																								Call ReporterFunction(strLibraryFileName,"ClickNotificationButton","1",stepName,message)
'																					Else
																								status="DONE"
																								message="[ " & notificationTitle & " ] Notification  window closed successfully"
																								Call ReporterFunction(strLibraryFileName,"ClickNotificationButtonWithoutNotificationValidation","2",stepName,message) 
'																				   End If   
																	
										   End If
						End If
					   Set objButtonLabelOrDescription=Nothing
                       					
						If Flag =1  Then
							ClickNotificationButtonWithoutNotificationValidation = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objButtonLabelOrDescription,message)
						Else
								ClickNotificationButtonWithoutNotificationValidation = True
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
 End If
  
 End Function


'**********************************************************************************'***********************************************************************************
''Name of the Function   : EnterTextTableWithoutErrorValidation
''Author		     					  :TCS
''Date			 				     27 Jan 2014
''Description		          : EntertextIn Oracle Table without checking for error description on entering the text in the text box
''Input Parameters	     : 
''Output Parameters       :Boolean True on Success ; Failure messsage on Fail
''***********************************************************************************'***********************************


Function EnterTextTableWithoutErrorValidation(formShortTitle,tableBlockName,dataRowNo,dataColumnName,valueToEnter)
 If Not Environment.Value("blnFatalError") Then
						 Dim blnObjectError:	blnObjectError=False
						'startTime=timer()
						stepName="Entering Data  under  a table column "
						inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br> <b>Block Name of Oracle table:</b> "& tableBlockName & "<br><b> Row Number: </b>" & dataRowNo &"<br> <b>Name of the column : </b>" & dataColumnName &"<br> <b>Value : </b>" & valueToEnter
						strStepDescription=  "Enter the value [ " & valueToEnter & " ] in the Table [ "& tableBlockName & " ] at Row Number [ " & dataRowNo & " ] and column name [ " & dataColumnName & " ]"

						On error resume next
						If  OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit)  Then
												Set objTable = OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName)
												If objTable.IsFieldEditable(dataRowNo,dataColumnName) or objTable.getROproperty("enabled") Then   ' Commented this validation  as it was failing  to check Accounting Allowed check box in  "Invoice and hold reason" forms
																	 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																			ImagePath=CaptureScreenshot(objTable,strStepDescription)
																	  End if
																	  OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).EnterField dataRowNo,dataColumnName,valueToEnter
																	 
                                                                      blnExceptionFlag = Error_Listener ("EnterTextTableWithoutErrorValidation",objTable)
																	  If  not blnExceptionFlag Then
																							strEnteredValue=objTable.GetFieldValue(dataRowNo,dataColumnName)
			  																			 If  strEnteredValue<>"" Then
																									  status="DONE"
																									  message=valueToEnter & ":  entered Under  the "& dataColumnName &" Table Column "
																									  Call ReporterFunction(strLibraryFileName,"EnterTextTableWithoutErrorValidation","2",stepName,message)
																						 else
																									 status="FAIL"
																									  Flag=1
																									  message="<br>  Value  ' "& valueToEnter  & "' could not be Entered in Column " & dataColumnName & "</br >"
																									  Call ReporterFunction(strLibraryFileName,"EnterTextTableWithoutErrorValidation","1",stepName,message)
																						 End If
																	 Else
																						  status="FAIL"
																						  Flag=1
																						  message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																						  Call ReporterFunction(strLibraryFileName,"EnterTextTableWithoutErrorValidation","1",stepName,message)
																	  End If
											   Else
																		Flag=1
																		status="FAIL"
																		 blnObjectError=True  
																		message="[ " & dataColumnName & " ]: Table Column Field  is Not Editable"
																	   Call ReporterFunction(strLibraryFileName,"EnterTextTableWithoutErrorValidation","1",stepName,message)
					
											  End If
						Else
											 Flag=1
											  status="FAIL"
											   blnObjectError=True  '// added
											message="[ " & tableBlockName & " ] Table not Found"
   										 Call ReporterFunction(strLibraryFileName,"EnterTextTableWithoutErrorValidation","1",stepName,message)
						End If
	
						'endTime=timer()
						'exeTime= FormatNumber(endTime - startTime,3) 
						'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
					If Flag =1  Then
							EnterTextTableWithoutErrorValidation = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTable,message)
					Else
							EnterTextTableWithoutErrorValidation = True
					End If
					
					If  blnObjectError  Then
						Environment.Value("blnFatalError")=True
						Call Error_Recovery ("CloseAllForms")
						End If
						
					If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If

					

End if 
End Function
'

'
'
'**********************************************************************************
'Name of the Function   : CloseFormWithoutValidation
'Author		    				 :   TCS
'Date						     :01-NOV-2013
'Description		     : To Close a oracle form window without Validation
'			        
'			        
'Input Parameters	     : formShortTitle: -Short title property value of the window,in case of multiple window input  short title property value of the parent window
                                         
'Output Parameters        :
'***********************************************************************************
Function CloseFormWithoutValidation(formShortTitle)
     If Not Environment.Value("blnFatalError") Then
								Dim blnObjectError
							      blnObjectError=False
								'startTime=Timer()
								stepName="Close Oracle Form"
								inputParameter="<b> Form Short title : </b>" & formShortTitle
								strStepDescription= "Close the Form [ " & formShortTitle & " ] without validation"
								On error resume next
							
							
								Set objFormWindow=OracleFormWindow("short title:=" & formShortTitle)
								If objFormWindow.exist(gObjectTimeoutLimit) Then 
														If blnCloseAllForms= True  Then
																objFormWindow.SelectMenu "File->Close Form"
														End If
														If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																ImagePath=CaptureScreenshot(objFormWindow,strStepDescription)
														End if
							  
															 If objFormWindow.exist(gObjectTimeoutLimit) Then 
																			  objFormWindow.CloseWindow
																				 '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
																				 If OracleNotification("title:=Forms").Exist(gObjectTimeoutLimit) Then
																					 OracleNotification("title:=Forms").OracleButton("label:=No").Click 
																				 End If
																								blnExceptionFlag = Error_Listener ("CloseForm",objFormWindow)																														'// end
														
																												If Not blnExceptionFlag Then
'																															If objFormWindow.Exist(1) Then
'																																		status="FAIL"
'																																		Flag=1
'																																		message="[ " & formShortTitle & " ] form closed "
'																																		blnObjectError=True
'																																		Call ReporterFunction(strLibraryFileName,"CloseFormWithoutValidation","1",stepName,message)
'																								
'																															Else
																																		status="DONE"
																																		message="[ " & formShortTitle & " ] form closed successfully"
																																		Call ReporterFunction(strLibraryFileName,"CloseFormWithoutValidation","2",stepName,message)  
'																															End If
																											Else
																														status="FAIL"
																														Flag=1
																														message="<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																														Call ReporterFunction(strLibraryFileName,"CloseFormWithoutValidation","1",stepName,message)
																											End If
																	 else					
											
																									status="DONE"
																									message="[ " & formShortTitle & " ] form closed successfully"
																									Call ReporterFunction(strLibraryFileName,"CloseFormWithoutValidation","2",stepName,message)  
																	   End If
		Else
							status="FAIL"
							Flag=1
							message="[ " & formShortTitle & " ] form does not exist"
							blnObjectError=True										
							Call ReporterFunction(strLibraryFileName,"CloseFormWithoutValidation","1",stepName,message)
		End if


			Set objFormWindow=Nothing
			'endTime=Timer()
			'ExeTime = FormatNumber(endTime - startTime,3) 
			'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
			
				If Flag =1  Then
						CloseFormWithoutValidation = message
						blnMainFailFlag = True
						ImagePath=CaptureScreenshot(objFormWindow,message)
				Else
						CloseFormWithoutValidation = True
				End If

			 If  blnObjectError  Then
								Environment.Value("blnFatalError")=True
								Call Error_Recovery ("CloseAllForms")
			 End If

			If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If

	End if
End Function

'***************************************************
'Name of the Function   : OpenDialogBoxTableWithFormIndex
'Author		    				 :   TCS
'Date						     :03-Feb-2014
'Description		     : Opening a dialog box in a table in an Oracle form window using the additional index property
'Input Parameters	     : formShortTitle->Short Title property value of the Form,formIndex-> Index property value of the Oracle form , tableBlockName->Block Name property value of the Oracle table,dataRowNo->Row Number,dataColumnName->Name of the column                           
'Output Parameters     :Boolean True on Success ; Failure messsage on Fail

'**************************************************

Function OpenDialogBoxTableWithFormIndex(formShortTitle,formIndex,tableBlockName,dataRowNo,dataColumnName)
     If Not Environment.Value("blnFatalError") Then
									Dim blnObjectError:    blnObjectError=False
									'startTime=Timer()
									stepName="Open Dialog Box "
									inputParameter="<b>Short Title of the Form : </b>" & formShortTitle & "<br><b> Block Name of the Oracle table : </b> " & tableBlockName  & "<br><b> Row Number : </b>" & dataRowNo & "<br><b>Name of the column : </b>" & dataColumnName
									strStepDescription= "Open Dialog box in the Table [ " & tableBlockName & " ] at Row number [ " & dataRowNo & " ] and Column Number [ " & dataColumnNumber & " ]"
									On error resume next
									Set objOracleTable=OracleFormWindow("short title:=" & formShortTitle,"index:=" & formIndex).OracleTable("block name:=" & tableBlockName)
									If objOracleTable.Exist(gObjectTimeoutLimit) Then
'										If objOracleTable.GetROProperty("editable") Then
														If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
															ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
														End if
														objOracleTable.OpenDialog dataRowNo,dataColumnName
														
														blnExceptionFlag = Error_Listener ("OpenDialogBoxTable",objOracleTable)
														If Not blnExceptionFlag Then
																	status="DONE"
																	message="[ " & dataColumnName & " ] dialog box opened"
																	Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTable","2",stepName,message)
														Else
																	status="FAIL"
																	Flag=1
																	message="<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																	Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTable","1",stepName,message)
														End If
'											else
'														status="FAIL"
'														Flag=1
'														message=tableBlockName & "  is  Non Editable."
'														blnObjectError=True
'														Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTable","1",stepName,message)
'
'											End if 
					'				strErrorCode=OracleStatusLine("message:=.*").GetROProperty("error code")
					'                  If strErrorCode="FRM-41830" then                      
					'					    status="FAIL"
					'			            Flag=1
					'			            message="LOV  contains no values"
					'						blnObjectError=True
					'                        Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTable","1",stepName,message)
					'						else
					'                        status="DONE"
					'                        message="[ " & dataColumnName & " ] dialog box opened"
					'                        Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTable","2",stepName,message)
					'			 End If          
								
									Else			
														 status="FAIL"
														 Flag=1
														message="[ " & dataColumnName & " Dialog Box object Not Found"
														blnObjectError=True
														Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTable","1",stepName,message)
								   End If

								   Set objOracleTable=Nothing
									'endTime=Timer()
									'ExeTime = FormatNumber(endTime - startTime,3) 
								  ' Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
									If  blnObjectError  Then
												Environment.Value("blnFatalError")=True
												Call Error_Recovery ("CloseAllForms")
									End If
						If Flag =1  Then
								OpenDialogBoxTableWithFormIndex = message
								blnMainFailFlag = True
								ImagePath=CaptureScreenshot(objOracleTable,message)
						Else
								OpenDialogBoxTableWithFormIndex = True
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If

	End if
End Function


'***************************************************
'Name of the Function   : FindRequestID
'Author		    				 :   TCS
'Date						     :03-Feb-2014
'Description		     : It will return the RequestID  for the process without refreshing the process.
'Input Parameters	     : Process Name
'Output Parameters     :Request ID

'**************************************************

Function FindRequestID(strRequestName)
				Set Obj=OracleFormWindow("short title:=Requests")
				If Obj.Exist(1)     Then
				
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											ImagePath=CaptureScreenshot(Obj,strStepDescription)
										End if
										Dim blnRequestFound :blnRequestFound = False
									    iMaxRow   = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetROProperty("visible rows")
									   For iRow=1 to iMaxRow
													strProcessName = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Name")
													iCurrentRequestID=OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(iRow,"Request ID")
					
													If  strProcessName  = strRequestName Then
																				'FindRequestID =iCurrentRequestID
																				
																				blnRequestFound = True
																				Exit For 
																							 
													End If
														
													
									Next
									If  blnRequestFound = False Then
											
											status="FAIL"
											 Flag=1
											message=checkBoxDescriptionorDeveloperName & " :Requests Name not Found"
											'blnObjectError=True
											Call ReporterFunction(strLibraryFileName,":Requests Name not Found","1",stepName,message)
									End If

				Else

				                                            status="FAIL"
															 Flag=1
															message=checkBoxDescriptionorDeveloperName & " :Requests Form not displayed"
															'blnObjectError=True
															Call ReporterFunction(strLibraryFileName,"Requests Form","1",stepName,message)
				End If
				
		Set Obj= Nothing		
				
		If Flag =1  Then
			FindRequestID = message
			blnMainFailFlag = True
			ImagePath=CaptureScreenshot(Obj,message)
		Else
				FindRequestID = True
		End If
		If blnDefault_eSwiftReporting Then  
				Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If		
				
End Function
'**********************************************************************************************************
'Name of the Function   	: OpenDialogBoxTextFieldWithoutCheckingForEnableField
'Author		    					 :   TCS
'Date						     	:03-Dec-2013
'Description		     		: Function to open a dialog box without checking if the field is enabled 
'Input Parameters	     : formShortTitle,textFieldPromptOrDescription,textFieldIndex
'Output Parameters     :N/A
'**************************************************************************************************************

Public Function OpenDialogBoxTextFieldWithoutCheckingForEnableField(formShortTitle,textFieldPromptOrDescription,textFieldIndex)
    If Not Environment.Value("blnFatalError") Then
					 Dim blnObjectError:blnObjectError=False
					'startTime=Timer()
					stepName="Open Dialog Box"
					inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Prompt Or Description of the TextField : </b>" & textFieldPromptOrDescription & "<br><b>Index of the Text Field : </b>" & textFieldIndex
					strStepDescription= "Open Dialog Box of text field [ " & textFieldPromptOrDescription & " ] in the form [ " & formShortTitle & " ] without checking for the Enable field"
					intSetFlag=1
					On Error Resume Next
                    If OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription,"Index:="& textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Description
							Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription,"Index:="& textFieldIndex)
							intSetFlag=0
					ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:="& textFieldPromptOrDescription,"Index:="& textFieldIndex).Exist(gObjectTimeoutLimit)  Then	'Check Field for Prompt
							Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:="& textFieldPromptOrDescription,"Index:="& textFieldIndex)
							intSetFlag=0
					ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTextField("developer name:="& textFieldPromptOrDescription,"Index:="& textFieldIndex).Exist(gObjectTimeoutLimit)  Then	'Check Field for Prompt
							Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTextField("developer name:="& textFieldPromptOrDescription,"Index:="& textFieldIndex)
							intSetFlag=0
					Else
							 status="FAIL"
							Flag=1
							message="Given Text Field [ " &descriptionOfTextField  & " ] Not Found."
							blnObjectError=True
							Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTextFieldWithoutCheckingForEnableField","1",stepName,message)
					End If
					If intSetFlag=0 Then
								If  objText.GetROProperty("editable") or objText.GetROProperty("enabled")  Then
												If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
													ImagePath=CaptureScreenshot(objText,strStepDescription)
												End if
												objText.OpenDialog
												
												blnExceptionFlag = Error_Listener ("OpenDialogBoxTextField",objText)
												If Not blnExceptionFlag Then
																		If OracleListOfValues("title:=.*").Exist(5) Or OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription,"Index:="& textFieldIndex).GetROProperty("value")<>"" Or OracleFlexWindow("title:=.*").Exist(3)Then
																					status="DONE"
																					message="Dialog Box for [ "& textFieldPromptOrDescription & " ] Opened."
																					Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTextFieldWithoutCheckingForEnableField","2",stepName,message)
																		Else
																					status="FAIL"
																					Flag=1
																					blnObjectError=True
																					message="Dialog Box for [ "& textFieldPromptOrDescription & " ] Failed to Open."
																					Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTextField","1",stepName,message)
																		End If
																
												Else
																		status="FAIL"
																		Flag=1
																		message="<br> Unexpected Error Encountered: </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																		Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTextFieldWithoutCheckingForEnableField","1",stepName,message)
												End If
                          
								Else
														status="FAIL"
														Flag=1
														message="[ " & textFieldPromptOrDescription & " ] is Disabled / Non Editable."
														blnObjectError=True
														Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTextFieldWithoutCheckingForEnableField","1",stepName,message)
								End If

				 End If
				Set objText=Nothing
				'endTime=Timer()
				'ExeTime = FormatNumber(endTime - startTime,3) 			
				'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
				If  blnObjectError  Then
						Environment.Value("blnFatalError")=True
						Call Error_Recovery ("CloseAllForms")
				End If
				End if
				If Flag =1  Then
							OpenDialogBoxTextFieldWithoutCheckingForEnableField = message
							blnMainFailFlag = True
					ImagePath=CaptureScreenshot(objText,message)
				Else
						OpenDialogBoxTextFieldWithoutCheckingForEnableField = True
				End If
				If blnDefault_eSwiftReporting Then  
						Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If

End Function



'**********************************************************************************************************
'***************************************************
'Name of the Function   	: SelectvalueFromTable
'Author		    					 :   TCS
'Date						     	:26-Aug-2014
'Description		     		: Function to select a value from a table
'Input Parameters	     : formShortTitle,tableblock name
'Output Parameters     :N/A
'*****

Public Function SelectValueFromTable(formShortTitle, tableBlockName,index, searchValue)

	If Not Environment.Value("blnFatalError") Then
					 Dim blnObjectError:blnObjectError=False
					 Dim blnFound:blnFound = False
					'startTime=Timer()
					stepName="SelectvalueFromTable"
					inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>block name of the Table : </b>" & tableblockname & "<br><b>Index of the Table : </b>" & index &  "<br><b>searchValue : </b>" & searchValue
					strStepDescription= "Select value [ " & searchValue & " ] in the table [ " & tableBlockName & " ] at the index [ " & index & " ]"
					On Error Resume Next
					If OracleFormWindow("short title:=" & formShortTitle).OracleTable("block name:=" & tableblockname).Exist(gObjectTimeoutLimit) Then
							Set objtable=  OracleFormWindow("short title:=" & formShortTitle).OracleTable("block name:=" & tableblockname)
							If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
								ImagePath=CaptureScreenshot(objtable,strStepDescription)
							End if
							
							For i=1 to 30
									If OracleFormWindow("short title:=" & formShortTitle).OracleTable("block name:=" & tableblockname).GetFieldValue( i,1) = searchValue Then
											OracleFormWindow("short title:=" & formShortTitle).OracleTable("block name:=" & tableblockname).SetFocus i,1
											blnFound = True
											Exit for
									
									End if
							Next
							If blnFound = False Then
											status="FAIL"
											Flag=1
											message=" Table Column  [ "& searchValue& " ] Not Found"
											Call ReporterFunction(strLibraryFileName,"SelectValueFromTable","1",stepName,message)
							End If
					else
								status="FAIL"
								Flag=1
								message=" Table  [ "& tableBlockName & " ] Not Found"
								Call ReporterFunction(strLibraryFileName,"SelectValueFromTable","1",stepName,message)

					End if

				If Flag =1  Then
					SelectValueFromTable = message
					blnMainFailFlag = True
					ImagePath=CaptureScreenshot(objtable,message)
				Else
						SelectValueFromTable = True
				End If
				If blnDefault_eSwiftReporting Then  
						Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If

		End if

End function

'*********************************************************************************************************************************************************************
'Name of the Function
'											:	CloseNavigator()
'Author
'											:	TCS
'Date			   				  
'											:	13.09.2011
'Description					
'											:	Closing a Navigator Window 
'Input Parameters	     
'										
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    CloseNavigator()
'**********************************************************************************************************************************************************************
Public Function CloseNavigator()
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		'startTime=Timer()
		stepName="Close Navigator"
		inputParameter="<b></b> " 
        On error resume next
        If OracleNavigator("short title:=Navigator").Exist Then
			Set objNavigator = OracleNavigator("short title:=Navigator")
			If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
						strStepDescription = "Closes the navigator[short title:=Navigator]"
						ImagePath=CaptureScreenshot(objNavigator,strStepDescription)
					End if

					objNavigator.CloseWindow
            		If  OracleNotification("title:=Caution").Exist Then		'Approve the Causion window 
				OracleNotification("title:=Caution").Approve
				'Dim objText
				Set objText=OracleNotification("title:=Caution")
				blnExceptionFlag = Error_Listener ("CloseNavigator",objText)
				If Not blnExceptionFlag Then
					status="DONE"
					message="Navigator  has been Closed  Successfully."
					Call ReporterFunction("e-Swift_FunctionLibrary","CloseNavigator","2",stepName,message)
				Else
					status="FAIL"
					Flag=1
					message="<br> Unexpected Error Encountered After approving caution   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
					Call ReporterFunction("e-Swift_FunctionLibrary","CloseNavigator","1",stepName,message)
                End If
			End If
            If objText.Exist(3) Then		'Checking if the Navigator has been closed or not
				status="FAIL"
				Flag=1
				message="Failed to Close Navigator."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","CloseNavigator","1",stepName,message)
			Else
				status="DONE"
				message="Navigator  has been Closed  Successfully."
				Call ReporterFunction("e-Swift_FunctionLibrary","CloseNavigator","2",stepName,message)
			End If
		Else
			status="FAIL"
			Flag=1
			message="Navigator Object Missing."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","CloseNavigator","1",stepName,message)
		End If
		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)
		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
		    Call Error_Recovery ("CloseAllForms")
		End If
		
		If Flag =1  Then
							CloseNavigator = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objNavigator,message)
		Else
							CloseNavigator = True
		End If
		If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If
End Function
'**********************************************************************************************************************************************************************
'End Function    CloseNavigator()
'**********************************************************************************************************************************************************************



'*********************************************************************************************************************************************************************
'Name of the Function
'											:	SaveConcurrentRequestOutput(requestCompletionStatus,pathToSave)
'Author
'											:	TCS
'Date			   				  
'											:	11.10.2011
'Description					
'											:	Saving Output Report file in text format at specified path after proper completion of Request run (Status : Normal)
'Input Parameters	     
'											:	requestCompletionStatus : Status of Concurrent Request
'													(Will be fed from "RefreshRequest" Function)
'												pathToSave : Path where the text file will be saved
'Output Parameters      
'											:	validationFlag :Yes = The Report Saved Successfully
'														No = Report Failed to Save
'**********************************************************************************************************************************************************************
'Function   SaveConcurrentRequestOutput(requestCompletionStatus,pathToSave)
'**********************************************************************************************************************************************************************
Public Function SaveConcurrentRequestOutput(requestCompletionStatus,pathToSave)
	
	If requestCompletionStatus="Normal" Then
			'startTime=Timer()
			stepName="Save Concurrent Request Output File"
			inputParameter="<b>File Path to Save :</b>" & pathToSave
		
			On Error Resume Next
		
			If pathToSave<>"" Then
				
				strReportTime=Replace(time,":","_")
				strReportDate= Replace(date,"/","_")
				strRequestName	= OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,2)						
				strReportName=requestName & "_" & strReportTime & "_" & strReportDate &".txt"
				strFilePath=pathToSave & "\" & strReportName
			'Opeing the Report
				OracleFormWindow("short title:=Requests").OracleButton("description:=View Output").Click
			'Save the Report	
						If Browser("title:=(.*)?FNDWRR.*").WinToolbar("Class Name:=WinToolbar","nativeclass:=ToolbarWindow32","Location:=0").Exist(10) Then
								Browser("title:=(.*)?FNDWRR.*").WinToolbar("Class Name:=WinToolbar","nativeclass:=ToolbarWindow32","Location:=0").Press "&File"
								Browser("title:=(.*)?FNDWRR.*").WinMenu("name:=ContextMenu","menuobjtype:=3").Select "Save As..."
								Browser("title:=(.*)?FNDWRR.*").Dialog("regexpwndtitle:=Save.*").WinEdit("regexpwndclass:=Edit").Set strFilePath
								Browser("title:=(.*)?FNDWRR.*").Dialog("regexpwndtitle:=Save.*").WinButton("regexpwndtitle:=&Save").Click
			'Closing the Report
				Browser("title:=(.*)?FNDWRR.*").Close
	
								If fso.FileExists(strFilePath) Then
											message="[ " & strRequestName &" ] : Report Saved Successfully."
											status="DONE"
											Call ReporterFunction("2",stepName,message)
											validationFlag="Yes"
								Else
											message="[ " & strRequestName &" ] : Report Failed to Save."
											status="FAIL"
											Flag=1
											Call ReporterFunction("1",stepName,message)
											validationFlag="No"
								End If
					
						Else
											message="[ " & strRequestName &" ] : Report Output Failed to Open."
											status="FAIL"
											Flag=1
											Call ReporterFunction("1",stepName,message)
											validationFlag="No"
						End If
			Else
						status="FAIL"
						Flag=1
						message="No File Path Provided."
						Call ReporterFunction ("1",stepName,message)
						validationFlag="No"
			End If
		
			'endTime = Timer()
			'ExeTime = FormatNumber(endTime - startTime,3)
		
		  'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
			If blnDefault_eSwiftReporting Then  
				Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If
	
	Else
		validationFlag="No"
	End If
	If Flag =1  Then
							SaveConcurrentRequestOutput = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(objNavigator,message)
		Else
							SaveConcurrentRequestOutput = true

		End If
	
End Function
'**********************************************************************************************************************************************************************
'End Function SaveConcurrentRequestOutput(requestCompletionStatus,pathToSave)
'**********************************************************************************************************************************************************************




'**************************************************************************************************
'Name of the Function	 ->SetFocusForMandatoryEntry
'Author									->TCS
'Date									 ->07/09/2011
'Description					   ->Set the focus to a specific field in the tabbed region Table -->the specified field will be a cell of the table
		        
'Input Parameters			 ->formShortTitle - Short title of the form
'													tabbedRegionLabel-Label of the tabbed region
														'block Name->Block Name of the Table
															'dataRowNumber->Row number / Line number of the table which needs focus
														'		dataColumnName-->Column Name of the field which needs focus
														'	notificationTitle --> Notification title 
														'	expectedMessage --> Expected message
'
'**********************************************************************************************************************************************************************
'Function    SetFocusForMandatoryEntry(formShortTitle,tabbedRegionLabel,tableBlockName,dataRowNumber,dataColumnName,notificationTitle,expectedMessage)
'**********************************************************************************************************************************************************************
Public Function SetFocusForMandatoryEntry(formShortTitle,tabbedRegionLabel,tableBlockName,dataRowNumber,dataColumnName,notificationTitle,expectedMessage)
If Not Environment.Value("blnFatalError") Then	
'startTime=timer()
	stepName="Set Focus"
	inputParameter="Set Focus to" & dataColumnName
	On error resume next
	If formShortTitle<>"" and tabbedRegionLabel<>"" and tableBlockName<>"" and dataRowNumber<> dataColumnName<>""  and notificationTitle<>"" and expectedMessage <>""Then
		If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("Label:=" & tabbedRegionLabel).OracleTable("block name:="& tableBlockName).Exist(3) Then
			If  OracleNotification("title:=" & notificationTitle).OracleButton("label:=" & "OK").Exist(3) Then
				Call  ValidateMessageFromNotification(notificationTitle,expectedMessage)
			End If
			Set objmandatoryEntrytable = OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("Label:=" & tabbedRegionLabel).OracleTable("block name:="& tableBlockName)
			objmandatoryEntrytable.SetFocus dataRowNumber,dataColumnName
			If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
						strStepDescription = "Focus the mandatory field[cloumn:=" & dataColumnName & ",Row:="& dataRowNumber &"] of table [Block name:=" & tableBlockName &"]"
						ImagePath=CaptureScreenshot(objmandatoryEntrytable,strStepDescription)
			End if			
    			
			status="DONE"
			message="Focus is set to " & dataColumnName & "Line No " & dataRowNumber
			Call ReporterFunction("e-Swift_FunctionLibrary"," SetFocusForMandatoryEntry","2",stepName,message)
		Else
			status="FAIL"
			Flag=1
			message= " Object doesn't exist"
			Call ReporterFunction("e-Swift_FunctionLibrary"," SetFocusForMandatoryEntry","1",stepName,message)
		End If   
	Else
		status="FAIL"
		Flag=1
		message="One or more missing parameters"
		Call ReporterFunction("e-Swift_FunctionLibrary"," SetFocusForMandatoryEntry","1",stepName,message)
	End If
	'endTime=timer()
	'exeTime= FormatNumber(endTime - startTime,3) 
	'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
	If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
	End If
	If Flag =1  Then
							SetFocusForMandatoryEntry = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objmandatoryEntrytable,message)
		Else
							SetFocusForMandatoryEntry = true

		End If

End if
End Function
' ***********************'*****************************************
'End Function -   SetFocusForMandatoryEntry() 
';**************************************************************************************************



'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ClickTableImageWeb(browserName,rowInnerText,tableClass,tableName,tableIndex,imageAlt,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex,traversethroughrecordsTableName,traversethroughrecordsTableindex)
'Author
'											:	TCS
'Date			   				  
'											:	26.09.2011
'Description					
'											:	Clicking a Image in Web based Oracle Forms
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												rowInnerText: Innertext  or text of the item to be searched for in a table
'												tableClass: Class of the parent table in which the innertext item is present
'												tableName:Name of the table
'												tableIndex: Index of the table
'												imageAlt: Alt Property of the Image
'												traversethroughrecordsLinkName: link name for navigating to next set of records in the table.
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      
'											:None
'**********************************************************************************************************************************************************************
'Function    ClickTableImageWeb(browserName,rowInnerText,tableClass,tableName,tableIndex,imageAlt,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)
'**********************************************************************************************************************************************************************
Public Function ClickTableImageWeb(browserName,rowInnerText,tableClass,tableName,tableIndex,imageAlt,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)
	If Not Environment.Value("blnFatalError") Then
		'startTime=Timer()
		stepName="Click Image"
		inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Image Alt : </b>"& imageAlt &"<br><b>Image Index : </b>" & imageIndex
		Dim blnObjectError
		blnObjectError=False
		On Error Resume Next
		If browserName <>""  AND rowInnerText<>"" AND tableClass <>"" AND  tableName <>"" AND tableIndex<>""  AND imageAlt<> ""Then
			Set obj= Description.Create()
			obj("micclass").value="Page"
			Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")
			If Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).Exist(3) Then
					varRowNumber= Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).GetRowWithCellText(rowInnerText)
					''print varRowNumber
					If  varRowNumber > 1Then
						Set imgObject=Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).Image("alt:="& imageAlt,"index:="&(varRowNumber-2))
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
							strStepDescription = "Clicks the image:=[ Alt:="& imageAlt &"]"
							ImagePath=CaptureScreenshot(imgObject,strStepDescription)
						End if
						imgObject.Click
						successFlag=0
					Else
						''print Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).GetROProperty("rows")
						If Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&traversethroughrecordsLinkName,"index:="&traversethroughrecordsLinkIndex).Exist(3) Then
							if Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&traversethroughrecordsLinkName,"index:="&traversethroughrecordsLinkIndex).GetROProperty("disabled")=0 Then
								Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&traversethroughrecordsLinkName,"index:="&traversethroughrecordsLinkIndex).click
								wait(2)
								Call ClickTableImageWeb(browserName,rowInnerText,tableClass,tableName,tableIndex,imageAlt,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)
								Exit Function
							else
								successFlag=1
							End If
						End If
					End If
			If successFlag Then
				status="FAIL"
				Flag=1
				message="Record with text: [ "& rowInnerText &" ] not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickTableImageWeb","1",stepName,message)
			else:
				status="DONE"
				message=" Image: [ "& imageAlt &" ] clicked successfully."
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickTableImageWeb","0",stepName,message)
			End If
			Else
				status="FAIL"
				Flag=1
				message="Table [ "& tableName &" ] not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickTableImageWeb","1",stepName,message)
			End If
	Else
		status="FAIL"
		Flag=1
		message="Insufficient Data Provided."
		blnObjectError=True
		Call ReporterFunction("e-Swift_FunctionLibrary","ClickImageWeb","1",stepName,message)
	End If
	'endTime = Timer()
	'ExeTime = FormatNumber(endTime - startTime,3)
	If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
	'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
		If Flag =1  Then
							ClickTableImageWeb = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(imgObject,message)
		Else
							ClickTableImageWeb = true

		End If
	End If
End Function
'**********************************************************************************************************************************************************************
'End Function ClickTableImageWeb(browserName,rowInnerText,tableClass,tableName,tableIndex,imageAlt,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)
'**********************************************************************************************************************************************************************


'Function    ClickBarCodeLinkWeb(browserName,rowInnerText,tableClass,tableName,tableIndex,imageAlt,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)
'**********************************************************************************************************************************************************************

Public Function ClickBarCodeLinkWeb(browserName,rowInnerText,tableClass,tableName,tableIndex,imageAlt,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)
 If Not Environment.Value("blnFatalError") Then
 	'startTime=Timer()
	stepName="Click Image"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Image Alt : </b>"& imageAlt &"<br><b>Image Index : </b>" & imageIndex
	Dim blnObjectError
   	blnObjectError=False
	On Error Resume Next
	If browserName <>""  AND rowInnerText<>"" AND tableClass <>"" AND  tableName <>"" AND tableIndex<>""  AND imageAlt<> ""Then
		Set obj= Description.Create()
		obj("micclass").value="Page"

		Set childObj=Browser("name:="& browserName).ChildObjects(obj)
		pageTitle=childObj(0).getroproperty("title")

			If Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).Exist(3) Then
					varRowNumber= Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).GetRowWithCellText(rowInnerText)
					''print varRowNumber
					If  varRowNumber > 1Then
						Set imgObject=Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).Image("alt:="& imageAlt,"index:="&(varRowNumber-2))
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
							strStepDescription = "Click the image" & "[alt:="& imageAlt & ",index:=" &(varRowNumber-2) & "]" 
							ImagePath=CaptureScreenshot(imgObject,strStepDescription)
						End if

						imgObject.Click
						successFlag=0
					Else
						''print Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).GetROProperty("rows")
						if Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&traversethroughrecordsLinkName,"index:="&traversethroughrecordsLinkIndex).GetROProperty("disabled")=0 Then
							Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&traversethroughrecordsLinkName,"index:="&traversethroughrecordsLinkIndex).click
							wait(2)
							call ClickTableImageWeb(browserName,rowInnerText,tableClass,tableName,tableIndex,imageAlt,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)
							Exit Function 
						else
							successFlag=1
						End If
					End If
			If successFlag Then
				status="FAIL"
				Flag=1
				message="Record with text: [ "& rowInnerText &" ] not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickTableImageWeb","1",stepName,message)
			else:
				status="DONE"
				message=" Image: [ "& imageAlt &" ] clicked successfully."
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickTableImageWeb","0",stepName,message)
			End If
			Else
				status="FAIL"
				Flag=1
				message="Table [ "& tableName &" ] not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickTableImageWeb","1",stepName,message)
			End If
	Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickImageWeb","1",stepName,message)
	End If
		'endTime = Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)
	
  		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
	
		 If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If

		If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
		If Flag =1  Then
							ClickBarCodeLinkWeb = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(imgObject,message)
		Else
							ClickBarCodeLinkWeb = true

		End If

	End If
End Function
'**********************************************************************************************************************************************************************




'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ValidateWebElementText(browserName,webElementClass,webElementHTMLTag,webElementIndex,expectedValue)
'Author
'											:	TCS
'Date			   				  
'											:	11.10.2011
'Description					
'											:	Selecting an item from a List  in Web Forms
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												webElementClass : Class Property of the Web Element
'												webElementHTMLTag : HTML Tag of the Web Element
'												webElementIndex : Index of the Web Element
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'												expectedValue : The expected value to be matched with run time value
'Output Parameters      
'											:	strCapturedText : Captured Inner Text of the Web Element
'**********************************************************************************************************************************************************************
' Function ValidateWebElementText(browserName,webElementClass,webElementHTMLTag,webElementIndex,expectedValue)
'**********************************************************************************************************************************************************************
Public Function ValidateWebElementText(browserName,webElementClass,webElementHTMLTag,webElemenInnerText)
 If Not Environment.Value("blnFatalError") Then

'	startTime=Timer()
	stepName="Validate Text in WebElement"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Web Element Class : </b>"& webElementClass &"<br><b>Web Element HTML Tag : </b>" & webElementHTMLTag &"<br><b>Web Element Index : </b>" & webElemenInnerText
	On Error Resume Next
	If browserName <>"" AND webElementHTMLTag <>""  AND webElemenInnerText <>"" Then 'AND webElementClass <>"" 
					Set obj= Description.Create()
					obj("micclass").value="Page"
            				Set childObj=Browser("name:="& browserName).ChildObjects(obj)
					pageTitle=childObj(0).GetROProperty("title")

				If  Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("class:="& webElementClass ,"html tag:="& webElementHTMLTag,"innertext:="&webElemenInnerText).Exist(3) Then
						Set objElement = Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("class:="& webElementClass ,"html tag:="& webElementHTMLTag,"innertext:="&webElemenInnerText)
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
							strStepDescription = "validating webelement with properties" & "[HtmlTag:="& webElementHTMLTag & ",innerText:=" & webElemenInnerText & "]" 
							ImagePath=CaptureScreenshot(objElement,strStepDescription)
						End if

						status="PASS"
						message="The Web Element '"&webElemenInnerText&"' exists"
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebElementText","2",stepName,message)
				Else
					status="FAIL"
					Flag=1
					message="The Web Element '"&webElemenInnerText&"'does not  exist"
					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebElementText","1",stepName,message)
				End If
		
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebElementText","1",stepName,message)
	End If
	'ValidateTextWebElement=strCapturedText			'Returning the Value
	'outputParameter=strCapturedText						'Setting Output Parameter
	
	Set objWebElement=Nothing
	'endTime = Timer()
	'ExeTime = FormatNumber(endTime - startTime,3)
	'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
	
	If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If

	If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	If Flag =1  Then
							ValidateWebElementText = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(imgObject,message)
		Else
							ValidateWebElementText = true

		End If
End if  
End Function

'**********************************************************************************************************************************************************************
' End Function ValidateWebElementText(browserName,webElementClass,webElementHTMLTag,webElementIndex,expectedValue)
'**********************************************************************************************************************************************************************




''***********************************************************************************
'Name of the Function : VerifyWebElementExist
'Author		    : TCS
'Date			    : 24/05/2013
'Description	    : Function to Verify if a webelement exist on page 
'Input Parameters	    : browserName = Briswer Name property 
'				WebElementName= Webelement name property
'				WebElementIndex = Webelement index property
'Output Parameters    : None 
'**********************************************************************************************************************************************************************
'Function    VerifyWebElementExist(browserName,WebElementName,WebElementIndex)
'**********************************************************************************************************************************************************************
Public Function VerifyWebElementExist(browserName,WebElementName,WebElementIndex)
    If Not Environment.Value("blnFatalError") Then
	Dim blnObjectError
    	blnObjectError=False
' 	startTime=Timer()
	stepName="Verify WebElement on Page "
	inputParameter="<b>Browser Name : </b>" & browserName &"<br><b>WebElement : </b>"& WebElementName &"<br><b>WebElement  Index : </b>" & WebElementIndex
	blnCaptureFlag = TRue 
	On Error Resume Next

	If browserName <>"" AND WebElementName <>"" AND  WebElementIndex <>"" Then
						Set objWebElement=Browser("name:="& browserName).Page("title:="& browserName).WebElement("innertext:="& WebElementName,"index:="& WebElementIndex)
						If  objWebElement.Exist(gObjectTimeoutLimit+3) Then
											'blnExceptionFlag = Error_Listener ("ClickLinkWeb",objLink)
																				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																					strStepDescription = "verifying webelement with properties" & "[Name :="& WebElementName & "]" 
																					ImagePath=CaptureScreenshot(objWebElement,strStepDescription)
																				End if

																			status="DONE"
																			message="WebElement  [ "& WebElementName &" ] successfully verified on Web Page "
																			Call ReporterFunction(strLibraryFileName,"VerifyWebElementExist","2",stepName,message)
											else
																			status="FAIL"
																			Flag=1
																			message="WebElement [ "& WebElementName &" ] not Found on page verification failed "
																			blnObjectError=True
																			Call ReporterFunction(strLibraryFileName,"VerifyWebElementExist","1",stepName,message)
						End If

		
		Else
						status="FAIL"
						Flag=1
						message="Insufficient Data Provided."
						blnObjectError=True
						Call ReporterFunction(strLibraryFileName,"VerifyWebElementExist","1",stepName,message)
	End If
	Set objLink=Nothing
	Set childObj=Nothing
	Set obj=Nothing
	'If  blnObjectError  Then
	'		Environment.Value("blnFatalError")=True
	'			CloseBrowser browserName
	'		End If
	'End If
	If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
'	endTime = Timer()
'	ExeTime = FormatNumber(endTime - startTime,3)

'  Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
    	If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If 
	If Flag =1  Then
							VerifyWebElementExist = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(imgObject,message)
		Else
							VerifyWebElementExist = true

		End If
	End if
End Function
'**********************************************************************************************************************************************************************
'End Function    VerifyWebElementExist(browserName,WebElementName,WebElementIndex)
'**********************************************************************************************************************************************************************


'******************************************************************************************************************************************************
'**************************************************************************************************************************************************************************************************
Public Function ConnectTelnet(host,userName,password, unixPath,localPath,env_Num,fileName)
	On Error Resume Next
	 If Not Environment.Value("blnFatalError") Then
    Set objShell = CreateObject("WScript.Shell") 
' ' connecting to telnet:
  SystemUtil.Run "telnet",host,"",""
        Wait(3)
  '' entering the username
  objShell.SendKeys  userName
        objShell.SendKeys "{ENTER}"
        Wait(3)
  '' entering the password:
  objShell.SendKeys password
  objShell.SendKeys "{ENTER}"
     Wait(3)

      ''Selecting the environment:
  objShell.SendKeys env_Num
  objShell.SendKeys "{ENTER}"
  Wait(5)

      ''Enter the Path:
        actualPath = "cd "& unixPath
        objShell.SendKeys  actualPath
  objShell.SendKeys "{ENTER}"
  wait(5)
   ''Enter the file name:
  fileName1= "ls -ltr " & fileName
  objShell.SendKeys  fileName1
  objShell.SendKeys "{ENTER}"
  wait(5)
actualfilename=fileName
'*********************************************************************************************************************************************************************************************************************************************
'   ''Unzip the file:
If  InStr(1,fileName,"bz2") <> 0 Then
		 fileName2= "cp "& fileName &  " /home/users/" & userName
	 wait(3)
	   objShell.SendKeys fileName2
		 objShell.SendKeys "{ENTER}"
	   objShell.SendKeys   "cd "& "/home/users/" & userName
	 objShell.SendKeys "{ENTER}"
	 wait(5)

	 var= instrrev(fileName,".")
		fileName1= mid(fileName,1,var-1)
	 Wait(3)
	 objShell.SendKeys "mv " & fileName & " "& fileName1
	 objShell.SendKeys "{ENTER}"
	 wait(5)
	 objShell.SendKeys "bunzip2 -9 " & fileName1
	 objShell.SendKeys "{ENTER}"
	 wait(5)
	 var= instrrev(fileName1,".")
	 actualfilename = mid(fileName1,1,var-1)
	  Wait(3)
End If
'*********************************************************************************************************************************************************************************************************************************************
'''Moving the File to FTPerebus:
  objShell.SendKeys  "ftp erebus"
  objShell.SendKeys "{ENTER}"
  wait(5)
  FTPuserName=Ucase(userName)
  objShell.SendKeys  FTPuserName
  objShell.SendKeys "{ENTER}"
         wait(3)
  objShell.SendKeys password
  objShell.SendKeys "{ENTER}"
  Wait(5)

  objShell.SendKeys "put " & actualfilename
  objShell.SendKeys "{ENTER}"
        wait(5)
  objShell.SendKeys "bye" 
  objShell.SendKeys "{ENTER}"
        wait(3)
  objShell.SendKeys "exit"
  objShell.SendKeys "{ENTER}"
        wait(3)
  objShell.SendKeys "q"
  objShell.SendKeys "{ENTER}"
  objShell.SendKeys "{ENTER}"
  objShell.SendKeys "{ENTER}"
''*********************************************************************************************************************************************************************************************************************************************
''' Moving the File to Local path from FTPerebus:
        SystemUtil.Run "cmd"
        objShell.SendKeys  "Ftp erebus"
  objShell.SendKeys "{ENTER}"
  wait(5)
  FTPuserName=Ucase(userName)
  objShell.SendKeys  FTPuserName
  objShell.SendKeys "{ENTER}"
         wait(3)
  objShell.SendKeys password
  objShell.SendKeys "{ENTER}"
  Wait(5)
  objShell.SendKeys "lcd "& localPath
  objShell.SendKeys "{ENTER}"
  Wait(5)
     objShell.SendKeys "get "& actualfilename
  objShell.SendKeys "{ENTER}"
  Wait(5)
     objShell.SendKeys "bye"
  objShell.SendKeys "{ENTER}"
  Wait(5)
     objShell.SendKeys "exit"
  objShell.SendKeys "{ENTER}"
  Wait(5)

  End IF
  End Function

'***************************************************************************************************************************************************************************************




Public Function CompareFilesInTextFormat(strSourceFile,strTargetFile,strLogFile)
On error resume next
'	 If Not Environment.Value("blnFatalError") Then
'	Dim blnObjectError
'    blnObjectError=False
	'startTime=Timer()
	stepName="Compare Files"
	inputParameter="<b>Source File Path :</b>" & strSourceFile &"<br><b>Target File Path : </b>"& strTargetFile &"<br><b>Result File Path </b>" & strLogFile


	 iStartTime = Timer()
	' statusResult = CompareTextFiles(strSourceFile,strTargetFile,strLogFile) ' e-Swift Function to be Called from Script
	statusResult = CompareTextFiles_LineVsLine(strSourceFile,strTargetFile,strLogFile)
	reportResult = inStr(1,statusResult,"PASS",0)
	'msgbox reportResult
    	
	iEndTime = Timer()
	iDuration = iEndTime -iStartTime
	Call WriteLogFile(VbCrLf& "Executed in [ "& FormatNumber(iDuration,2) & " ] Seconds",strLogFile)

    If  reportResult <> 0 Then
		status="DONE"
		message="Compared Files are SAME"
		Call ReporterFunction("e-Swift_FunctionLibrary","CompareFilesInTextFormat","2",stepName,message)
	Else
		status="FAIL"
	    Flag=1
		message="Compared Files are DIFFERENT "
		Call ReporterFunction("e-Swift_FunctionLibrary","CompareFilesInTextFormat","1",stepName,message)
	End If
'    endTime = Timer()
'	ExeTime = FormatNumber(endTime - startTime,3)

'  Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
	If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

			If Flag =1  Then
							CompareFilesInTextFormat = message
							blnMainFailFlag = True
			Else
							CompareFilesInTextFormat = True
			End If
End Function


'*********************************************************************************************************************************************************************
'Name of the Function
'											:	CompareTextFiles
'Author
'											:	TCS
'Date			   				  
'											:	27.04.2013
'Description					
'											:	Compares two flat files in .txt, .dat, .in, .out and .csv format and prints the result in a text file.
'Input Parameters	     
'											:	strSourceFile : Path of the Source file along with the extension
'												strTargetFile : Path of the Target file along with the extension
'												strLogFile : Path of the Result file along with the extension
'Output Parameters      
'											: None
'**********************************************************************************************************************************************************************
'Function    CompareTextFiles(strSourceFile,strTargetFile,strLogFile)
'**********************************************************************************************************************************************************************
Public Function CompareTextFiles(strSourceFile,strTargetFile,strLogFile)
on error resume next
	Dim iLineNo : iLineNo =1
	Dim iMatchFoundCounter : iMatchFoundCounter = 0 
	Dim iNonMatchcounter : iNonMatchcounter = 0
	Dim strBreakSymbol : strBreakSymbol = "---------------------------------------------------------" & vbCrLf 
	Dim blnSameLengthFiles,strSmallerFileName 
	Const ForReading = 1
	blnSameLengthFiles = False

	iNoLines_SourceFile= GetNoLines(strSourceFile)
	iNoLines_TargetFile= GetNoLines(strTargetFile)

	If iNoLines_SourceFile= iNoLines_TargetFile then
      	 giMinLoopCount = iNoLines_SourceFile
		 blnSameLengthFiles = True
	elseif iNoLines_SourceFile> iNoLines_TargetFile then
      	 giMinLoopCount = iNoLines_TargetFile 
		 strSmallerFileName = fso.GetFileName(strTargetFile)
	elseif iNoLines_SourceFile< iNoLines_TargetFile then
      	 giMinLoopCount = iNoLines_SourceFile
		 strSmallerFileName = fso.GetFileName(strSourceFile)
	End if 

	strSymbol ="%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"

	strInitialLines =strSymbol & vbCrLf& vbCrLf& "File Comparison Report : " &  Now()& vbCrLf &"SourceFile Name = """& fso.GetFileName(strSourceFile) _
	& """  : Total Lines = " & (iNoLines_SourceFile+1) & VbCrLf& "TargetFile Name = """ & fso.GetFileName(strTargetFile) &"""  : Total Lines = " & (iNoLines_TargetFile +1)

	If Not blnSameLengthFiles  then
		strInitialLines = strInitialLines &VbCrLf & "Files are of Different Size.Comparison Will be Done till Line No [ " & giMinLoopCount & " ] of File := """ &  strSmallerFileName  & """"
	End if 
      strInitialLines = strInitialLines & vbCrlf & vbCrlf & strSymbol  
	Call WriteLogFile(strInitialLines,strLogFile)

	Set objSourceFile= fso.OpenTextFile(strSourceFile, ForReading)  
	Set objTargetFile= fso.OpenTextFile(strTargetFile, ForReading)    


	Dim arrTargetFileLines()

	Do Until objTargetFile.AtEndOfStream
	    Redim Preserve arrTargetFileLines(i)
	    arrTargetFileLines(i) = objTargetFile.ReadLine
	    i = i + 1
	Loop


	
      'strTargetFileContent= trim(objTargetFile.ReadAll)
	For iCnt = 0 to iNoLines_SourceFile
		strSourceFileLine= trim(objSourceFile.Readline)
		For iCnt_T = 0 to Ubound(arrTargetFileLines)
			blnMatchFound = False
			strTargetFileLine= trim(arrTargetFileLines(iCnt_T))
			If trim(strSourceFileLine)=trim(strTargetFileLine) Then
				  blnMatchFound = True
				  iMatchFoundCounter = 	iMatchFoundCounter + 1
				  strValue = "LineNo[" & iLineNo & "]"&" : MATCH " & VbCrLf & "Source Data Searched:" & strSourceFileLine & VbCrLf 
		    		  Call WriteLogFile(strValue & strBreakSymbol,strLogFile)  
				  Exit For 
			End if 
		Next
		If Not blnMatchFound  Then
			blnComparisonFail = True
			iNonMatchcounter = iNonMatchcounter + 1
			giMisMatchedLineNo = giMisMatchedLineNo & "[" & iLineNo & "]" 
			strLogLine = "LineNo [" & iLineNo & "]" & ": NO MATCH FOUND " & VbCrLf & "Source Data Searched: "& strSourceFileLine & vbCrlf & "Source Line Length :" & len(strSourceFileLine)& vbCrlf & strBreakSymbol & VbCrLf 
			Call WriteLogFile(strLogLine,strLogFile)
		End If 
		iLineNo = iLineNo + 1
	Next


	Call WriteLogFile("==============================XXXXXXXX=============================="&vbCrlf,strLogFile)

	if blnComparisonFail Then
		strVerdict = "Compared Files are NOT SAME " & vbCrLf & "MisMatch Found in Line Numbers:=  " & giMisMatchedLineNo &  VbCrLf 
		strVerdict =  strVerdict & "Total Lines Searched from Source File :" &( iNoLines_SourceFile+1) &  VbCrLf  
		strVerdict =  strVerdict & "Total Successful Searched Line :"& iMatchFoundCounter &  VbCrLf  
		strVerdict =  strVerdict & "Total Failed Search Line :"& iNonMatchcounter &  VbCrLf  
		strVerdict =  strVerdict & "STATUS : FAIL "    
	else
		strVerdict =  "Total Lines Searched from Source File :" & (iNoLines_SourceFile+1) &  VbCrLf  
		strVerdict =  strVerdict & "Total Successful Searched Line :"& iMatchFoundCounter &  VbCrLf  
		strVerdict =  strVerdict &"Compared Files are SAME " & VBCrLf & "STATUS : PASS "
	End if 

	Call WriteLogFile(strVerdict,strLogFile)
	Call WriteLogFile("==============================XXXXXXXX=============================="&vbCrlf,strLogFile)
	
	objTargetFile.close  
	objSourceFile.close 
	CompareTextFiles = strVerdict
End Function
'******************************************************************************************
'End Function to CompareTextFiles(strSourceFile,strTargetFile,strLogFile) 
'******************************************************************************************


'**************************************************
'Function to Match 2 String lines 
'**************************************************

Public Function MatchLines(strLine1,strLine2,iLineNo,strLogFile)
on error resume next

	strResult = "---------------------------------------------------------" & vbCrLf & " Line No. = "& iLineNo 
	If Ucase(strLine1)= Ucase(strLine2) Then 
	   strResult = strResult  & " : MATCH "
	Else
	   blnComparisonFail= True
	   giMisMatchedLineNo = giMisMatchedLineNo& " [ " & iLineNo & " ] "
	   strResult = strResult  & " : MIS-MATCH " & vbCrLf & vbCrLf & " Total Characters in Source File := ["& len(strLine1)&"]" & vbCrLf & " Total Characters in Target File := [" & len(strLine2) &"]"
	   strResult = strResult  & vbCrLf & vbCrLf & " SourceFile Data : " & strLine1 & vbCrLf & " TargetFile Data : "& strLine2

 	End if 
	Call WriteLogFile(strResult,strLogFile)
     
End Function
'**************************************************
'End Function to Match 2 String lines 
'**************************************************


'*************************************************************************************************************************************************************************
'Function    GetNoLines(strFile) 
'**********************************************************************************************************************************************************************
Public Function GetNoLines(strFile)  
on error resume next
	 Const ForReading = 1
	 Const ForAppending = 8

       If fso.FileExists(strFile) Then
		 Set objInputFile= fso.OpenTextFile(strFile, ForAppending )  
		 'msgbox objInputFile.Line -1
		 GetNoLines = objInputFile.Line -1
	  	 objInputFile.Close
	 End if 
End Function
'**********************************************************************************************************************************************************************
'End Function    GetNoLines(strFile) 
'**********************************************************************************************************************************************************************



'*********************************************************************************************************************************************************************
'Name of the Function
'											:	CompareTextFiles_LineVsLine
'Author
'											:	TCS
'Date			   				  
'											:	27.04.2013
'Description					
'											:	Compares two flat files line vs line in .txt, .dat, .in, .out and .csv format and prints the result in a text file.
'Input Parameters	     
'											:	strSourceFile : Path of the Source file along with the extension
'												strTargetFile : Path of the Target file along with the extension
'												strLogFile : Path of the Result file along with the extension
'Output Parameters      
'											: None
'**********************************************************************************************************************************************************************
'Function    CompareTextFiles_LineVsLine(strSourceFile,strTargetFile,strLogFile)
'**********************************************************************************************************************************************************************
Public Function CompareTextFiles_LineVsLine(strSourceFile,strTargetFile,strLogFile)
	On Error Resume Next
		Dim iLineNo : iLineNo =1
		Dim blnSameLengthFiles,strSmallerFileName 
		Const ForReading = 1
		blnSameLengthFiles = False
	
		iNoLines_SourceFile = GetNoLines(strSourceFile)
		iNoLines_TargetFile= GetNoLines(strTargetFile)
		If iNoLines_SourceFile= iNoLines_TargetFile Then
			giMinLoopCount = iNoLines_SourceFile
			blnSameLengthFiles = True
		ElseIf iNoLines_SourceFile> iNoLines_TargetFile Then
			giMinLoopCount = iNoLines_TargetFile 
			strSmallerFileName = fso.GetFileName(strTargetFile)
		ElseIf iNoLines_SourceFile< iNoLines_TargetFile Then
			giMinLoopCount = iNoLines_SourceFile
			strSmallerFileName = fso.GetFileName(strSourceFile)
		End if 

		strSymbol ="%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"

		strInitialLines =strSymbol & vbCrLf& vbCrLf& "Line Based File Comparison Report : " &  Now()& vbCrLf &"SourceFile Name = """& fso.GetFileName(strSourceFile) _
		& """  : Total Lines = " & (iNoLines_SourceFile+1) & VbCrLf& "TargetFile Name = """ & fso.GetFileName(strTargetFile) &"""  : Total Lines = " & (iNoLines_TargetFile+1)

		If Not blnSameLengthFiles  then
			strInitialLines = strInitialLines &VbCrLf & "Files are of Different Size.Comparison Will be Done till Line No [ " & giMinLoopCount & " ] of File := """ &  strSmallerFileName  & """"
		End if 

		strInitialLines = strInitialLines & vbCrlf & vbCrlf & strSymbol  
		Call WriteLogFile(strInitialLines,strLogFile)
		Set objSourceFile= fso.OpenTextFile(strSourceFile, ForReading)  
		Set objTargetFile= fso.OpenTextFile(strTargetFile, ForReading)    
		For iCnt = 1 to giMinLoopCount +1
			strSourceFileLine= objSourceFile.Readline  
			strTargetFileLine= objTargetFile.Readline  
			Call MatchLines(trim(strSourceFileLine),trim(strTargetFileLine),iLineNo,strLogFile)	
			iLineNo = iLineNo + 1
		Next  

		Call WriteLogFile("==============================XXXXXXXX=============================="&vbCrlf,strLogFile)

		If blnComparisonFail Then
			strVerdict = "Compared Files are NOT SAME " & vbCrLf & "MisMatch Data Found in Line Numbers:=  " & giMisMatchedLineNo & VbCrLf & "STATUS : FAIL "    
		ElseIf Not blnSameLengthFiles then
			strVerdict = "Compared Files are SAME Till Line No: " & giMinLoopCount & " of Smaller File := """ & strSmallerFileName &"""" & VBCrLf & "STATUS : FAIL (as File sizes are Different)"
		Else
			strVerdict = "Compared Files are EXACTLY SAME  " & VBCrLf & "STATUS : PASS "
		End if 

		Call WriteLogFile(strVerdict,strLogFile)
		Call WriteLogFile("==============================XXXXXXXX=============================="&vbCrlf,strLogFile)

		CompareTextFiles_LineVsLine = strVerdict
		objTargetFile.close  
		objSourceFile.close  
End Function
'**********************************************************************************************************************************************************************
'End Function    CompareTextFiles_LineVsLine(strSourceFile,strTargetFile,strLogFile)
'**********************************************************************************************************************************************************************


'******************************************************************************************************************************************************************
'Name of the Function		   ->SelectRadioButtonTabbedRegionWithoutDevName
'Author									      ->TCS
'Date			     					       ->07/11/2011
'Description		    		         ->Select a radio Button in a tabbed Region
'Input Parameters	               ->formShortTitle->Short Title property value of the Form,
														'tabbedRegionLableName->Label of the Tabbed Region
														',tabbedRegionIndex -> Index Value of the Tabbed Region
'														radioGroupDeveloperName->Developer Name property value of the Radio Group
'														,buttonName-Name of the radio button
'Output Parameters              ->None
'********************************************************************************************************************************************************************
'Function SelectRadioButtonTabbedRegionWithoutDevName(formShortTitle,tabbedRegionLableName,tabbedRegionIndex,radioGroupDescription,buttonName)
'********************************************************************************************************************************************************************
 Public Function SelectRadioButtonTabbedRegionWithoutDevName(formShortTitle,tabbedRegionLableName,tabbedRegionIndex,selecteditem,buttonName)

	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		'startTime=Timer()
		stepName="Select Tabbed Region Radio Button"
		inputParameter="<b>Form short Title:</b>"& formShortTitle &"<br><b>Developer Name of  Radio Group : </b>"& selecteditem & "<br><b>Name of the radio button : </b>" & buttonName 
		On error resume next
		If formShortTitle <>"" And tabbedRegionLableName<>"" And selecteditem<>""  And buttonName <>"" Then
			If OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("Label:="&tabbedRegionLableName,"index:=" & tabbedRegionIndex).OracleRadioGroup("selected item:=" & selecteditem).Exist  Then
				Set radioObject=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("Label:="&tabbedRegionLableName,"index:=" & tabbedRegionIndex).OracleRadioGroup("selected item:=" & selecteditem)
				If  radioObject.GetRoProperty("enabled")  Then		 
					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
						strStepDescription = "Selects Radio button with properties " & "[Developer Name of  Radio Group := "& selecteditem & "Name of the radio button :=" & buttonName  & "]" 
						ImagePath=CaptureScreenshot(radioObject,strStepDescription)
					End if
					radioObject.Select buttonName
					selectedRadioButton= radioObject.GetROProperty("selected item")
					blnExceptionFlag = Error_Listener ("Select Radio Button",radioObject)
                    'If Not blnExceptionFlag and  radioObject.VerifySelected(buttonName)  Then
					If selectedRadioButton=buttonName and  Not blnExceptionFlag Then
						status="DONE"
						message="[ " & buttonName & " ] radio Button selected "
						Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioButtonTabbedRegionWithoutDevName","2",stepName,message)
					Else
						status="DONE"
						Flag=1
						
					End If
                Else
					status="FAIL"
					Flag=1
					message="[ " & buttonName & " ] radio Button Not Enabled"
					Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioButtonTabbedRegionWithoutDevName","1",stepName,message)
				End If
			Else	
				status="FAIL"
				Flag=1
				message="Radio Group Object not exist"
				Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioButtonTabbedRegionWithoutDevName","1",stepName,message)
			End If
		Else
			Flag=1
			status="FAIL"
			message="Input Parameter Missing"
			Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioButtonTabbedRegionWithoutDevName","1",stepName,message)
		End If
		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3) 
		'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
        If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
        
			If Flag =1  Then
							SelectRadioButtonTabbedRegionWithoutDevName = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(radioObject,message)
			Else
							SelectRadioButtonTabbedRegionWithoutDevName = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If
End Function
'***********************************************************************************
'Function SelectRadioButtonTabbedRegionWithoutDevName END
'**************************************************************************************





'*******************************************************************************************************************
'Name of the Function	 ->SetFocusForm_FieldDescription
'Author									->TCS
'Date									 ->07/09/2011
'Description					   ->Set the focus to a specific field(text box )
'			        
'			        
'Input Parameters			 ->formShortTitle - Short title of the form
'													textFieldDescription- textFieldDescription   of the text field
''Example                          ->Call SetFocusForm("Purchase Orders","prompt")										
'**********************************************************************************************************************************************************************
'Function    SetFocusForm_FieldDescription(formShortTitle,textFieldDeveloperName)
'**********************************************************************************************************************************************************************
Public Function SetFocusForm_FieldDescription(formShortTitle,textFieldDescription,textFieldIndex)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
        blnObjectError=False
		startTime=Timer()
		stepName="Set Focus"
		inputParameter="<b>Form short Title:</b>"& formShortTitle &"<br><b>Description of field : </b>"& textFieldDescription & "<br><b>Index : </b>" & textFieldIndex
		Dim textFieldPrompt
		On error resume next
		If formShortTitle<>"" and textFieldDescription<>""  Then
            If  OracleFormWindow("short title:=" & formShortTitle).OracleTextField("description:=" & textFieldDescription,"index:=" & textFieldIndex).Exist(3) Then
'	       If    OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName).GetROProperty("editable")=True  Then
				OracleFormWindow("short title:=" & formShortTitle).OracleTextField("description:=" & textFieldDescription,"index:=" & textFieldIndex).SetFocus
				Set objTextField=OracleFormWindow("short title:=" & formShortTitle).OracleTextField("description:=" & textFieldDescription,"index:=" & textFieldIndex)
                If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
						 strStepDescription = "Set focus to text field with properties " & "[Description := "&textFieldDescription & "Index :=" & textFieldIndex  & "]" 
						ImagePath=CaptureScreenshot(objTextField,strStepDescription)
					End if
				blnExceptionFlag = Error_Listener ("SetFocusFormField",objTextField)
				If  Not blnExceptionFlag Then
						status="DONE"
						message="Focus is set to" & textFieldDescription
						Call ReporterFunction("e-Swift_FunctionLibrary","SetFocusForm_FieldDescription","2",stepName,message)
					Else
						Flag=1
						status="FAIL"
						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
						Call ReporterFunction("e-Swift_FunctionLibrary","SetFocusForm_FieldDescription","1",stepName,message)																	
					End If	

'			 Else		       			  
'								 status="FAIL"																						'''''''''''''''''''Removed on 02.08.2012 CR # 10
'								 Flag=1
'								 message=textFieldPrompt &"Not Editable" 
'								 blnObjectError=True
'								 Call ReporterFunction("e-Swift_FunctionLibrary","SetFocusForm","1",stepName,message)
'		   End If
				Else
                     status="FAIL"
					 Flag=1
					 message=textFieldPrompt & " Doesn't exist"
					 blnObjectError=True
					 Call ReporterFunction("e-Swift_FunctionLibrary","SetFocusForm_FieldDescription","1",stepName,message)
			End If
        Else
			status="FAIL"
			Flag=1
			message="One or more missing parameters"
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","SetFocusForm_FieldDescription","1",stepName,message)
		End If
		Set textFieldPrompt=Nothing
'	stop
		'endTime=Timer()
		'exeTime= FormatNumber(endTime - startTime,3) 
		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
		If  blnObjectError  Then
				Environment.Value("blnFatalError")=True
				Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
							SetFocusForm_FieldDescription = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTextField,message)
			Else
							SetFocusForm_FieldDescription = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If


	End If
End Function

'***************************'************************************************************************************************
'End Function - SetFocusForm_FieldDescription
'***************************************************************************************************************************





'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ClickLinkWebIfCollapsed(browserName,linkName,linkIndex)
'Author
'											:	251603
'Date			   				  
'											:	11.01.2014
'Description					
'											:	Clicking a Link in Web based Oracle Forms
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												linkName: Name Property of the Link
'												linkIndex: Index of the Link
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    ClickLinkWebIfCollapsed(browserName,linkName,linkIndex)
'**********************************************************************************************************************************************************************
Public Function ClickLinkWebIfCollapsed(browserName,linkName,linkIndex)
    If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		startTime=Timer()
		stepName="Click Link"
		inputParameter="<b>Browser Name : </b>" & browserName &"<br><b>Link Name : </b>"& linkName &"<br><b>Link Index : </b>" & linkIndex

		On Error Resume Next

		If browserName <>"" AND linkName <>"" AND  linkIndex <>"" Then
			Set obj= Description.Create()
			obj("micclass").value="Page"
			Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")
			Set objLink=Browser("name:="& browserName).Page("title:="& pageTitle).Link("name:="& linkName,"index:="& linkIndex)
			If  objLink.Exist(10) Then
				If objLink.GetROProperty("disabled")=0  Then
					If instr(Lcase(objLink.GetROProperty("innerhtml")),"alt=expand")<>0 OR instr(Lcase(objLink.GetROProperty("innerhtml")),"alt=""expand""")<>0 Then
							 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
								strStepDescription = "Click Collapsed Link  with properties " & "[Name := "&linkName & "Index :=" & linkIndex  & "]" 
								ImagePath=CaptureScreenshot(objLink,strStepDescription)
							End if
						objLink.Click
					End If
					blnExceptionFlag = Error_Listener ("ClickLinkWebIfCollapsed",objLink)
					If  Not blnExceptionFlag Then
						status="DONE"
						message="Link [ "& linkName &" ] has been Clicked Successfully."
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWebIfCollapsed","2",stepName,message)
					Else
						Flag=1
						status="FAIL"
						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWebIfCollapsed","1",stepName,message)																	
					End If

				Else
					status="FAIL"
					Flag=1
					message="Link [ "& linkName &" ] is Disabled."
					blnObjectError=True
					Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWebIfCollapsed","1",stepName,message)
				End If
			Else
				status="FAIL"
				Flag=1
				message="Link [ "& linkName &" ] not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWebIfCollapsed","1",stepName,message)
			End If
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWebIfCollapsed","1",stepName,message)
		End If
		Set objLink=Nothing
		Set childObj=Nothing
		Set obj=Nothing
		'endTime = Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)

		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
			If Flag =1  Then
							ClickLinkWebIfCollapsed = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objLink,message)
			Else
							ClickLinkWebIfCollapsed = True
			End If
			If blnDefault_eSwiftReporting Then  
				Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If

	End If
End Function
'**********************************************************************************************************************************************************************
'End Function ClickLinkWebIfCollapsed(browserName,linkName,linkIndex)
'**********************************************************************************************************************************************************************



'**********************************************************************************************************************************************************************


'Name of the Function   : UploadFileOnClick
'Author		     					  :TCS
'Date			 				     :30-Jan-2014
'Description		          : Uploads a file to apllication by specifying the path of the file
'			        
'			        
'Input Parameters	     : browserTitle -> Title property value  of the Browser 
                                           'pageTitle   ->   Title property value of the Page
										   'webFileName ->Name property value of the WebFile
										   'attachmentFilePath -> Attachment File Path  
										   'buttonHtmlid  ->Html id  property value of the button
'Output Parameters        :		None
'**********************************************************************************************************************************************************************
'Function    UploadFileOnClick(browserTitle,pageTitle,webFileName,attachmentFilePath,buttonName)
'**********************************************************************************************************************************************************************
Public Function UploadFileOnClick(browserTitle,pageTitle,webFileName,attachmentFilePath,buttonName)
   	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False

		startTime=Timer()
		Set filesys = CreateObject("Scripting.FileSystemObject")
		stepName="Upload a File "
		inputParameter="<b>Title of the Browser :</b>" & browserTitle &"<br><b>Title of the Page : </b>" & pageTitle &"<br><b>Name of the WebFile : </b>"& webFileName  &"<br><b> Attachment File Path : </b>"& attachmentFilePath &"<br><b>Name of the button : </b>"& buttonName 
		On error resume next
	
		If browserTitle<>"" AND pageTitle<>"" AND webFileName<>"" AND attachmentFilePath<>"" AND buttonName<>""  Then
			If  Browser("title:=" & browserTitle).Page("title:=" & pageTitle).WebFile("name:=" & webFileName).exists AND Browser("title:=" & browserTitle).Page("title:=" & pageTitle).WebButton("name:=" & buttonName).Exist(3) Then
						Set objWebButton=Browser("title:=" & browserTitle).Page("title:=" & pageTitle).WebButton("name:=" & buttonName)
						 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
								strStepDescription = "Upload File  " & "[Web File Name := "& webFileName & "and clicks button[ Name :=" & buttonName  & "]" 
								ImagePath=CaptureScreenshot(objWebButton,strStepDescription)
							End if
				Browser("title:=" & browserTitle).Page("title:=" & pageTitle).WebFile("name:=" & webFileName).Click
				Browser("title:=" & browserTitle).Dialog("text:=Choose File to Upload").WinEdit("attachedtext:=File &name:","nativeclass:=Edit").Set attachmentFilePath	
				Browser("title:=" & browserTitle).Dialog("text:=Choose File to Upload").WinButton("text:=&Open").Click			
				Browser("title:=" & browserTitle).Page("title:=" & pageTitle).WebButton("name:=" & buttonName).Click	
				blnExceptionFlag = Error_Listener ("UploadFileOnClick",objWebButton)
				If  Not blnExceptionFlag Then
					status="DONE"
					message="File uploaded successfully"
					Call ReporterFunction("e-Swift_FunctionLibrary","UploadFileOnClick","2",stepName,message)
				Else
					Flag=1
					status="FAIL"
					message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
					Call ReporterFunction("e-Swift_FunctionLibrary","UploadFileOnClick","1",stepName,message)					
												
				End If	

			Else 
				status="FAIL"
				Flag=1
				message="Object Does not exists"  
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","UploadFileOnClick","1",stepName,message)
			End If 
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","UploadFileOnClick","1",stepName,message)
		End If

		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3) 
		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
			If Flag =1  Then
							UploadFileOnClick = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebButton,message)
			Else
							UploadFileOnClick = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

	End If
End Function
'**********************************************************************************************************************************************************************

'End Function  UploadFileOnClick(browserTitle,pageTitle,webFileName,filePath,buttonName)
'**********************************************************************************************************************************************************************



Public Function ClickButtonWithoutNotificationHandling(formShortTitle,buttonDescriptionOrLabel)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		'startTime=Timer()
		stepName="Click Button"
		inputParameter="<b>Short Title of the Form : </b>" & formShortTitle & "<br><b>Button Description/Label : </b>" & buttonDescriptionOrLabel

		On Error Resume Next
		Dim objButton,intSetFlag
		intSetFlag=1
	
		If formShortTitle<>"" AND buttonDescriptionOrLabel<>"" Then
			If OracleFormWindow("short title:="& formShortTitle).OracleButton("description:="& buttonDescriptionOrLabel).Exist(3) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle).OracleButton("description:="& buttonDescriptionOrLabel)
				intSetFlag=0
			ElseIf OracleFormWindow("short title:="& formShortTitle).OracleButton("label:="& buttonDescriptionOrLabel).Exist(3) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle).OracleButton("label:="& buttonDescriptionOrLabel)
				intSetFlag=0
			Else
				status="FAIL"
				Flag=1
				message="[ " & buttonDescriptionOrLabel &"] Button does not Exist."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWithoutNotificationHandling","1",stepName,message)
			End If

			If intSetFlag=0 Then
				If objButton.GetROProperty("enabled") Then
					 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
								strStepDescription = "Without Any notification handling Just Clicks button  " & "[Button Description/Label :  := "&  buttonDescriptionOrLabel &  "]" 
								ImagePath=CaptureScreenshot(objButton,strStepDescription)
							End if
					objButton.Click
                    'blnExceptionFlag = Error_Listener ("ClickButton",objButton)
			        If  Not blnExceptionFlag Then
							status="DONE"
							message="[ " & buttonDescriptionOrLabel &"] Button clicked Successfully."
							Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWithoutNotificationHandling","2",stepName,message)
			        Else
							Flag=1
							status="FAIL"
							message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
							Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWithoutNotificationHandling","1",stepName,message)																	
					End If     
				Else
						status="FAIL"
						Flag=1
						message="[ " & buttonDescriptionOrLabel &"] Button is Disabled."
						blnObjectError=True
					   Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWithoutNotificationHandling","1",stepName,message)
				End If
			End If		
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWithoutNotificationHandling","1",stepName,message)
		End If

		Set objButton=Nothing
		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)

		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		 If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
			If Flag =1  Then
							ClickButtonWithoutNotificationHandling = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objButton,message)
			Else
							ClickButtonWithoutNotificationHandling = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

	End If
End Function

'**********************************************************************************************************************************************************************


'Name of the Function   : WaitForSeconds
'Author		     					  :TCS
'Date			 				     :30-Jan-2014
'Description		          : Waits for a specified time.
'			        
'			        
'Input Parameters	     : timeInSeconds -> TIme to wait
'Output Parameters        :		None
'**********************************************************************************************************************************************************************
'Function    WaitForSeconds(timeInSeconds)
'**********************************************************************************************************************************************************************
Public Function WaitForSeconds(timeInSeconds)
  Wait (timeInSeconds)
End Function
'**********************************************************************************************************************************************************************

'End Function  WaitForSeconds(timeInSeconds)
'**********************************************************************************************************************************************************************

'*********************************************************************************************************************************************************************
'Name of the Function
'											:	RefreshRequestNoDeveloperNameOrDesc(requestNumber,maxTimeOut)
'Author
'											:	TCS
'Date			   				  
'											:	23.09.2011
'Description					
'											:	Refreshing a given Request until the request completes or Maximum Timeout reaches
'												( This Function is a customized function for the Request page. Need Find Request Page to be opened to operate upon.)
'Input Parameters	     
'											:	requestNumber : Request Number to Refresh
'												maxTimeOut : Maximum allowed time for a request to be waited for
'Output Parameters      
'											:	requestStatus : Status of the Request after refreshing for the given timelimit
'**********************************************************************************************************************************************************************
'Function    RefreshRequestNoDeveloperNameOrDesc(requestNumber,maxTimeOut)
'**********************************************************************************************************************************************************************
Public Function RefreshRequestNoDeveloperNameOrDesc(requestNumber,maxTimeOut)
	If Not Environment.Value("blnFatalError") Then
		startTime=Timer()
		stepName="Refresh a Request and Return Status"
		inputParameter="<b>Request Number :</b>" & requestNumber &"<br><b>Maximum Timeout : </b>"& maxTimeOut & " Second(s)"
		On Error Resume Next
		requestStatus=""

		If maxTimeOut="" Then
			maxTimeOut=700
			inputParameter="<b>Request Number :</b>" & requestNumber &"<br><b>Maximum Timeout : </b> 800 Second(s)"
		End If

		If requestNumber<>"" Then
			If OracleFormWindow("short title:=Find Requests").Exist(3)  Then
			Set obj= Description.Create()
			obj("micclass").value="OracleRadioGroup"
			Set childObj=OracleFormWindow("short title:=Find Requests").ChildObjects(obj)
			childObj(0).select "Specific Requests"

				Set objReqfield = OracleFormWindow("short title:=Find Requests").OracleTextField("description:=Request ID")
					 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
								strStepDescription = "Returns status by refreshing  request with number "&"[" & requestNumber &  "]" 
								ImagePath=CaptureScreenshot(objReqfield,strStepDescription)
					End if
				objReqfield.Enter requestNumber
				OracleFormWindow("short title:=Find Requests").OracleButton("label:=Find").Click
				If OracleFormWindow("short title:=Requests").Exist(3) Then
						Do
								Wait(1)
								OracleFormWindow("short title:=Requests").OracleButton("description:=Refresh Data").Click
								iWaitCounter = iWaitCounter  + 1
								Loop Until (OracleFormWindow("short title:=Requests").OracleTextField("description:=Phase","index:=0").GetROProperty("value") = "Completed") OR (iWaitCounter >maxTimeOut)
        						requestName	= OracleFormWindow("short title:=Requests").OracleTextField("description:=Name","index:=0").GetROProperty("value")
								requestPhase =  OracleFormWindow("short title:=Requests").OracleTextField("description:=Phase","index:=0").GetROProperty("value")
								requestStatus = OracleFormWindow("short title:=Requests").OracleTextField("description:=Status","index:=0").GetROProperty("value")
								If iWaitCounter <maxTimeOut Then
									If requestStatus="Normal" Then
												status="DONE"
												message= "[ " & requestName & " ] : Request Executed Successfully."
												outputParameter="Request Status : [ " & requestStatus &" ]"
												Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestNoDeveloperNameOrDesc","2",stepName,message)
									ElseIf requestStatus="Error" Then					  
												status="FAIL"
												Flag=1
												message= "[ " & requestName & " ] : Error occured during Execution."
												outputParameter="Request Status : [ " & requestStatus &" ]"
												Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestNoDeveloperNameOrDesc","1",stepName,message)
									Else
												status="FAIL"
												Flag=1
												message="Execution Completed with Warning"
												outputParameter="Request Status : [ " & requestStatus &" ]"
												Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestNoDeveloperNameOrDesc","1",stepName,message)
									End If			
								Else
										status="FAIL"
										Flag=1
										message="Maximum Timeout Exceeded."
										outputParameter="Request Status before Timeout : [ "& requestStatus &" ]<br>Request Phase before Timeout : [ "& requestPhase &" ]"
										Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestNoDeveloperNameOrDesc","1",stepName,message)
								End If
							Else
									status="FAIL"
									Flag=1
									message="Request Page not Found."
									blnObjectError=True
									Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestNoDeveloperNameOrDesc","1",stepName,message)
							End If
						Else
							status="FAIL"
							Flag=1
							message="Invalid Request Number."
							Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestNoDeveloperNameOrDesc","1",stepName,message)
					End If
				Else
						status="FAIL"
						Flag=1
						message="No Request Number Provided."
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestNoDeveloperNameOrDesc","1",stepName,message)
				End If

				'endTime = Timer()
				'ExeTime = FormatNumber(endTime - startTime,3)
				'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

				If  blnObjectError  Then
					Environment.Value("blnFatalError")=True
					Call Error_Recovery ("CloseAllForms")
				End If
			
				If Flag =1  Then
							RefreshRequestNoDeveloperNameOrDesc = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objReqfield,message)
			Else
								RefreshRequestNoDeveloperNameOrDesc=requestStatus
			End If
			If blnDefault_eSwiftReporting Then  
				Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If


	End If
End Function
'**********************************************************************************************************************************************************************
'End Function RefreshRequestNoDeveloperNameOrDesc(requestNumber,maxTimeOut)
'**********************************************************************************************************************************************************************

'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ClickButtonWithoutHandlingNotification(formShortTitle,buttonDescriptionOrLabel)
'Author
'											:	TCS
'Date			   				  
'											:	05.02.2014
'Description					
'											:	Clicking a Button in Oracle Form        
'Input Parameters	     
'											:	formShortTitle : Short Title Property of the Oracle Form
'												buttonDescriptionOrLabel : Description / Label Property of the Button 
'												(Choose which one is available. Can choose either  in case both are present)
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    ClickButtonWithoutHandlingNotification(formShortTitle,buttonDescriptionOrLabel)
'**********************************************************************************************************************************************************************
Public Function ClickButtonWithoutHandlingNotification(formShortTitle,buttonDescriptionOrLabel)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		startTime=Timer()
		stepName="Click Button"
		inputParameter="<b>Short Title of the Form : </b>" & formShortTitle & "<br><b>Button Description/Label : </b>" & buttonDescriptionOrLabel

		On Error Resume Next
		Dim objButton,intSetFlag
		intSetFlag=1
	
		If formShortTitle<>"" AND buttonDescriptionOrLabel<>"" Then
			If OracleFormWindow("short title:="& formShortTitle).OracleButton("description:="& buttonDescriptionOrLabel).Exist(3) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle).OracleButton("description:="& buttonDescriptionOrLabel)
				intSetFlag=0
			ElseIf OracleFormWindow("short title:="& formShortTitle).OracleButton("label:="& buttonDescriptionOrLabel).Exist(3) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle).OracleButton("label:="& buttonDescriptionOrLabel)
				intSetFlag=0
			Else
				status="FAIL"
				Flag=1
				message="[ " & buttonDescriptionOrLabel &"] Button does not Exist."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWithoutHandlingNotification","1",stepName,message)
			End If

			If intSetFlag=0 Then
				If objButton.GetROProperty("enabled") Then
						 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
								strStepDescription = "Clicks button without handling notification   "&"[description ;=" & buttonDescriptionOrLabel  &  "] without handling notification" 
								ImagePath=CaptureScreenshot(objButton,strStepDescription)
					End if

					objButton.Click
                   ' blnExceptionFlag = Error_Listener ("ClickButtonWithoutHandlingNotification",objButton)
			        If  Not blnExceptionFlag Then
							status="DONE"
							message="[ " & buttonDescriptionOrLabel &"] Button clicked Successfully."
							Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWithoutHandlingNotification","2",stepName,message)
			        Else
							Flag=1
							status="FAIL"
							message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
							Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWithoutHandlingNotification","1",stepName,message)																	
					End If     
				Else
						status="FAIL"
						Flag=1
						message="[ " & buttonDescriptionOrLabel &"] Button is Disabled."
						blnObjectError=True
					   Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWithoutHandlingNotification","1",stepName,message)
				End If
			End If		
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWithoutHandlingNotification","1",stepName,message)
		End If

		Set objButton=Nothing
		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)

		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		 If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
        If Flag =1  Then
							ClickButtonWithoutHandlingNotification = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objButton,message)
			Else
							ClickButtonWithoutHandlingNotification = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If
End Function
'**********************************************************************************************************************************************************************
'End Function    ClickButtonWithoutHandlingNotification(formShortTitle,buttonDescriptionOrLabel)
'**********************************************************************************************************************************************************************


Public Function SelectRadioButtonWODevOrDesc (formShortTitle,radioGrpIndex,valueToSelect)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		'startTime=Timer()
		stepName="Select Radio Button"
		inputParameter="<b>Short Title of the Form : </b>" & formShortTitle & "<br><b>Radio Group Index : </b>" & radioGrpIndex & "<br><b>Value to select : </b>" & valueToSelect

			If formShortTitle<>"" AND radioGrpIndex<>"" AND valueToSelect<>"" Then
			Set obj= Description.Create()
			obj("micclass").value="OracleRadioGroup"
			Set childObj=OracleFormWindow("short title:="&formShortTitle).ChildObjects(obj)
		
			If childObj(radioGrpIndex).Exist(3) Then
				childObj(cint(radioGrpIndex)).select valueToSelect
				If Not blnExceptionFlag Then

							status="DONE"
							message="[ " & valueToSelect & " ] radio Button selected "
							Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioButtonWODevOrDesc","2",stepName,message)																
			

					Else 
						status="FAIL"
						Flag=1
						message="<br> Unexpected Error Encountered while selecting Radio button </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
						Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioButtonWODevOrDesc","1",stepName,message)				
					End If																									
			Else	
				status="FAIL"
				Flag=1
				message="Radio Group Object not exist"
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioButtonWODevOrDesc","1",stepName,message)
			End If
		Else
			status="FAIL"
			Flag=1
			message="Input Parameter Missing"
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioButtonWODevOrDesc","1",stepName,message)
		End If
		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3) 
		'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If

        	If Flag =1  Then
							SelectRadioButtonWODevOrDesc = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(objLink,message)
			Else
							SelectRadioButtonWODevOrDesc = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
End If
End Function

'**********************************************************************************************************************************************



'*********************************************************************************************************************************************************************
'Name of the Function
'											:	EnterTextTabbedRegion_AppendSpecialCharacter(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,textFieldIndex,valueToEnter)
'Author
'											:	TCS
'Date			   				  
'											:	20.09.2011
'Description					
'											:	Entering value in Text Field inside Oracle Tabbed Region
'Input Parameters	     
'											:	formShortTitle : Short Title Property of the Oracle Form Window
'												tabbedRegionLabel : Label Property of the Oracle Tabbed Region
'												tabbedRegionIndex : Index of the Oracle Tabbed Region
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'												textFieldPromptOrDescription : Description / Prompt Property of the Text Field 
'													(Choose which one is available. Can choose either  in case both are present.)
'												textFieldIndex : Index of the Text Field
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'												valueToEnter : Value to be Entered
'Output Parameters      
'											: None
'**********************************************************************************************************************************************************************
'Function    EnterTextTabbedRegion_AppendSpecialCharacter(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,textFieldIndex,valueToEnter)
'**********************************************************************************************************************************************************************
Public Function EnterTextTabbedRegion_AppendSpecialCharacter(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,textFieldIndex,valueToEnter,CharacterToPass)
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
	'	startTime=Timer()
		stepName="Enter Text"
		inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel & "<br><b>Prompt Or Description of the TextField : </b>" & textFieldPromptOrDescription & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b>Index of the Text Field : </b>" & textFieldIndex & "<br><b>Value to Enter : </b>" & valueToEnter
		valueToEnter=valueToEnter & CharacterToPass '"/" &
		'print valueToEnter
		On Error Resume Next
		Dim intSetFlag,objText
		intSetFlag=1

		If formShortTitle<>"" AND tabbedRegionLabel<>"" AND tabbedRegionIndex<>"" AND textFieldPromptOrDescription<>"" AND textFieldIndex<>"" Then
				If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("prompt:="& textFieldPromptOrDescription,"index:=" & textFieldIndex).Exist(3) Then
						Set objText = OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("prompt:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
						intSetFlag = 0
				ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" & textFieldIndex).Exist(3) Then
						Set objText = OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
						intSetFlag = 0
				Else
						status="FAIL"
						Flag=1
						message="Given  Text Field Object Not Found."
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegion_AppendSpecialCharacter","1",stepName,message)
				End If

				If intSetFlag = 0 Then
						If objText.GetROProperty("editable") AND objText.GetROProperty("enabled") Then
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "Enter text with appended special character in text field" & "[promptordescripetion:="& textFieldPromptOrDescription & "]" 
											ImagePath=CaptureScreenshot(objText,strStepDescription)
										End if

								objText.Enter valueToEnter
										  '// Calling Error_Listener
								blnExceptionFlag = Error_Listener ("EnterTextFieldTabbedRegion",objText)
								If Not blnExceptionFlag Then
											status="DONE"
											message="[ " &  valueToEnter & " ] :  has been entered in the Text Field."
											Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegion_AppendSpecialCharacter","2",stepName,message)
								Else
											status="FAIL"
											Flag=1
											 message="<br> Unexpected Error Encountered After Entering Text   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
											Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegion_AppendSpecialCharacter","1",stepName,message)	
								End If
						Else
								status="FAIL"
								Flag=1
								message="The Text field is NonEditable/Disabled."
								blnObjectError=True
								Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegion_AppendSpecialCharacter","1",stepName,message)
						End If
				End If
		Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegion_AppendSpecialCharacter","1",stepName,message)
		End If

	'	endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3) 

		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

	If  blnObjectError  Then
		 Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
	End If
					If Flag =1  Then
							EnterTextTabbedRegion_AppendSpecialCharacter = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
			Else
							EnterTextTabbedRegion_AppendSpecialCharacter = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If	
End Function

'**************************************************************************************************
'End Function EnterTextTabbedRegion_AppendSpecialCharacter()

'**************************************************************************************************


'*********************************************************************************************************************************************************************
'Name of the Function
'											:	SelectListWithIndex(formShortTitle,listDeveloperNameOrDescription,index,valueToSelect)
'Author
'											:	TCS
'Date			   				  
'											:	27.09.2011
'Description					
'											:	Selecting a value from a Oracle List
'Input Parameters	     
'											:	formShortTitle : Short Title Property of the Oracle Form
'												listDeveloperNameOrDescription : Developer Name Property  or Description Property of the Oracle List
'												Index : Index Property of Checkbox
'												valueToSelect : Value to be Selected from the List
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    SelectList(formShortTitle,listDeveloperNameOrDescription,valueToSelect)
'**********************************************************************************************************************************************************************
Public Function SelectListWithIndex(formShortTitle,listDeveloperNameOrDescription,listIndex,valueToSelect)
   If Not Environment.Value("blnFatalError") Then
	 Dim blnObjectError
     blnObjectError=False
	startTime=Timer()
	stepName="Select from List with Index"
	inputParameter="<b>Form Short Title :</b>" & formShortTitle &"<br><b>List Developer Name Or Description : </b>"& listDeveloperNameOrDescription &"<br><b>Index : </b>"& listIndex &"<br><b>Value to Select : </b>"& valueToSelect

	On Error Resume Next
	If formShortTitle <>"" AND listDeveloperNameOrDescription <>"" AND listIndex<>"" AND valueToSelect<>"" Then
				If OracleFormWindow("short title:="& formShortTitle).OracleList("description:="& listDeveloperNameOrDescription,"Index:="& listIndex).Exist(6) Then
                    				If OracleFormWindow("short title:="& formShortTitle).OracleList("description:="& listDeveloperNameOrDescription,"Index:="& listIndex).GetROProperty("enabled") Then
                                       Set objList = OracleFormWindow("short title:="& formShortTitle).OracleList("description:="& listDeveloperNameOrDescription,"Index:="& listIndex)
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "Selects value "&valueToSelect &"in List" & "[DevNameorDescription:="& listDeveloperNameOrDescription & "Index ;="& listIndex &"]" 
											ImagePath=CaptureScreenshot(objList,strStepDescription)
										End if
									   objList.Select valueToSelect
												status="DONE"
												message="[ " & valueToSelect & " ] has been Selected Successfully."
												'Call ReporterFunction("2",stepName,message)
												Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWithIndex","2",stepName,message)
										 ElseIf OracleFormWindow("short title:="& formShortTitle).OracleList("developer name:="& listDeveloperNameOrDescription,"Index:="& listIndex).Exist(6) Then 
								            If OracleFormWindow("short title:="& formShortTitle).OracleList("developer name:="& listDeveloperNameOrDescription,"Index:="& listIndex).GetROProperty("enabled") Then
													Set objList=OracleFormWindow("short title:="& formShortTitle).OracleList("developer name:="& listDeveloperNameOrDescription,"Index:="& listIndex)
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
														strStepDescription = "Selects value "&valueToSelect &"in List" & "[DevNameorDescription:="& listDeveloperNameOrDescription & "Index ;="& listIndex &"]" 
														ImagePath=CaptureScreenshot(objList,strStepDescription)
													End if
												objList.Select valueToSelect
								        
										If OracleFormWindow("short title:="& formShortTitle).OracleList("developer name:="& listDeveloperNameOrDescription,"description:="& listDeveloperNameOrDescription,"Index:="& listIndex).GetROProperty("selected item")=valueToSelect Then
											status="DONE"
												message="[ " & valueToSelect & " ] has been Selected Successfully."
												'Call ReporterFunction("2",stepName,message)
												Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWithIndex","2",stepName,message)
										Else
												status="FAIL"
												Flag=1
												message="[ " & valueToSelect & " ] is an Invalid Selection."
												'Call ReporterFunction ("1",stepName,message)
												Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWithIndex","1",stepName,message)
										End If
							Else
									status="FAIL"
									Flag=1
									message="[ " & listDeveloperNameOrDescription & " ] is Disabled."
									'Call ReporterFunction ("1",stepName,message)
									Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWithIndex","1",stepName,message)
							End If

				Else
						status="FAIL"
						Flag=1
						message="[ " & listDeveloperNameOrDescription & " ] List is Missing/not Matching."
						'Call ReporterFunction ("1",stepName,message)
						Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWithIndex","1",stepName,message)
				End If
		Else
				status="FAIL"
				Flag=1
				message="[ " & listDeveloperNameOrDescription & " ] List is Missing/not Matching."
				'Call ReporterFunction ("1",stepName,message)
				Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWithIndex","1",stepName,message)
		End If

	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				'Call ReporterFunction ("1",stepName,message)
				Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWithIndex","1",stepName,message)
	  End If
	'	endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3) 
         ' Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		If  blnObjectError  Then
					Environment.Value("blnFatalError")=True
					Call Error_Recovery ("CloseAllForms")
		End If
        If Flag =1  Then
							SelectListWithIndex = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objList,message)
			Else
							SelectListWithIndex = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

End If
End Function
'**********************************************************************************************************************************************************************
'End Function SelectList(formShortTitle,listDeveloperNameOrDescription,valueToSelect)
'**********************************************************************************************************************************************************************





'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ClickNotificationButtonWithoutHandlingException(NotificationTitle,buttonDescriptionOrLabel)
'Author
'											:	TCS
'Date			   				  
'											:	05.02.2014
'Description					
'											:	Clicking a Button in Oracle Form        
'Input Parameters	     
'											:	formShortTitle : Short Title Property of the Oracle Form
'												buttonDescriptionOrLabel : Description / Label Property of the Button 
'												(Choose which one is available. Can choose either  in case both are present)
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    ClickNotificationButtonWithoutHandlingException(NotificationTitle,buttonDescriptionOrLabel)
'**********************************************************************************************************************************************************************
Public Function ClickNotificationButtonWithoutHandlingException(NotificationTitle,buttonDescriptionOrLabel)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		'startTime=Timer()
		stepName="Click Button"
		inputParameter="<b>Short Title of the Notification : </b>" & NotificationTitle & "<br><b>Button Description/Label : </b>" & buttonDescriptionOrLabel

		On Error Resume Next
		Dim objButton,intSetFlag
		intSetFlag=1
	
		If NotificationTitle<>"" AND buttonDescriptionOrLabel<>"" Then
			If OracleNotification("title:="& NotificationTitle).OracleButton("description:="& buttonDescriptionOrLabel).Exist(3) Then
				Set objButton = OracleNotification("title:="& NotificationTitle).OracleButton("description:="& buttonDescriptionOrLabel)
				intSetFlag=0
			ElseIf OracleNotification("title:="& NotificationTitle).OracleButton("label:="& buttonDescriptionOrLabel).Exist(3) Then
				Set objButton = OracleNotification("title:="& NotificationTitle).OracleButton("label:="& buttonDescriptionOrLabel)
				intSetFlag=0
			Else
				status="FAIL"
				Flag=1
				message="[ " & buttonDescriptionOrLabel &"] Button does not Exist."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickNotificationButtonWithoutHandlingException","1",stepName,message)
			End If

			If intSetFlag=0 Then
				If objButton.GetROProperty("enabled") Then
					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription="Clicks button" & "[Button Description/Label ::="& buttonDescriptionOrLabel & "]" 
											ImagePath=CaptureScreenshot(objButton,strStepDescription)
										End if
					objButton.Click
                   ' blnExceptionFlag = Error_Listener ("ClickButtonWithoutHandlingNotification",objButton)
			        If  Not blnExceptionFlag Then
							status="DONE"
							message="[ " & buttonDescriptionOrLabel &"] Button clicked Successfully."
							Call ReporterFunction("e-Swift_FunctionLibrary","ClickNotificationButtonWithoutHandlingException","2",stepName,message)
			        Else
							Flag=1
							status="FAIL"
							message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
							Call ReporterFunction("e-Swift_FunctionLibrary","ClickNotificationButtonWithoutHandlingException","1",stepName,message)																	
					End If     
				Else
						status="FAIL"
						Flag=1
						message="[ " & buttonDescriptionOrLabel &"] Button is Disabled."
						blnObjectError=True
					   Call ReporterFunction("e-Swift_FunctionLibrary","ClickNotificationButtonWithoutHandlingException","1",stepName,message)
				End If
			End If		
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickNotificationButtonWithoutHandlingException","1",stepName,message)
		End If

		Set objButton=Nothing
		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)

		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
'		 If  blnObjectError  Then
'			Environment.Value("blnFatalError")=True
'			Call Error_Recovery ("CloseAllForms")
'		End If
		If Flag =1  Then
							ClickNotificationButtonWithoutHandlingException = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objButton,message)
			Else
							ClickNotificationButtonWithoutHandlingException = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

	End If
End Function
'**********************************************************************************************************************************************************************
'End Function    ClickButtonWithoutHandlingNotification(formShortTitle,buttonDescriptionOrLabel)
'**********************************************************************************************************************************************************************


Public Function SelectListWebWithIndex(browserName,listNameOrHtmlId,listIndex,valueToSelect) 
        If Not Environment.Value("blnFatalError") Then 
                Dim blnObjectError 
                blnObjectError=False 
                'startTime=Timer() 
                stepName="Select from List" 
                inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>List Name or Html Id : </b>"& listNameOrHtmlId &"<br><b>List Index : </b>"& listIndex &"<br><b>Value to Select : </b>" & valueToSelect 

                On Error Resume Next 
                If browserName<>"" AND listNameOrHtmlId<>"" AND listIndex<>""AND valueToSelect<>"" Then 
                        Set obj= Description.Create() 
                        obj("micclass").value="Page" 
						Set childObj=Browser("name:="& browserName).ChildObjects(obj) 
                        pageTitle=childObj(0).getroproperty("title") 
						If Browser("name:="& browserName).Page("title:="& pageTitle).WebList("html id:="& listNameOrHtmlId,"index:="& listIndex).Exist(10) Then        'Check Field for Description 
                                Set objWebList=Browser("name:="& browserName).Page("title:="& pageTitle).WebList("html id:="& listNameOrHtmlId,"index:="& listIndex) 
                                intSetFlag=0 
                        ElseIf Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listNameOrHtmlId,"index:="& listIndex).Exist(10)  Then        'Check Field for Prompt 
                                Set objWebList=Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listNameOrHtmlId,"index:="& listIndex) 
                                intSetFlag=0 
                        Else 
                                status="FAIL" 
                                Flag=1 
                                message="Web List Missing/not Matching" 
                                blnObjectError=True 
                                Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWebWithIndex","1",stepName,message) 
            End If 
                        If intSetFlag=0 Then 
                                If objWebList.GetROProperty("disabled")=0 Then 
                                        strListContent=objWebList.GetROProperty("all items") 
									
										If InStr(1,strListContent,valueToSelect)<>0 Then                ' Check in List if the value exists 
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
														strStepDescription = "Selects "&"[Value :=" & valueToSelect &"] in list "&" [List Name or Html Id : ="& listNameOrHtmlId &"]" 
														ImagePath=CaptureScreenshot(objWebList,strStepDescription)
													End if
                                                objWebList.Select valueToSelect 
												blnExceptionFlag = Error_Listener ("SelectListWeb",objWebList) 
                                                If  Not blnExceptionFlag Then 
                                                                                status="DONE" 
                                                                                message="[ " & valueToSelect & " ] has been Selected Successfully." 
                                                                                Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWebwithIndex","2",stepName,message) 
                                                Else 
                                                                                Flag=1 
                                                                                status="FAIL" 
                                                                                message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] " 
                                                                                Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWebwithIndex","1",stepName,message)                                                                                                                                         
                                                End If                                                                                                                         
                                        Else 
                                                        status="FAIL" 
                                                        Flag=1 
                                                        message="[ " & valueToSelect & " ] is an Invalid Selection." 
                                                        blnObjectError=True 
                                                        Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWebWith Index","1",stepName,message) 
                                        End If 
                                Else 
                                 status="FAIL" 
                                                Flag=1 
                                                message="[ " & listNameOrHtmlId & " ] is Disabled." 
                                                Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWebWithIndex","1",stepName,message) 
                                End If 
                        End If 
                        Set objWebList=Nothing 
                        Set obj=Nothing 
                        Set childObj=Nothing 
                Else 
                                status="FAIL" 
                                Flag=1 
                                message="Insufficient Data Provided." 
                                blnObjectError=True 
                                Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWebWithIndex","1",stepName,message) 
                End If 

                'endTime = Timer() 
                'ExeTime = FormatNumber(endTime - startTime,3) 
            'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName) 
                If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
                End If
				If Flag =1  Then
							SelectListWebWithIndex = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebList,message)
				Else
							SelectListWebWithIndex = True
				End If
				If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
 
        End If 
End Function

'********************************************************************************************************************************************************************************************************************************

Public Function saveAndActivateAddIn(BookName,SaveAsBookName)
'Save the WebADI excel
Execute "Set InputAppExcel1 =GetObject(,""Excel.Application"")"
Set objInputWorkBook = InputAppExcel1.WorkBooks(BookName)
Set objInputSheet = objInputWorkBook.Sheets.Item("Sheet1")
InputAppExcel1.Visible=TRUE
objInputWorkBook.SaveAs "C:\Oracle_e-Swift\Files\"&SaveAsBookName&".xlsm",52
'Change in options
wait(5)
InputAppExcel1.SendKeys "%F"
wait(1)
InputAppExcel1.SendKeys "T"
wait(1)
Set Ws1 = CreateObject("WScript.Shell")
Ws1.SendKeys ("{DOWN}")
wait(1)
Ws1.SendKeys ("{DOWN}")
wait(1)
Ws1.SendKeys ("{DOWN}")
wait(1)
Ws1.SendKeys ("{DOWN}")
wait(1)
Ws1.SendKeys ("{DOWN}")
wait(1)
Ws1.SendKeys ("{DOWN}")
wait(1)
Ws1.SendKeys ("{DOWN}")
wait(1)
Ws1.SendKeys ("{DOWN}")
wait(1)
Ws1.SendKeys "%G"
wait(1)
Ws1.SendKeys ("{UP}")
wait(1)
Ws1.SendKeys ("{UP}")
wait(1)
Ws1.SendKeys ("{UP}")
wait(1)
Ws1.SendKeys ("{UP}")
wait(1)
Ws1.SendKeys (" ")
wait(1)
Ws1.SendKeys ("{DOWN}")
wait(1)
Ws1.SendKeys (" ")
wait(1)
Ws1.SendKeys ("{DOWN}")
wait(1)
Ws1.SendKeys (" ")
wait(1)
Ws1.SendKeys ("{DOWN}")
wait(1)
Ws1.SendKeys (" ")
wait(1)
Ws1.SendKeys ("{DOWN}")
wait(1)
Ws1.SendKeys ("{ENTER}")
wait(5)
'objInputWorkBook.close
'InputAppExcel1.quit
set objInputSheet=nothing
Set objInputWorkBook=nothing
Set InputAppExcel1=nothing
wait(3)


'Open and edit
'
'Set InputAppExcel1 =CreateObject("Excel.Application")
'Set objInputWorkBook = InputAppExcel1.WorkBooks.Open("C:\Users\251603\Desktop\Book1.xlsm")
'Set objInputSheet = objInputWorkBook.ActiveSheet
''Sheets.Item("Sheet1")
'wait(1)
'InputAppExcel1.Visible=TRUE
'wait(1)
'objInputWorkBook.Activate
'wait(1)
'set objInputSheet=nothing
'Set objInputWorkBook=nothing
'Set InputAppExcel1=nothing
'
'wait(1)
End Function


'*********************************************************************************************************************************************************************************************************************************

Public Function WriteDataToMSExcel(Workbookname,FieldName,IterationIndex,ColumnIndex,valueToEnter)
If Not Environment.Value("blnFatalError") Then
On Error Resume Next
   'startTime=Timer()
   stepName="Write Data to MSExcel cell"
	inputParameter="<br><b>Row Number : </b>"& IterationIndex&"<br><b>Column Number : </b>"& ColumnIndex&"<br><b>Value to Enter : </b>"& valueToEnter
	 Dim successEntry
	 successEntry = 0
     'Set InputAppExcel = CreateObject("Excel.Application")     
 '    Set objInputWorkBook = InputAppExcel.Workbooks.Open(InputFilePath)  
  '   Set objInputSheet =  InputAppExcel.Sheets("Sheet1") 

Execute "Set InputAppExcel =GetObject(,""Excel.Application"")"
'Set InputAppExcel =GetObject(,"Excel.Application")
Set objInputWorkBook = InputAppExcel.WorkBooks(Workbookname)
Set objInputSheet = objInputWorkBook.Sheets.Item("Sheet1")

		objInputSheet.cells(Cint(IterationIndex),Cint(ColumnIndex)).value = Cstr(valueToEnter)
		If cstr(objInputSheet.cells(Cint(IterationIndex),Cint(ColumnIndex)).value) = cstr(valueToEnter)  Then
			successEntry = 1
		Else
			successEntry = 0
		End If
	If successEntry = 1 Then
		status="DONE"
		message="Value '"&valueToEnter&"' successfully entered against '"&FieldName&"' at Row '"&IterationIndex&"' and Column '"&ColumnIndex&"'"
		Call ReporterFunction("e-Swift_FunctionLibrary","WriteDataToMSExcel","2",stepName,message)
	Else
		status="FAIL"
		Flag=1
		message="Value '"&valueToEnter&"' could not be entered successfully against '"&FieldName&"' at Row '"&IterationIndex&"' and Column '"&ColumnIndex&"'"
		Call ReporterFunction("e-Swift_FunctionLibrary","WriteDataToMSExcel","1",stepName,message)
	End If

   'objInputWorkBook.Save
   'objInputWorkBook.Close
   Set InputAppExcel = Nothing
   Set objInputWorkBook =Nothing
   Set objInputSheet =Nothing

		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3) 
		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		If Flag =1  Then
							WriteDataToMSExcel = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(objText,message)
			Else
							WriteDataToMSExcel = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
End if
End Function

'********************************************************************************************************************************************************************************************************************************************

Public Function ValidateDataInMSExcel(IterationIndex,ColumnIndex,expectedData)
If Not Environment.Value("blnFatalError") Then
On Error Resume Next
   startTime=Timer()
   stepName="Validate Expected Data is present in MSExcel cell "
	inputParameter="<br><b>Row Number : </b>"& IterationIndex&"<br><b>Column Number : </b>"& ColumnIndex&"<br><b>Expected Data : </b>"& expectedData
'     Set InputAppExcel = CreateObject("Excel.Application")     
 '    Set objInputWorkBook = InputAppExcel.Workbooks.Open(InputFilePath)  
  '   Set objInputSheet =  InputAppExcel.Sheets("Sheet1") 

Execute "Set InputAppExcel =GetObject(,""Excel.Application"")"
Set objInputWorkBook = InputAppExcel.WorkBooks("Book1")
Set objInputSheet = objInputWorkBook.Sheets.Item("Sheet1")

	 DataItemValue=cstr(objInputSheet.Cells(Cint(IterationIndex),Cint(ColumnIndex)).value)
	 If DataItemValue = expectedData Then
		status="DONE"
		message="Actual Value '"&DataItemValue&"' MATCHES with expected Excel cell value '"&expectedData&"'"
		Call ReporterFunction("e-Swift_FunctionLibrary","ValidateDataInMSExcel","2",stepName,message)
	Else
		status="FAIL"
		Flag=1
		message="Actual Value '"&DataItemValue&"' Does Not match with expected Excel cell value '"&expectedData&"'"
		Call ReporterFunction("e-Swift_FunctionLibrary","ValidateDataInMSExcel","2",stepName,message)
	End If
	 'InputAppExcel.quit 
	 Set InputAppExcel = Nothing
	 Set objInputWorkBook = Nothing
	 Set objInputSheet = Nothing

		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3) 
		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		If Flag =1  Then
							ValidateDataInMSExcel = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(objText,message)
			Else
							ValidateDataInMSExcel = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
End if
End Function

'***************************************************************************************************************************************************************************************************************************

Public Function ClickWebAdiUploadButton()
   	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
		'startTime=Timer()
		stepName="Click WEBADI Upload Button"
		inputParameter="<b>Upload File Name : </b>" & uploadFileName
		Dim objShell
		Set objShell = CreateObject("WScript.Shell")
		wait(2)
		Window("nativeclass:=ThunderDFrame").Activate
		wait(2)
		objShell.SendKeys "%U"
		wait (10)
		If Err.Number=0 Then
			status="DONE"
			message="WEBADI File Upload button clicked Successfully"
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickWebAdiUploadButton","2",stepName,message)
		Else
			Status="FAIL"
			Flag=1
			message="WEBADI File Upload button Not clicked"
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickWebAdiUploadButton","1",stepName,message)
		End If
	Err.Clear
	Set objShell = Nothing
	'endTime=Timer()
	'ExeTime = FormatNumber(endTime - startTime,3) 
	'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
    If Flag =1  Then
							ClickWebAdiUploadButton = message
							blnMainFailFlag = True
			Else
							ClickWebAdiUploadButton = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
        If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
                End If
End If
End Function

'**********************************************************************************************************************************************************************************************************************************************


Public Function GetWebAdiRequestId()
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
		'startTime=Timer()
		stepName="Capture WEBADI Request Id"
		'inputParameter="<b>Window Title :</b>" & windowTitle
		If Window("nativeclass:=ThunderDFrame").Page("title:=Journals Upload").WebElement("innertext:=Journal Import Request ID.*").Exist (3) then
			reqId = mid(Window("nativeclass:=ThunderDFrame").Page("title:=Journals Upload").WebElement("innertext:=Journal Import Request ID.*").GetROProperty("innertext"),27,8)
			recordCount = mid(Window("nativeclass:=ThunderDFrame").Page("title:=Journals Upload").WebElement("innertext:=.*rows successfully uploaded.").GetROProperty("innertext"),,1)
			If reqId<>0Then
				status="DONE"
				message="'2' rows uploaded successfully. Request Id generated : '"&reqId&"'"
				Call ReporterFunction("e-Swift_FunctionLibrary","GetWebAdiRequestId","2",stepName,message)
			Else
				status="FAIL"
				Flag=1
				message="Upload Unsuccessful"
				Call ReporterFunction("e-Swift_FunctionLibrary","GetWebAdiRequestId","1",stepName,message)
			End If
		Else
			status="FAIL"
			Flag=1
			message="Excel Upload Not Confirmed"
			Call ReporterFunction("e-Swift_FunctionLibrary","GetWebAdiRequestId","1",stepName,message)
		End If

		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3) 
		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
			If Flag =1  Then
							GetWebAdiRequestId = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(objText,message)
			Else
								GetWebAdiRequestId = reqId
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End if
End Function


'************************************************************************************************************************************************************************************************************************************

Public Function CapturePartialValuefromTextField(formShortTitle,textFieldIndex,PrevText,AdditionalCharLengthtoSkip,PartialStringtobeCapturedLength)
  On Error Resume Next
  If Not Environment.Value("blnFatalError") Then
	Dim blnObjectError
   blnObjectError=False
'	startTime=Timer()
	stepName="Capture Partial Runtime Value from Text Field"
	inputParameter="<b>Short Title of the Form : </b> "& formShortTitle &"<br><b>Description Or Prompt of the Text Field : </b> " & textFieldPromptOrDescription & "<br><b>Index of the text field : </b> " & textFieldIndex

	Dim strFieldValue,intSetFlag,objText,strPartialFieldValue
	intSetFlag=1

	On Error Resume Next

	If formShortTitle<>"" AND textFieldIndex<>"" AND isnumeric(PartialValueStringLength) AND isnumeric(AdditionalCharLengthtoSkip) Then	'Check Parameters

				If OracleFormWindow("short title:="& formShortTitle).OracleTextField("index:=" & textFieldIndex).Exist("3") Then	'Check Field for Description
							Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTextField("index:=" & textFieldIndex)
							intSetFlag=0
				ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTextField("index:=" & textFieldIndex).Exist("3") Then	'Check Field for Prompt
							Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTextField("index:=" & textFieldIndex)
							intSetFlag=0
				Else
										status="FAIL"
										Flag=1
										message="Given  Oracle Text Field [ "& textFieldPromptOrDescription & " ] does not Exist."
										   blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"CapturePartialValuefromTextField","1",stepName,message)
				End If

							If intSetFlag=0 Then
										
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "Captures value from text field " & "[promptordescripetion:="& textFieldPromptOrDescription & "]" 
											ImagePath=CaptureScreenshot(objText,strStepDescription)
										End if
										strFieldValue=objText.GetROProperty("value")
										'print strFieldValue
										strPartialFieldValue=mid(strFieldValue,instr(strFieldValue,PrevText)+len(PrevText)+AdditionalCharLengthtoSkip,PartialStringtobeCapturedLength)
										'print instr(strFieldValue,PrevText)
										'print mid(strFieldValue,instr(strFieldValue,PrevText)+len(PrevText)-3)
										'print strPartialFieldValue
										blnExceptionFlag = Error_Listener ("CapturePartialValuefromTextField",objText)

										If Not blnExceptionFlag Then
												status="DONE"
												message="[ " & textFieldPromptOrDescription & " ] value Captured during run time."
												Call ReporterFunction(strLibraryFileName,"CapturePartialValuefromTextField","2",stepName,message)
										 Else
										        status="FAIL"
												Flag=1
												message="<br> Unexpected Error Encountered while fetching the Run Time Data</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
												Call ReporterFunction(strLibraryFileName,"CapturePartialValuefromTextField","1",stepName,message)
										End If
										
							End If

	Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			   blnObjectError=True
			Call ReporterFunction(strLibraryFileName,"CapturePartialValuefromTextField","1",stepName,message)
	End If
		  
			'CapturePartialValuefromTextField=strPartialFieldValue			'Returning the Value
			outputParameter=strPartialFieldValue						'Setting Output Parameter
			Set objText=Nothing
			'endTime=Timer()
	'ExeTime = FormatNumber(endTime - startTime,3) 
	
	'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)


		 If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
							CapturePartialValuefromTextField = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
			Else
							CapturePartialValuefromTextField = strPartialFieldValue
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

	End If	
End Function



'************************************************************************************
'Name of the Function : CaptureRequiredTextWebElement
'Author		     					:  TCS
'Date			 				    : 25-febMAR-2013
'Description		     :  Get the request Id  mass adjustment
'Input Parameters	     :  browserName
'										  : webElementClass
'										  :webElementHTMLTag
'										  :	webElementIndex		
'										 :	textPosition (position at Which the text Occures)						   
'Output Parameters    : None
'**********************************************************************************************************************************************************************
'Function    CaptureRequiredTextWebElement(browserName,webElementClass,webElementHTMLTag,webElementIndex,textPosition)
'**********************************************************************************************************************************************************************
Public Function CaptureRequiredTextWebElement(browserName,webElementClass,webElementHTMLTag,webElementIndex,textPosition)
    If Not Environment.Value("blnFatalError") Then
	Dim blnObjectError
    blnObjectError=False
	'startTime=Timer()
	stepName="Capture Required Text in WebElement"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Web Element Class : </b>"& webElementClass &"<br><b>Web Element HTML Tag : </b>" & webElementHTMLTag &"<br><b>Web Element Index : </b>" & webElementIndex

	On Error Resume Next
	Dim strCapturedText
	If browserName <>"" AND webElementClass <>"" AND webElementHTMLTag <>""  AND webElementIndex <>""  AND textPosition <>"" Then

					Set obj= Description.Create()
					obj("micclass").value="Page"
            		Set childObj=Browser("name:="& browserName).ChildObjects(obj)
					pageTitle=childObj(0).getroproperty("title")

				If  Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("class:="& webElementClass ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex).Exist(3) Then
						If  Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("class:="& webElementClass ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex).GetROProperty("visible") Then
								Set objText = Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("class:="& webElementClass ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex)
                                If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "captures innertext property of  text field" 
											ImagePath=CaptureScreenshot(objText,strStepDescription)
								End if
								strCapturedText =objText.GetROProperty("innertext")
								SArray=Split(strCapturedText," ")
'								Set objWebElement=Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("class:="& webElementClass ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex)
'												blnExceptionFlag = Error_Listener ("CaptureTextWebElement",objWebElement)
																														'// end

																If Not blnExceptionFlag Then
																			    status="DONE"
																				message="Inner Text Captured during Runtime."
																				Call ReporterFunction("e-Swift_FunctionLibrary","CaptureRequiredTextWebElement","2",stepName,message)
																Else
																			   status="FAIL"
																				Flag=1
																				message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																				Call ReporterFunction("e-Swift_FunctionLibrary","CaptureRequiredTextWebElement","1",stepName,message)
			
															    End If
								
'								outputParameter=strCapturedText
						Else
								status="FAIL"
								Flag=1
								message="Web Element is not Visible."
								 blnObjectError=True
								Call ReporterFunction("e-Swift_FunctionLibrary","CaptureRequiredTextWebElement","1",stepName,message)
						End If
            
				Else
								status="FAIL"
								Flag=1
								message="Given WebElement Not Found"
								 blnObjectError=True
								Call ReporterFunction("e-Swift_FunctionLibrary","CaptureRequiredTextWebElement","1",stepName,message)
				End If
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","CaptureRequiredTextWebElement","1",stepName,message)
	End If
	'CaptureRequiredTextWebElement=SArray(textPosition-1)			'Returning the Value
	outputParameter=strCapturedText						'Setting Output Parameter
	
	Set objWebElement=Nothing
	'endTime = Timer()
	'ExeTime = FormatNumber(endTime - startTime,3)

  'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		 If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
		End If
        If Flag =1  Then
							CaptureRequiredTextWebElement = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
			Else
							CaptureRequiredTextWebElement=SArray(textPosition-1)			'Returning the Value
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If	
End Function
'**********************************************************************************************************************************************************************
'End Function    CaptureRequiredTextWebElement(browserName,webElementClass,webElementHTMLTag,webElementIndex,textPosition)
'**********************************************************************************************************************************************************************



'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ValidateTextFieldValueWeb(browserName,textFieldName,textFieldIndex,expectedValue)
'Author
'											:	TCS
'Date			   				  
'											:	11.10.2011
'Description					
'											:	Validates the value of a test field in web
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												textFieldName : Name Property of Text Field
'												textFieldIndex : Index Property of Text Field
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'												expectedValue : The expected value to be matched with run time value
'Output Parameters      
'											:	strCapturedText : Captured Inner Text of the Web Element
'**********************************************************************************************************************************************************************
' Function ValidateTextFieldValueWeb(browserName,textFieldName,textFieldIndex,expectedValue)
'**********************************************************************************************************************************************************************
Public Function ValidateTextFieldValueWeb(browserName,textFieldName,textFieldIndex,expectedValue)
	startTime=Timer()
	stepName="Validate TextField in Web"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Text Field Name : </b>"& textFieldName &"<br><b>Text Field Index : </b>" & textFieldIndex &"<br><b>Expected Value : </b>" & expectedValue
	On Error Resume Next
	If browserName <>"" AND textFieldName <>"" AND textFieldIndex <>"" Then
					Set obj= Description.Create()
					obj("micclass").value="Page"
            		Set childObj=Browser("name:="& browserName).ChildObjects(obj)
					pageTitle=childObj(0).GetROProperty("title")

				If  Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName ,"index:="& textFieldIndex).Exist(3) Then
							Set objText = Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName ,"index:="& textFieldIndex)
                            If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "Validating text field" & "[Name:="& textFieldName & "]" 
											ImagePath=CaptureScreenshot(objText,strStepDescription)
										End if


						 If Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName ,"index:="& textFieldIndex).GetROProperty("value")=expectedValue Then
								status="PASS"
								Flag=0
								message="The actual value matches with the expected value."
								Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFieldValueWeb","2",stepName,message)
						Else
								status="FAIL"
								Flag=1
								message="The actual value does not match with the expected value."
								Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFieldValueWeb","1",stepName,message)
				End If
				Else
					status="FAIL"
					Flag=1
					message="The Text field object not found."
					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFieldValueWeb","1",stepName,message)
				End If
		
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFieldValueWeb","1",stepName,message)
	End If
	'ValidateTextWebElement=strCapturedText			'Returning the Value
	'outputParameter=strCapturedText						'Setting Output Parameter
	
	Set objWebElement=Nothing
	'endTime = Timer()
	'ExeTime = FormatNumber(endTime - startTime,3)

  'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
	If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
                End If
	If Flag =1  Then
							ValidateTextWebElement = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
			Else
							ValidateTextWebElement = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	
End Function

'**********************************************************************************************************************************************************************
' End Function ValidateTextFieldValueWeb(browserName,textFieldName,textFieldIndex,expectedValue)
'**********************************************************************************************************************************************************************
'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ValidateTextWeb(browserName,webEditHTMLId,webEditIndex,expectedValue)
'Author
'											:	TCS
'Date			   				  
'											:	11.10.2011
'Description					
'											:	Selecting an item from a List  in Web Forms
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												webElementClass : Class Property of the Web Element
'												webElementHTMLTag : HTML Tag of the Web Element
'												webElementIndex : Index of the Web Element
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'												expectedValue : The expected value to be matched with run time value
'Output Parameters      
'											:	strCapturedText : Captured Inner Text of the Web Element
'**********************************************************************************************************************************************************************
' Function ValidateTextWeb(browserName,webEditHTMLId,webEditIndex,expectedValue)
'**********************************************************************************************************************************************************************
Public Function ValidateTextWeb(browserName,webEditHTMLId,webEditIndex,expectedValue)
	startTime=Timer()
	stepName="Validate Text in WebEdit"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Web Edit HTML Id : </b>" & webEditHTMLId 
	On Error Resume Next
	If browserName <>"" AND webEditHTMLId <>"" Then
					Set obj= Description.Create()
					obj("micclass").value="Page"
            		Set childObj=Browser("name:="& browserName).ChildObjects(obj)
					pageTitle=childObj(0).GetROProperty("title")

				If  Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("html id:="& webEditHTMLId,"index:="& webEditIndex).Exist(3) Then
					Set objText=Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("html id:="& webEditHTMLId,"index:="& webEditIndex)
                    If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "Validating text field value with specified value"
											ImagePath=CaptureScreenshot(objText,strStepDescription)
										End if

					If UCase(Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("html id:="& webEditHTMLId,"index:="& webEditIndex).getROProperty("value"))=UCase(expectedValue) Then
							status="DONE"
							message="The expected value matches with actual value."
							Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextWeb","2",stepName,message)
					Else
							status="FAIL"
							Flag=1
							message="The expected value does not  with actual value."
							Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextWeb","1",stepName,message)
					End If
				Else
					status="FAIL"
					Flag=1
					message="The text field does not exist."
					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextWeb","1",stepName,message)
				End If
		
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextWeb","1",stepName,message)
	End If
	'ValidateTextWebElement=strCapturedText			'Returning the Value
	'outputParameter=strCapturedText						'Setting Output Parameter
	
	Set objText=Nothing
	'endTime = Timer()
	'ExeTime = FormatNumber(endTime - startTime,3)

  'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
				If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
                End If
				If Flag =1  Then
							ValidateTextWeb = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
				Else
							ValidateTextWeb = True
				End If
				If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
End Function

'**********************************************************************************************************************************************************************
' End Function ValidateTextWeb(browserName,webEditHTMLId,webEditIndex,expectedValue)
'**********************************************************************************************************************************************************************
'*********************************************************************************************************************************************************************
'Name of the Function
'											:	SelectListWebWithPartialValue(browserName,listNameOrHtmlId,valueToSelect)
'Author
'											:	TCS
'Date			   				  
'											:	27.09.2011
'Description					
'											:	Selecting an item whose value is partially known from a List  in Web Forms 
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												listNameOrHtmlId : Name Or Html Id Property of the WebList Field
'													(Provide which one is available. Can provide either if both are present.)
'												valueToSelect : Value to be Selected
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    SelectListWebWithPartialValue(browserName,listNameOrHtmlId,valueToSelect)
'**********************************************************************************************************************************************************************
Public Function SelectListWebWithPartialValue(browserName,listNameOrHtmlId,valueToSelect) 
        If Not Environment.Value("blnFatalError") Then 
                Dim blnObjectError 
                blnObjectError=False 
                'startTime=Timer() 
                stepName="Select From ListWeb With Partial Value" 
                inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>List Name or Html Id : </b>"& listNameOrHtmlId &"<br><b>Value to Select : </b>" & valueToSelect 

                On Error Resume Next 
                If browserName<>"" AND listNameOrHtmlId<>"" AND valueToSelect<>"" Then 
                        Set obj= Description.Create() 
                        obj("micclass").value="Page" 
            Set childObj=Browser("name:="& browserName).ChildObjects(obj) 
                        pageTitle=childObj(0).getroproperty("title") 
            If Browser("name:="& browserName).Page("title:="& pageTitle).WebList("html id:="& listNameOrHtmlId,"index:=0").Exist(10) Then        'Check Field for Description 
                                Set objWebList=Browser("name:="& browserName).Page("title:="& pageTitle).WebList("html id:="& listNameOrHtmlId,"index:=0") 
                                intSetFlag=0 
                        ElseIf Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listNameOrHtmlId,"index:=0").Exist(10)  Then        'Check Field for Prompt 
                                Set objWebList=Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listNameOrHtmlId,"index:=0") 
                                intSetFlag=0 
                        Else 
                                status="FAIL" 
                                Flag=1 
                                message="Web List Missing/not Matching" 
                                blnObjectError=True 
                                Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWebWithPartialValue","1",stepName,message) 
            End If 
                        If intSetFlag=0 Then 
                                If objWebList.GetROProperty("disabled")=0 Then 
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "selects["& valueToSelect &"]" & " from list [Name or html Id:="& listNameOrHtmlId & "]" 
											ImagePath=CaptureScreenshot(objWebList,strStepDescription)
										End if
	
                                        strListContent=objWebList.GetROProperty("all items")
										arr=split(strListContent,";")
										For arrcount=0 to UBound(arr)
											If instr(1,arr(arrcount),valueToSelect) Then
											objWebList.Select arr(arrcount) 
											valueToSelect=arr(arrcount)
											
											End If 
										Next
												blnExceptionFlag = Error_Listener ("SelectListWebWithPartialValue",objWebList)
                                                If  Not blnExceptionFlag Then 
                                                                                status="DONE" 
                                                                                message="[ " & valueToSelect & " ] has been Selected Successfully." 
                                                                                Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWebWithPartialValue","2",stepName,message) 
                                                Else 
                                                                                Flag=1 
                                                                                status="FAIL" 
                                                                                message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] " 
                                                                                Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWebWithPartialValue","1",stepName,message)                                                                                                                                         
                                                End If                                                                                                                         
                                Else 
                                 status="FAIL" 
                                                Flag=1 
                                                message="[ " & listNameOrHtmlId & " ] is Disabled." 
                                                Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWebWithPartialValue","1",stepName,message) 
                                End If 
                        End If 
                        Set objWebList=Nothing 
                        Set obj=Nothing 
                        Set childObj=Nothing 
                Else 
                                status="FAIL" 
                                Flag=1 
                                message="Insufficient Data Provided." 
                                blnObjectError=True 
                                Call ReporterFunction("e-Swift_FunctionLibrary","SelectListWebWithPartialValue","1",stepName,message) 
                End If 

                'endTime = Timer() 
                'ExeTime = FormatNumber(endTime - startTime,3) 
            'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName) 
                If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
                End If 
                If Flag =1  Then
							SelectListWebWithPartialValue = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
				Else
							SelectListWebWithPartialValue = True
				End If
				If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
        End If 
End Function
'**********************************************************************************************************************************************************************
'End Function SelectListWebWithPartialValue(formShortTitle,listDeveloperNameOrDescription,valueToSelect)
'**********************************************************************************************************************************************************************
''********************************************************************************************************************************************************************
'Name of the Function : CheckWebElementExist
'Author		    : TCS
'Date			    : 24/05/2013
'Description	    : Function to Check if a webelement exist on page and returnTrue or False 
'Input Parameters	    : browserName = Briswer Name property 
'				WebElementClassName= Webelement Class name property
'				WebElementHtmltag=Webelement Htmltag property
'				WebElementIndex = Webelement index property
'Output Parameters    : True or False 
'**********************************************************************************************************************************************************************
'Function    CheckWebElementExist(browserName,WebElementClassName,WebElementHtmltag,WebElementIndex)
'**********************************************************************************************************************************************************************
Public Function CheckWebElementExist(browserName,WebElementClassName,WebElementHtmltag,WebElementIndex)
    If Not Environment.Value("blnFatalError") Then
	Dim blnObjectError
    blnObjectError=False
 	'startTime=Timer()
	stepName="Check WebElement on Page "
	inputParameter="<b>Browser Name : </b>" & browserName &"<br><b>WebElement : </b>"& WebElementClassName &"<br><b>WebElement : </b>"& WebElementHtmltag &"<br><b>WebElement  Index : </b>" & WebElementIndex 
	blnCaptureFlag = TRue 
	On Error Resume Next

	If browserName <>"" AND WebElementClassName <>"" AND  WebElementHtmltag <>"" Then
						Set objWebElement=Browser("name:="& browserName).Page("title:="& browserName).WebElement("class:="& WebElementClassName,"html tag:="& WebElementHtmltag,"index:="& WebElementIndex)
						If  objWebElement.Exist(gObjectTimeoutLimit+3) Then
											'blnExceptionFlag = Error_Listener ("ClickLinkWeb",objLink)							
																			If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																				strStepDescription = "Checks web element with " & "[html Tag:="& WebElementHtmltag & "]" 
																				ImagePath=CaptureScreenshot(objWebElement,strStepDescription)
																			End if
																			status="DONE"
																			message="WebElement  [ "& WebElementName &" ] successfully verified on Web Page "
                                                                            CaptureFlag =  True
											else
																			status="FAIL"
																			Flag=1
																			message="WebElement [ "& WebElementName &" ] not Found on page verification failed "
																			blnObjectError=True
																			CaptureFlag =  False
											End If	
							Else
											status="FAIL"
											Flag=1
											message="Insufficient Data Provided."
											blnObjectError=True						
							End If
	'CheckWebElementExist=CaptureFlag
	Set objLink=Nothing
	Set childObj=Nothing
	Set obj=Nothing
	'endTime = Timer()
	'ExeTime = FormatNumber(endTime - startTime,3)
				  If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
                End If
				If Flag =1  Then
							CheckWebElementExist = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebElement,message)
				Else
							CheckWebElementExist = CaptureFlag
				End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

	End if
End Function
'**********************************************************************************************************************************************************************
'End Function    CheckWebElementExist(browserName,WebElementClassName,WebElementHtmltag,WebElementIndex)
'**********************************************************************************************************************************************************************

'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ValidateCheckBoxWebStatus(browserName,checkBoxName,checkBoxIndex,expectedStatus)
'Author
'											:	TCS
'Date			   				  
'											:	27.09.2011
'Modify By                   :Debabrata
'Modify Date              :02.Sep.2012

'Description					
'											:	Checking / Unchecking Checkbox in Web Forms
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												checkBoxName : Name Property of the WebCheckBox Field
'												checkBoxIndex : Index of the check box
'												expectedStatus : Checking : ON/True
'																					Unchecking : OFF/FALSE
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    ValidateCheckBoxWebStatus(browserName,checkBoxName,checkBoxIndex,checkBoxOption)
'**********************************************************************************************************************************************************************
Public Function ValidateCheckBoxWebStatus(browserName,checkBoxName,checkBoxIndex,expectedStatus)
   Dim blnObjectError
   blnObjectError=False
    If Not Environment.Value("blnFatalError") Then
	startTime=Timer()
	stepName="Validate CheckBox Web Status"    'Changed step name
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Check Box Name : </b>"& checkBoxName &"<br><b>Check Box Index : </b>" & checkBoxIndex &"<br><b>Check Box status Option : </b>" & expectedStatus
	On Error Resume Next

	If browserName<>"" AND checkBoxName<>"" AND checkBoxIndex <> "" AND expectedStatus<>"" Then
				Set obj= Description.Create()
				obj("micclass").value="Page"
				Set childObj=Browser("name:="& browserName).ChildObjects(obj)
				pageTitle=childObj(0).GetROProperty("title")
	
				If  Browser("name:="& browserName).Page("title:="& pageTitle).WebCheckBox("name:="& checkBoxName,"index:=" & checkBoxIndex ).Exist(3) Then   'Added index part  to identify unique object
					Set objWebCheckBox=Browser("name:="& browserName).Page("title:="& pageTitle).WebCheckBox("name:="& checkBoxName,"index:=" & checkBoxIndex)
		
								If Browser("name:="& browserName).Page("title:="& pageTitle).WebCheckBox("name:="& checkBoxName,"index:=" & checkBoxIndex).GetROProperty("disabled")=0 Then
					
										If Ucase(expectedStatus)="YES" or Ucase(expectedStatus)="TRUE" Then
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
														strStepDescription = "Validates check box " & "[Name:="& checkBoxName & "] status" 
														ImagePath=CaptureScreenshot(objWebCheckBox,strStepDescription)
													End if


                                                    If Browser("name:="& browserName).Page("title:="& pageTitle).WebCheckBox("name:="& checkBoxName,"index:=" & checkBoxIndex).GetROProperty("checked")=1 Then
																		status="DONE"
																		message="[ " & checkBoxName & " ] is checked."
																		Call ReporterFunction(strLibraryFileName,"ValidateCheckBoxWebStatus","2",stepName,message)
													Else
																		status="FAIL"
																		Flag=1
																		message="[ " & checkBoxName & " ] is not checked."
																		blnObjectError=True
																		Call ReporterFunction(strLibraryFileName,"ValidateCheckBoxWebStatus","1",stepName,message)
													End If
				
										ElseIf Ucase(expectedStatus)="NO" or Ucase(expectedStatus)="FALSE" Then
				
                                                    If Browser("name:="& browserName).Page("title:="& pageTitle).WebCheckBox("name:="& checkBoxName,"index:=" & checkBoxIndex).GetROProperty("checked")=0 Then
																		status="DONE"
																		message="[ " & checkBoxName & " ] is unchecked."
																		Call ReporterFunction(strLibraryFileName,"ValidateCheckBoxWebStatus","2",stepName,message)
													Else
																		status="FAIL"
																		Flag=1
																		message="[ " & checkBoxName & " ] is checked."
																		blnObjectError=True
																		Call ReporterFunction(strLibraryFileName,"ValidateCheckBoxWebStatus","1",stepName,message)
													End If
				
										Else
														status="FAIL"
														Flag=1
														message="[ " & checkBoxOption & " ] Invalid Option."
														blnObjectError=True
														Call ReporterFunction(strLibraryFileName,"ValidateCheckBoxWebStatus","1",stepName,message)		
										End If

							        	      blnExceptionFlag = Error_Listener ("ValidateCheckBoxWebStatus",objWebCheckBox)
											      If   blnExceptionFlag Then
'																	status="DONE"
'																	Call ReporterFunction(strLibraryFileName,"SelectCheckBoxWeb","2",stepName,message)
'											      else
																	Flag=1
																	status="FAIL"
																	message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																	Call ReporterFunction(strLibraryFileName,"ValidateCheckBoxWebStatus","1",stepName,message)
																	
											End If

								Else
													status="FAIL"
													Flag=1
													message="[ " & checkBoxName & " ] is Disabled."
													blnObjectError=True
													Call ReporterFunction(strLibraryFileName,"ValidateCheckBoxWebStatus","1",stepName,message)
								End If

						Else
								status="FAIL"
								Flag=1
								message="[ " & checkBoxName & " ] CheckBox is Missing/not Matching."
								blnObjectError=True
								Call ReporterFunction(strLibraryFileName,"ValidateCheckBoxWebStatus","1",stepName,message)
						End If
                 Set objWebCheckBox=Nothing
				Set obj=Nothing
				Set childObj=Nothing
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				blnObjectError=True
				Call ReporterFunction(strLibraryFileName,"ValidateCheckBoxWebStatus","1",stepName,message)
	End If

	'endTime = Timer()
	'ExeTime = FormatNumber(endTime - startTime,3)

  'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
	If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
	End If
		If Flag =1  Then
							ValidateCheckBoxWebStatus = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebCheckBox,message)
			Else
							ValidateCheckBoxWebStatus = True
			End If
		If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

End If 
End Function
'**********************************************************************************************************************************************************************
'End Function ValidateCheckBoxWebStatus(browserName,checkBoxName,checkBoxIndex,expectedStatus)
'**********************************************************************************************************************************************************************


'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ValidateWebListValue(browserName,listNameOrHtmlId,expectedValue) 
'Author
'											:	TCS
'Date			   				  
'											:	27.09.2011
'Description					
'											:	Validate an item from a List  in Web Forms is selected or not
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												listNameOrHtmlId : Name Or Html Id Property of the WebList Field
'													(Provide which one is available. Can provide either if both are present.)
'												valueToSelect : Value to be Selected
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    ValidateWebListValue(browserName,listNameOrHtmlId,expectedValue) 
'**********************************************************************************************************************************************************************
Public Function ValidateWebListValue(browserName,listNameOrHtmlId,expectedValue) 
        If Not Environment.Value("blnFatalError") Then 
                Dim blnObjectError 
                blnObjectError=False 
                startTime=Timer() 
                stepName="Validate Web List Value" 
                inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>List Name or Html Id : </b>"& listNameOrHtmlId &"<br><b>Expected Data : </b>" & expectedValue 

                On Error Resume Next 
                If browserName<>"" AND listNameOrHtmlId<>"" Then 
                        Set obj= Description.Create() 
                        obj("micclass").value="Page" 
            Set childObj=Browser("name:="& browserName).ChildObjects(obj) 
                        pageTitle=childObj(0).getroproperty("title") 
            If Browser("name:="& browserName).Page("title:="& pageTitle).WebList("html id:="& listNameOrHtmlId).Exist(10) Then        'Check Field for Description 
                                Set objWebList=Browser("name:="& browserName).Page("title:="& pageTitle).WebList("html id:="& listNameOrHtmlId) 
                                intSetFlag=0 
                        ElseIf Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listNameOrHtmlId).Exist(10)  Then        'Check Field for Prompt 
                                Set objWebList=Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listNameOrHtmlId) 
                                intSetFlag=0 
                        Else 
                                status="FAIL" 
                                Flag=1 
                                message="Web List Missing/not Matching" 
                                blnObjectError=True 
                                Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebListValue","1",stepName,message) 
            End If 
                        If intSetFlag=0 Then 
                                If objWebList.GetROProperty("disabled")=0 Then 
                                        strListContent=objWebList.GetROProperty("value") 
                                        If strListContent=expectedValue Then                ' Check in List if the value exists 
														If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
															strStepDescription = "Validates weblist " & "[Name or HtmlId:="& listNameOrHtmlId & "] value" 
															ImagePath=CaptureScreenshot(objText,strStepDescription)
														End if


													  status="PASS" 
													  message="Expected value ["& expectedValue &"] and Actual value ["& strListContent &"] matches." 
													  Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebListValue","2",stepName,message) 
													  blnExceptionFlag = Error_Listener ("ValidateWebListValue",objWebList)                                                                                                                      
                                        Else 
                                                        status="FAIL" 
                                                        Flag=1 
                                                        message="[ " & expectedValue & " ] is not selected." 
                                                        blnObjectError=True 
                                                        Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebListValue","1",stepName,message) 
                                        End If 
                                Else 
												status="FAIL" 
                                                Flag=1 
                                                message="[ " & listNameOrHtmlId & " ] is Disabled." 
                                                Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebListValue","1",stepName,message) 
                                End If 
                        End If 
                        Set objWebList=Nothing 
                        Set obj=Nothing 
                        Set childObj=Nothing 
                Else 
                                status="FAIL" 
                                Flag=1 
                                message="Insufficient Data Provided." 
                                blnObjectError=True 
                                Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebListValue","1",stepName,message) 
                End If 

                endTime = Timer() 
                ExeTime = FormatNumber(endTime - startTime,3) 
            Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName) 
                If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
                End If 
        End If 
End Function
'**********************************************************************************************************************************************************************
'End Function ValidateWebListValue(browserName,listNameOrHtmlId,expectedValue) 
'**********************************************************************************************************************************************************************

'*********************************************************************************************************************************************************************
'Name of the Function
'											:	EnterTextTabbedRegionHierarchy(formShortTitle,TopLeveltabbedRegionLabel,TopLeveltabbedRegionIndex,LowerLeveltabbedRegionLabel,LowerLeveltabbedRegionIndex,textFieldDescription,valueToEnter)
'Author
'											:	TCS
'Date			   				  
'											:	16.03.2014
'Description					
'											:	Entering value in Text Field inside Oracle Tabbed Tabbed Region
'Input Parameters	     
'											:	formShortTitle : Short Title Property of the Oracle Form Window
'												tabbedRegionLabel : Label Property of the Oracle Tabbed Region
'												tabbedRegionIndex : Index of the Oracle Tabbed Region
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'												textFieldDescription : Description / Prompt Property of the Text Field 
'													(Choose which one is available. Can choose either  in case both are present.)
'												textFieldIndex : Index of the Text Field
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'												valueToEnter : Value to be Entered
'Output Parameters      
'											: None
'**********************************************************************************************************************************************************************
'Function    EnterTextTabbedRegionHierarchy(formShortTitle,TopLeveltabbedRegionLabel,TopLeveltabbedRegionIndex,LowerLeveltabbedRegionLabel,LowerLeveltabbedRegionIndex,textFieldDescription,valueToEnter)
'**********************************************************************************************************************************************************************
Public Function EnterTextTabbedRegionHierarchy(formShortTitle,TopLeveltabbedRegionLabel,TopLeveltabbedRegionIndex,LowerLeveltabbedRegionLabel,LowerLeveltabbedRegionIndex,textFieldDescription,valueToEnter)
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		'startTime=Timer()
		stepName="Enter Text"
		inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& TopLeveltabbedRegionLabel & "<br><b>Prompt Or Description of the TextField : </b>" & textFieldDescription & "<br><b>Index of the Tabbed Region : </b>" & TopLeveltabbedRegionIndex & "<br><b>Index of the Text Field : </b>" & textFieldIndex & "<br><b>Value to Enter : </b>" & valueToEnter

	 
		On Error Resume Next
		Dim intSetFlag,objText
		intSetFlag=1

		If formShortTitle<>"" AND TopLeveltabbedRegionLabel<>"" AND TopLeveltabbedRegionIndex<>"" AND LowerLeveltabbedRegionLabel<>"" AND LowerLeveltabbedRegionIndex<>"" AND textFieldDescription<>"" Then
		'OracleFormWindow("short title:=Sales Orders").OracleTabbedRegion("label:=Order Information","index:=0").OracleTabbedRegion("label:=Main","index:=1").OracleTextField("description:=Customer PO").Enter "123456"
				If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTextField("description:="& textFieldDescription).Exist(3) Then
						Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTextField("description:="& textFieldDescription)
						intSetFlag = 0
				Else
						status="FAIL"
						Flag=1
						message="Given  Text Field Object Not Found." 
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegionHierarchy","1",stepName,message)
				End If

				If intSetFlag = 0 Then
						If objText.GetROProperty("editable") AND objText.GetROProperty("enabled") Then
								If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "Enter ["& valueToEnter &"] in hierarchial tabbed region text field " & "[description:="& textFieldDescription & "]" 
											ImagePath=CaptureScreenshot(objText,strStepDescription)
										End if

								objText.Enter valueToEnter
										  '// Calling Error_Listener
								blnExceptionFlag = Error_Listener ("EnterTextFieldTabbedRegion",objText)
								If Not blnExceptionFlag Then
											status="DONE"
											message="[ " &  valueToEnter & " ] :  has been entered in the Text Field."
											Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegionHierarchy","2",stepName,message)
								Else
											status="FAIL"
											Flag=1
											 message="<br> Unexpected Error Encountered After Entering Text   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
											Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegionHierarchy","1",stepName,message)	
								End If
						Else
								status="FAIL"
								Flag=1
								message="The Text field is NonEditable/Disabled."
								blnObjectError=True
								Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegionHierarchy","1",stepName,message)
						End If
				End If
		Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegionHierarchy","1",stepName,message)
		End If

		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3) 

		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

	If  blnObjectError  Then
		 Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
	End If
	If Flag =1  Then
							EnterTextTabbedRegionHierarchy = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
			Else
							EnterTextTabbedRegionHierarchy = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If	
End Function

'**************************************************************************************************
'End Function EnterTextTabbedRegionHierarchy()
'**************************************************************************************************

'****************************************************************************************************************************************************************
'Name of the Function   :EditXMLFile
'Author		     					  :TCS
'Date			 				     :17-Nov-2014
'Description		          : Edit XMLfile for Uploading in Tumbleweed
'			        
'			        
'Input Parameters	     : xmlFilePath->Full path of the XMLfile.
'											strReplaceFileUniqIdentifier->Unique file identifier to be updated
'                                            strReplaceRecordNumberID-> ID to be updated.
'											strReplaceSegment1->Segment 1 to be updated
'											

'********************************************************************************************************************************************************************
'******************************************************************************************************************************************************************************************
'Function    CaptureTableFieldValueTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,dataRowNo,dataColumnName)
Public Function EditXMLFile(xmlFilePath,strReplaceFileUniqIdentifier,strReplaceRecordNumberID,strReplaceSegment1,strReplaceProjName)
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		startTime=Timer()
		stepName="Edit XMLfile to upload in fstp"
		inputParameter="<b>Path of XML file path to be edited: </b>"& xmlFilePath &"<br><b>File Unique Identifier</b>"& strReplaceFileUniqIdentifier & "<br><b>ID: </b>" & strReplaceRecordNumberID & "<br><b>Segment 1 : </b>" & strReplaceSegment1

		Const ForReading = 1
		Const ForWriting = 2
	
		Set objFSO = CreateObject("Scripting.FileSystemObject")
		Set objFile = objFSO.OpenTextFile(xmlFilePath, ForReading)
		
		strText = objFile.ReadAll
		
		'Edit the FileUniqueIdentifier
		stBeforeFileUniqIdentifier=left(strText,instr(strText,"<FileUniqueIdentifier>")+len("<FileUniqueIdentifier>")-1)
	'	strReplaceFileUniqIdentifier="GREAROSI_201411141253"
		strTotalLeftStr=stBeforeFileUniqIdentifier + strReplaceFileUniqIdentifier
		strTotalRightStr=mid(strText,(instr(strText,"</FileUniqueIdentifier>")))
		'Concatenate the XML after changing the FileUniqueIdentifier
		strText=strTotalLeftStr + strTotalRightStr
		'print strText
		'print left(strText, (instr(instr(strText,"<RecordNumber xmlns"),strText,"http://www.w3.org/2001/XMLSchema"&chr(34)&" ID="&chr(34))+len("http://www.w3.org/2001/XMLSchema"&chr(34)&" ID="&chr(34))-1))
		strBeforeRecordNumber=left(strText, (instr(instr(strText,"<RecordNumber xmlns"),strText,"http://www.w3.org/2001/XMLSchema"&chr(34)&" ID="&chr(34))+len("http://www.w3.org/2001/XMLSchema"&chr(34)&" ID="&chr(34))-1))
		
		'print mid(strText,instr (instr(strText,"<RecordNumber xmlns"),strText,chr(34)&">"))
		
	'	strReplaceRecordNumberID="9000"
		strAfterRecordNumber=mid(strText,instr (instr(strText,"<RecordNumber xmlns"),strText,chr(34)&">"))
		'Concatenate XML after updating Record Number ID
		strText=strBeforeRecordNumber+strReplaceRecordNumberID+strAfterRecordNumber
		
		'print instr(instr(strText,"<Segment1"),strText,">")
		
		
		strBeforeSegement1 = left(strText,instr(instr(strText,"<Segment1"),strText,">"))
	'	strReplaceSegment1 = "0009000"
		strAfterSegement1 = mid(strText,instr(instr(strText,"<Segment1"),strText,"</Segment1>"))
		strText = strBeforeSegement1+strReplaceSegment1+strAfterSegement1
		
		strBeforeProjName = left(strText,instr(strText,"<ProjName>")+9)
	'	strReplaceProjName = "GREAROSI_201411141253"
		strAfterProjName = mid(strText,instr(strText,"</ProjName>"))
		strText = strBeforeProjName+strReplaceProjName+strAfterProjName
	
		strNewXMLFilePath=left(xmlFilePath,instrrev(xmlFilePath,"\"))+strReplaceFileUniqIdentifier+".xml"
		'print strNewXMLFilePath
		Dim fso
		Set fso = CreateObject("Scripting.FileSystemObject")
		fso.CreateTextFile(strNewXMLFilePath)
		Set fileObj= fso.OpenTextFile(strNewXMLFilePath,ForWriting,True)
		fileObj.Write(strText)
		fileObj.Close
		Set fileObj = Nothing
		If err.number <> 0 then
			status="FAIL"
			Flag=1
			message="Error while editing XMLfile"
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","EditXMLFile","1",stepName,message)
		ELSE
			status="DONE"
			message="XMLfile has been edit and saved successfully."
			Call ReporterFunction("e-Swift_FunctionLibrary","EditXMLFile","2",stepName,message)
		END IF

		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3) 

		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
							EditXMLFile = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(objText,message)
			Else
							EditXMLFile = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

	
	End IF
End Function

'*********************************************************************************************************************************************************************
'Name of the Function
'											:	RefreshRequestByName(requestName,maxTimeOut)
'Author
'											:	TCS
'Date			   				  
'											:	23.09.2011
'Description					
'											:	Refreshing a given Request until the request completes or Maximum Timeout reaches
'												( This Function is a customized function for the Request page. Need Find Request Page to be opened to operate upon.)
'Input Parameters	     
'											:	requestName : Request Number to Refresh
'												maxTimeOut : Maximum allowed time for a request to be waited for
'Output Parameters      
'											:	requestStatus : Status of the Request after refreshing for the given timelimit
'**********************************************************************************************************************************************************************
'Function    RefreshRequestByName(requestName,maxTimeOut)
'**********************************************************************************************************************************************************************
Public Function RefreshRequestByName(requestName,maxTimeOut)
	If Not Environment.Value("blnFatalError") Then
		'startTime=Timer()
		stepName="Refresh a Request and Return Status"
		inputParameter="<b>Request Name :</b>" & requestName &"<br><b>Maximum Timeout : </b>"& maxTimeOut & " Second(s)"
		On Error Resume Next
		requestStatus=""
		If maxTimeOut="" Then
			maxTimeOut=700
			inputParameter="<b>Request Name :</b>" & requestName &"<br><b>Maximum Timeout : </b> 700 Second(s)"
		End If

		If requestName<>"" Then
			If OracleFormWindow("short title:=Find Requests").Exist(4)  Then
				OracleFormWindow("short title:=Find Requests").OracleRadioGroup("developer name:=JOBS_QF_WHICH_JOBS").Select "Specific Requests"
				OracleFormWindow("short title:=Find Requests").OracleTextField("description:=Name").Enter requestName
				OracleFormWindow("short title:=Find Requests").OracleButton("label:=Find").Click
        wait (20)
				If OracleFormWindow("short title:=Requests").Exist(4) Then
						Do
								Wait(1)
								OracleFormWindow("short title:=Requests").OracleButton("description:=Refresh Data").Click
								iWaitCounter = iWaitCounter  + 1
								Loop Until (OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,4) = "Completed") OR (iWaitCounter >maxTimeOut)
        						requestName	= OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,2)
								requestPhase =  OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,4)
								requestStatus = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,5)
								If iWaitCounter <maxTimeOut Then
									If requestStatus="Normal" Then
												status="DONE"
												message= "[ " & requestName & " ] : Request Executed Successfully."
												outputParameter="Request Status : [ " & requestStatus &" ]"
												Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName","2",stepName,message)
									ElseIf requestStatus="Error" Then					  
												status="FAIL"
												Flag=1
												message= "[ " & requestName & " ] : Error occured during Execution."
												outputParameter="Request Status : [ " & requestStatus &" ]"
												Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName","1",stepName,message)
									Else
												status="DONE"
'												Flag=1
												message="Execution Completed with Warning"
												outputParameter="Request Status : [ " & requestStatus &" ]"
												Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName","1",stepName,message)
									End If			
								Else
										status="FAIL"
										Flag=1
										message="Maximum Timeout Exceeded."
										outputParameter="Request Status before Timeout : [ "& requestStatus &" ]<br>Request Phase before Timeout : [ "& requestPhase &" ]"
										Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName","1",stepName,message)
								End If
							Else
									status="FAIL"
									Flag=1
									message="Request form not Found."
									blnObjectError=True
									Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName","1",stepName,message)
							End If
						Else
							status="FAIL"
							Flag=1
							message="Invalid Request Name."
							Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName","1",stepName,message)
					End If
				Else
						status="FAIL"
						Flag=1
						message="No Request Name Provided."
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName","1",stepName,message)
				End If

				'endTime = Timer()
				'ExeTime = FormatNumber(endTime - startTime,3)
				'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

				If  blnObjectError  Then
					Environment.Value("blnFatalError")=True
					Call Error_Recovery ("CloseAllForms")
				End If
				If Flag =1  Then
							RefreshRequestByName = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(objText,message)
			Else
							RefreshRequestByName = requestStatus
			End If
			If blnDefault_eSwiftReporting Then  
				Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If
				
	End If
End Function
'**********************************************************************************************************************************************************************
'End Function RefreshRequestByName(requestName,maxTimeOut)
'**********************************************************************************************************************************************************************



'**********************************************************************************************************************************************************************************

Public Function KillExcelProcess()
   	On Error Resume Next
   Set objWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}" & "!\\.\root\cimv2")
    Set colProcess = objWMIService.ExecQuery ("Select * From Win32_Process")
   Set objWshShell = CreateObject("WScript.Shell")
   For Each objProcess in colProcess
      If LCase(objProcess.Name) = LCase("EXCEL.EXE") Then
         objWshShell.Run "TASKKILL /F /T /IM " & objProcess.Name, 0, False
         objProcess.Terminate()
         'MsgBox "- ACTION: " & objProcess.Name & " terminated"
      End If
   Next
End Function

'***********************************************************************************************************************************************************************


Public Function EnterTextWeb_VisibleFalse(browserName,textFieldName,textFieldIndex,valueToEnter)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		startTime=Timer()
		stepName="Enter Text"
		inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Text Field Name : </b>"& textFieldName &"<br><b>Text Field Index : </b>" & textFieldIndex &"<br><b>Value to Enter : </b>" & valueToEnter

		On Error Resume Next
		'If browserName<>"" AND textFieldName<>"" AND textFieldIndex<>""  And valueToEnter <> "" Then
		If browserName<>"" AND textFieldName<>"" AND textFieldIndex<>"" Then
            Set obj= Description.Create()
			obj("micclass").value="Page"
            Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")

			If  Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).Exist(3) Then
				If Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).Exist(3) Then
					If Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("readonly")=0 AND Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("disabled")=0  Then
						Set objWebEdit=Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex)
                        If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
										strStepDescription = "Enter text in text field" & "[Name:="& textFieldName & "]" 
										ImagePath=CaptureScreenshot(objWebEdit,strStepDescription)
						End if
						Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).Set valueToEnter
						blnExceptionFlag = Error_Listener ("EnterTextWeb_VisibleFalse",objWebEdit)
																														'// end

						If Not blnExceptionFlag Then
							status="DONE"
							message="[ " & valueToEnter &"] has been Entered Successfully."
							Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb_VisibleFalse","2",stepName,message)
						Else
							status="FAIL"
							Flag=1
							message="<br> Unexpected Error Encountered After Entering Text   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
							Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb_VisibleFalse","1",stepName,message)
                        End If
																		
					Else
						status="FAIL"
						Flag=1
						message="[ " & textFieldName &"] is Disabled / Non Editable."
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb_VisibleFalse","1",stepName,message)
					End If
				Else
					status="FAIL"
					Flag=1
					message="[ " & textFieldName &"] is not Visible."
					blnObjectError=True
					Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb_VisibleFalse","1",stepName,message)
				End If
			Else
				status="FAIL"
				Flag=1
				message="[ " & textFieldName &"] Field does not Exist."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb_VisibleFalse","1",stepName,message)
			End If
			Set objWebEdit=Nothing
			Set obj=nothing
			Set childObj=nothing

		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb_VisibleFalse","1",stepName,message)
		End If

		'endTime = Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)

		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
  		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
			'Call Error_Recovery ("CONTINUE")
		End If
		If Flag =1  Then
							EnterTextWeb_VisibleFalse = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebEdit,message)
			Else
							EnterTextWeb_VisibleFalse = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

	End If	
End Function
'**********************************************************************************************************************************************************************
'End Function EnterTextWeb(browserName,textFieldName,textFieldIndex,valueToEnter)
'**********************************************************************************************************************************************************************
'*********************************************************************************************************************************************************************
'Name of the Function
'											:	RefreshPaymentProcessRequest(browserName,webTableName,webTableHTMLTag,webButtonName,statusHTMLId,expectedRequestStatus,maxTimeOut)
'Author
'											:	TCS
'Date			   				  
'											:	23.09.2011
'Description					
'											:	Refreshing a given Request until the request completes or Maximum Timeout reaches
'												( This Function is a customized function for the Request page. Need Find Request Page to be opened to operate upon.)
'Input Parameters	     
'											:	requestNumber : Request Number to Refresh
'												maxTimeOut : Maximum allowed time for a request to be waited for
'Output Parameters      
'											:	requestStatus : Status of the Request after refreshing for the given timelimit
'**********************************************************************************************************************************************************************
'Function    RefreshPaymentProcessRequest(browserName,webTableName,webTableHTMLTag,webButtonName,statusHTMLId,expectedRequestStatus,maxTimeOut)
'**********************************************************************************************************************************************************************
Public Function RefreshPaymentProcessRequest(browserName,webTableName,webTableHTMLTag,webButtonName,statusHTMLId,expectedRequestStatus,maxTimeOut)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		startTime=Timer()
		stepName="Refresh Payment Process Request"
		inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Web Element Class : </b>"& webTableName &"<br><b>Web Element HTML Tag : </b>" & webTableHTMLTag &"<br><b>Expected Value : </b>" & expectedValue

		On Error Resume Next
		Dim strCapturedText
		If browserName <>"" AND  webTableHTMLTag <>"" AND webButtonName<>"" Then
            Set obj= Description.Create()
			obj("micclass").value="Page"
            Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).GetROProperty("title")
			IF Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("name:="&webTableName ,"html tag:="&webTableHTMLTag).exist(3) then
				Do
				    	status = Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("name:="&webTableName ,"html tag:="&webTableHTMLTag).WebElement("html id:="& statusHTMLId,"index:="&webElementIndex).getROproperty("innertext")
		           		If status<>expectedRequestStatus Then
		           			Browser("name:="& browserName).Page("title:="& pageTitle).WebButton("name:="& webButtonName).click
		           			maxTimeOut=maxTimeOut-2
		           			wait(3)
		           		Else
		           			Exit Do
		           		End If
		           	
	           	Loop While (maxTimeOut<>0)
	           	If status=expectedRequestStatus Then
		           		status="DONE"
						message="Process completed successfully."
						Call ReporterFunction("e-Swift_FunctionLibrary","RefreshPaymentProcessRequest","2",stepName,message)
	           	Else
		           		status="FAIL"
						Flag=1
						message="Timed Out."
				 		blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","RefreshPaymentProcessRequest","1",stepName,message)
		        End If
	        Else
				status="FAIL"
				Flag=1
				message="Table Not found."
				blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","RefreshPaymentProcessRequest","1",stepName,message)
		End If
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			 blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","RefreshPaymentProcessRequest","1",stepName,message)
		End If
		 If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
                End If
          If Flag =1  Then
							RefreshPaymentProcessRequest = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(objText,message)
			Else
							RefreshPaymentProcessRequest = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

		'endTime = Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)

		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		
	End If	
End Function
'**********************************************************************************************************************************************************************
'End Function RefreshPaymentProcessRequest(browserName,webTableName,webTableHTMLTag,webButtonName,statusHTMLId,expectedRequestStatus,maxTimeOut)
'**********************************************************************************************************************************************************************
'************************************************************************************************************************************************************************
Public Function GetApproverUserID(InputFilePath,sheetName,approverNameArray)
    If Not Environment.Value("blnFatalError") Then
       On Error Resume Next
		If Not Environment.Value("blnFatalError") Then
			Dim blnObjectError
			blnObjectError=False
			Dim userIdArray(10)
			Dim oConn, oRS, arrData, x,iStart
			CONST adOpenStatic = 3
			CONST adLockOptimistic = 3
			CONST adCmdText = "&H0001"
			Set oConn = CreateObject("ADODB.Connection")
			Set objRecSet= CreateObject("ADODB.RecordSet")
	
			'Open Connection
			oConn.Open "Provider=Microsoft.Jet.OLEDB.4.0;" &_		
						"Data Source=" & InputFilePath & ";" & _
						"Extended Properties=""Excel 8.0;HDR=Yes;"";"
			sQuery = "Select * From [" & sheetName & "$]"
	
			'Run query against WorkBook
			objRecSet.Open sQuery, oConn, 3, 3, 1
	
			'Move RecordSet to the target Row
			For x = 2 to IterationIndex - 1
				objRecSet.MoveNext
			 Next
	 
			'Use a For..Loop to iterate through Recordset
			For x = 0   to objRecSet.Fields.Count - 1
							DataItemName = trim(objRecSet(x).Name)
							DataItemValue=trim(objRecSet(x).Value)
	'						Execute DataItemName &"= DataItemValue"       '' The variable value is assigned to the vairable name
							For y=0 to UBound(approverNameArray)
								If DataItemName=approverNameArray(y) Then
									userIdArray(y)=DataItemValue
								End If
							Next
			Next
			GetApproverUserID=userIdArray
			set oConn = Nothing
			set objRecSet = Nothing
		End if
	End if
End Function
'************************************************************************************************************************************************************************
Public Function CollectApproverList(browserName)
		On Error Resume Next
		Dim blnObjectError
		blnObjectError=False
	'	startTime=Timer()
		stepName="Capture Approver List"
		inputParameter="<b>Browser Name :</b>" & browserName
		'LinkCount=0
		'Capture the total number of approvers
		Set obj= Description.Create()
		obj("micclass").value="Page"
		Set childObj=Browser("name:="& browserName).ChildObjects(obj)
		pageTitle=childObj(0).getroproperty("title")
		columnnames=Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("name:=Manage Approvals","index:=0").GetROProperty("column names")
		'Replace all spaces with semi-colons
		ReplaceApprovers=replace(columnnames,"  ",";")
		'Split the number of approvers w.r.t semi-colons
		arr1=split(ReplaceApprovers,";;;")
		'arr1(0) contains additional text "Manage Approvals; Need to remove it.
		arr2=split(arr1(0),";")
		'Trim the spaces in the second part where the approver name is present and update the total appovers list array
		arr1(0)=trim(arr2(1))
		'Print the names of the approvers
		For arr1count = 0 to UBOUND(arr1)
			'print arr1(arr1count)
			If Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&arr1(arr1count)).exist(3) Then
				'LinkCount=LinkCount+1
				If instr(arr1(arr1count),"Notification")=0 then
				Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&arr1(arr1count)).click
				arr1(arr1count)=Browser("name:=Approval Group").Page("Title:=Approval Group").WebElement("html id:=N3:ApproverName:0").GetROProperty("innertext")
				Browser("name:=Approval Group").Page("Title:=Approval Group").WebButton("label:=Return","index:=0").Click
				wait(10)
				end if
             End If

		Next
		approverList=""
		For i=0 to uBound(arr1)
			approverList=approverList+arr1(i)&";"
		Next
        If arr1<>NULL Then
					status="DONE"
					message="Approver List : "&approverList&" Captured Successfully."
					Call ReporterFunction("e-Swift_FunctionLibrary","CollectApproverList","2",stepName,message)
		Else
					status="FAIL"
					Flag = 1
					message="Approver List Not Captured."
					Call ReporterFunction("e-Swift_FunctionLibrary","CollectApproverList","2",stepName,message)
		End If
		
		'CollectApproverList=arr1

		'endTime = Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)
		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		 If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
                End If

		If Flag =1  Then
							CollectApproverList = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(objText,message)
			Else
							CollectApproverList = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If


End Function
'*************************************************************************************************************************************************************


Public Function CheckTextFieldValueWebNotNull(browserName,textFieldName,textFieldIndex)
	startTime=Timer()
	stepName="Check Text Field Value Not Null"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Text Field Name : </b>"& textFieldName &"<br><b>Text Field Index : </b>" & textFieldIndex
	On Error Resume Next
	If browserName <>"" AND textFieldName <>"" AND textFieldIndex <>"" Then
					Set obj= Description.Create()
					obj("micclass").value="Page"
            		Set childObj=Browser("name:="& browserName).ChildObjects(obj)
					pageTitle=childObj(0).GetROProperty("title")
					
				If  Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName ,"index:="& textFieldIndex).Exist(3) Then
						Set objText = Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName ,"index:="& textFieldIndex)
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "Checks value of  text field" & "[text field Name:="& textFieldName & "] is null or not" 
											ImagePath=CaptureScreenshot(objText,strStepDescription)
										End if
	
						 If Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName ,"index:="& textFieldIndex).value <>"" Then
								status="PASS"
								Flag=0
								message="The text field is Not Null."
								Call ReporterFunction("e-Swift_FunctionLibrary","CheckTextFieldValueWebNotNull","2",stepName,message)
						Else
								status="FAIL"
								Flag=1
								message="The text field is Null."
								Call ReporterFunction("e-Swift_FunctionLibrary","CheckTextFieldValueWebNotNull","1",stepName,message)
				End If
				Else
					status="FAIL"
					Flag=1
					message="The Text field object not found."
					Call ReporterFunction("e-Swift_FunctionLibrary","CheckTextFieldValueWebNotNull","1",stepName,message)
				End If
		
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","CheckTextFieldValueWebNotNull","1",stepName,message)
	End If
	'endTime = Timer()
	'ExeTime = FormatNumber(endTime - startTime,3)

  'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
	 If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
                End If
	If Flag =1  Then
							CheckTextFieldValueWebNotNull = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
			Else
							CheckTextFieldValueWebNotNull = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If


End Function

'**********************************************************************************************************************************************************************
' End Function CheckTextFieldValueWebNotNull(browserName,textFieldName,textFieldIndex)
'**********************************************************************************************************************************************************************
'************************************************************************************************************************************************************************
Public Function ClickButtonWebwithoutPagetitle(browserName,buttonName,buttonIndex)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		'startTime=Timer()
		stepName="Click Button"
		inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Button Name : </b>"& buttonName &"<br><b>Button Index : </b>" & buttonIndex

		On Error Resume Next
		If browserName <>"" AND buttonName <>"" AND  buttonIndex <>"" Then
			Set obj= Description.Create()
			obj("micclass").value="Page"

			'Set childObj=Browser("name:="& browserName).ChildObjects(obj)
'			pageTitle=childObj(0).getroproperty("title")
			Set objWebButton=Browser("name:="& browserName).WebButton("name:="& buttonName,"index:=" & buttonIndex)
			If objWebButton.Exist(3) Then
				If objWebButton.GetROProperty("disabled")=0  Then
					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "Clicks the button" & "[Name:="& buttonName & "]" 
											ImagePath=CaptureScreenshot(objWebButton,strStepDescription)
					End if
					objWebButton.Click
					blnExceptionFlag = Error_Listener ("ClickButtonWebwithoutPagetitle",objWebButton)
					If  Not blnExceptionFlag Then
						status="DONE"
						message="Web Button [ "& buttonName &" ]  has been Clicked Successfully."
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWebwithoutPagetitle","2",stepName,message)
					else
						Flag=1
						status="FAIL"
						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWebwithoutPagetitle","1",stepName,message)																	
					End If     
				Else
					status="FAIL"
					Flag=1
					message="Web Button [ "& buttonName &" ]  is Disabled."
					blnObjectError=True
				  Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWebwithoutPagetitle","1",stepName,message)
				End If

			Else
				status="FAIL"
				Flag=1
				message="Web Button [ "& buttonName &" ]  not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWebwithoutPagetitle","1",stepName,message)
			End If
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWebwithoutPagetitle","1",stepName,message)
		End If
        Set objWebButton=Nothing
		Set obj=nothing
		'Set childObj=nothing
		'endTime = Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)

		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
							ClickButtonWebwithoutPagetitle = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebButton,message)
			Else
							ClickButtonWebwithoutPagetitle = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If


	End If
End Function
'************************************************************************************************************************************************************************



'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ClickWinButton(browserName,buttonName,buttonIndex)
'Author
'											:	TCS
'Date			   				  
'											:	26.09.2011
'Description					
'											:	Clicking a Win Dialog Boz button in Web based Oracle Forms
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												dialogText: text property of dialog box
'												winButtontext: text propeerty of win button
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    ClickWinButton(browserName,dialogText,winButtontext)
'**********************************************************************************************************************************************************************
Public Function ClickWinButton(browserName,dialogText,winButtontext)
	If Not Environment.Value("blnFatalError") Then
		startTime=Timer()
		stepName="Click Win Button"
		inputParameter="<b>Browser name :</b>" &browserName &"<b>Dialog Text :</b>" & dialogText &"<br><b>Button text : </b>"& winButtontext

		On Error Resume Next
		If browserName <> "" AND dialogText <>"" AND winButtontext <>""Then
			'Set obj= Description.Create()
			'obj("micclass").value="Page"

			'Set childObj=browser("name:="& browserName).ChildObjects(obj)
			'pageTitle=childObj(0).getroproperty("title")
			Set objWinButton=Dialog("text:="& dialogText).WinButton("text:="& winButtontext)
			If objWinButton.Exist(3) Then
				If objWinButton.GetROProperty("disabled")=0  Then
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "Clicks Win button" & "[text:="& winButtontext & "]" 
											ImagePath=CaptureScreenshot(objWinButton,strStepDescription)
						End if
						objWinButton.Click
						status="DONE"
						message="Win Button [ "& winButtontext &" ]  has been Clicked Successfully."
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickWinButton","2",stepName,message)
				else 
					status="FAIL"
					Flag=1
					message="Web Button [ "& buttonName &" ]  is Disabled."
					blnObjectError=True
				  Call ReporterFunction("e-Swift_FunctionLibrary","ClickWinButton","1",stepName,message)
				End if
			Else
					status="FAIL"
					Flag=1
					message="Web Button [ "& buttonName &" ]  Not Exists."
					blnObjectError=True
				  Call ReporterFunction("e-Swift_FunctionLibrary","ClickWinButton","1",stepName,message)
			End if
			Else 
					status="FAIL"
					Flag=1
					message="Insufficient Data"
					blnObjectError=True
				  Call ReporterFunction("e-Swift_FunctionLibrary","ClickWinButton","1",stepName,message)
		End if
		If Flag =1  Then
							ClickWinButton = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWinButton,message)
			Else
							ClickWinButton = True
			End If
		If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
		 If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
          End If
		 Set objWinButton=Nothing
		'Set obj=nothing
		'Set childObj=nothing
		'endTime = Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)
	End If
End Function
'**********************************************************************************************************************************************************************
'End Function ClickWinButton(browserName,dialogText,winButtontext)
'**********************************************************************************************************************************************************************
'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ValidateTextWebElement_PartialValue(browserName,webElementClass,webElementHTMLTag,expectedData)
'Author
'											:	TCS
'Date			   				  
'											:	11.10.2011
'Description					
'											:	Selecting an item from a List  in Web Forms
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												webElementClass : Class Property of the Web Element
'												webElementHTMLTag : HTML Tag of the Web Element'											
'												expectedValue : The expected value to be matched with run time value
'Output Parameters      
'											:	
'**********************************************************************************************************************************************************************
' Function ValidateTextWebElement_PartialValue(browserName,webElementClass,webElementHTMLTag,expectedData)
'**********************************************************************************************************************************************************************
Public Function ValidateTextWebElement_PartialValue(browserName,webElementClass,webElementHTMLTag,expectedData)
	startTime=Timer()
	stepName="Validate Text in WebElement Partial Value"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Web Element Class : </b>"& webElementClass &"<br><b>Web Element HTML Tag : </b>" & webElementHTMLTag &"<br><b>Expected Data : </b>" & expectedData
	On Error Resume Next
	If browserName <>"" AND webElementClass <>"" AND webElementHTMLTag <>"" Then
					Set obj= Description.Create()
					obj("micclass").value="Page"
            		Set childObj=Browser("name:="& browserName).ChildObjects(obj)
					pageTitle=childObj(0).GetROProperty("title")

				If  Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("class:="& webElementClass ,"html tag:="& webElementHTMLTag).Exist(3) Then
					strActual=Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("class:="& webElementClass ,"html tag:="& webElementHTMLTag).GetROProperty("innerText")
					Set objText = Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("class:="& webElementClass ,"html tag:="& webElementHTMLTag)
					If instr(strActual,expectedData) <> 0 Then
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "validates web element " & "[HtmlTag:="& webElementHTMLTag & ",Class:="& webElementClass &"]" 
											ImagePath=CaptureScreenshot(objText,strStepDescription)
						End if	
						status="PASS"
						message="Expected data matches with actual value"
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextWebElement_PartialValue","2",stepName,message)
					
					Else
						status="FAIL"
						Flag=1
						message="Expected data does not match with actual value"
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextWebElement_PartialValue","1",stepName,message)
					End If
	
	Else
						status="FAIL"
						Flag=1
						message="The Web Element does not  exist"
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextWebElement_PartialValue","1",stepName,message)
					End If
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextWebElement_PartialValue","1",stepName,message)
	End If
	'endTime = Timer()
	'ExeTime = FormatNumber(endTime - startTime,3)

  'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
	 If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
                End If
     If Flag =1  Then
							ValidateTextWebElement_PartialValue = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
			Else
							ValidateTextWebElement_PartialValue = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

End Function

'**********************************************************************************************************************************************************************
' End Function ValidateTextWebElement_PartialValue(browserName,webElementClass,webElementHTMLTag,expectedData)
'**********************************************************************************************************************************************************************
Public Function CollectApproverList_Check(browserName)
On Error Resume Next
Dim blnObjectError
blnObjectError=False
'startTime=Timer()
stepName="Capture Approver List"
inputParameter="<b>Browser Name :</b>" & browserName
'LinkCount=0
'Capture the total number of approvers
Set obj= Description.Create()
obj("micclass").value="Page"
Set childObj=Browser("name:="& browserName).ChildObjects(obj)
pageTitle=childObj(0).getroproperty("title")
columnnames=Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("name:=Manage Approvals","index:=0").GetROProperty("column names")
'Replace all spaces with semi-colons
ReplaceApprovers=replace(columnnames,"  ",";")
'Split the number of approvers w.r.t semi-colons
arr1=split(ReplaceApprovers,";;;")
'arr1(0) contains additional text "Manage Approvals; Need to remove it.
arr2=split(arr1(0),";")
'Trim the spaces in the second part where the approver name is present and update the total appovers list array
arr1(0)=trim(arr2(1))
'Print the names of the approvers
For arr1count = 0 to UBOUND(arr1)
'print arr1(arr1count)
If Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&arr1(arr1count)).exist(3) Then
'LinkCount=LinkCount+1
'If instr(arr1(arr1count),"Notification")=0 then
Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&arr1(arr1count)).click
arr1(arr1count)=Browser("name:=Approval Group").Page("Title:=Approval Group").WebElement("html id:=N3:ApproverName:0").GetROProperty("innertext")
Browser("name:=Approval Group").Page("Title:=Approval Group").WebButton("label:=Return","index:=0").Click
wait(5)
'end if
             End If


Next
approverList=""
For i=0 to uBound(arr1)
approverList=approverList+arr1(i)&";"
Next
        If arr1<>NULL Then
status="DONE"
message="Approver List : "&approverList&" Captured Successfully."
Call ReporterFunction("e-Swift_FunctionLibrary","CollectApproverList_Check","2",stepName,message)
Else
flag = 1
status="FAIL"
message="Approver List Not Captured."
Call ReporterFunction("e-Swift_FunctionLibrary","CollectApproverList_Check","2",stepName,message)
End If
 
'CollectApproverList_Check=arr1
If Flag =1  Then
							CollectApproverList_Check = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(objText,message)
			Else
							CollectApproverList_Check=arr1
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

'endTime = Timer()
'ExeTime = FormatNumber(endTime - startTime,3)
'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
End Function
'************************************************************************************
'Name of the Function : CaptureTextWebEdit
'Author		     					:  TCS
'Date			 				    : 25-febMAR-2013
'Description		     :  Get the value from web text boxt
'Input Parameters	     :  browserName
'										  : textFieldName
'										  :textFieldIndex
'										  									   
'Output Parameters    : textField value
'**********************************************************************************************************************************************************************
'Function    CaptureTextWebEdit(browserName,textFieldName,textFieldIndex)
'**********************************************************************************************************************************************************************
Public Function CaptureTextWebEdit(browserName,textFieldName,textFieldIndex)
    If Not Environment.Value("blnFatalError") Then
	Dim blnObjectError
    blnObjectError=False
	startTime=Timer()
	stepName="Capture Text in WebEdit"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Text Field Name : </b>"& textFieldName &"<br><b>Text Field Index : </b>" & textFieldIndex

	On Error Resume Next
	Dim strCapturedText
	If browserName<>"" AND textFieldName<>"" AND textFieldIndex<>"" Then

		Set obj= Description.Create()
		obj("micclass").value="Page"
        Set childObj=Browser("name:="& browserName).ChildObjects(obj)
		pageTitle=childObj(0).getroproperty("title")

		If  Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).Exist(3) Then
			If Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("visible") Then
				If Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("readonly")=0 AND Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("disabled")=0  Then
					Set ObjText = Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex)
                    If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "captures Value  text field" & "[Name:="& textFieldName & "]" 
											ImagePath=CaptureScreenshot(objText,strStepDescription)
					End if
					strCapturedText = Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("value")
					blnExceptionFlag = Error_Listener ("CaptureTextWebEdit",objWebEdit)
																														'// end
						If Not blnExceptionFlag Then
						    status="DONE"
							message="Text field value captured : " &strCapturedText
							Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit","2",stepName,message)
						Else
							status="FAIL"
							Flag=1
							message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
							Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit","1",stepName,message)
			
						End If
								
'								outputParameter=strCapturedText
					Else
							status="FAIL"
							Flag=1
							message="Text box is read only or disabled."
							blnObjectError=True
							Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit","1",stepName,message)
					End If
				
				Else
						status="FAIL"
						Flag=1
						message="Text box not visible"
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit","1",stepName,message)
				End If
            
			Else
				status="FAIL"
				Flag=1
				message="text box not found"
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit","1",stepName,message)
			End If
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				blnObjectError=True
				all ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit","1",stepName,message)
	End If

	outputParameter=strCapturedText						'Setting Output Parameter
	

	'endTime = Timer()
	'ExeTime = FormatNumber(endTime - startTime,3)

  'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		 If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
							CaptureTextWebEdit = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
			Else
							CaptureTextWebEdit=strCapturedText	
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If	
End Function
'*******************************************************************************************************************************************************************************
'Captures Budget number from Output in PRJ_TC03
Public Function CaptureDatafromRequestPRJ_TC03()
Dim blnObjectError
blnObjectError=False
startTime=Timer()
stepName="CaptureDatafromRequestPRJ_TC03 - Budget Structure Upload"
inputParameter="<b>Browser ID :</b>" & "2" &"<br><b>Web Element HTML Tag : </b>"& "PRE"
strInnerText=Browser("CreationTime:=2").Page("index:=0").WebElement("html tag:=PRE").getROProperty("innertext")
beforeposstart=instr(strInnerText,"Description                         ")
posstart=instr(beforeposstart,strInnerText
'print posstart
dummylinelength= len
BudgetNumberstartpos=posstart+dummylinelength
CaptureDatafromRequestPRJ_TC03=mid(strInnerText,BudgetNumberstartpos,13)
	If CaptureDatafromRequestPRJ_TC03 <> "" Then
		status="DONE"
		message="Inner Text [ "& CaptureDatafromRequestPRJ_TC03 & " ] Captured during Runtime."
		Call ReporterFunction("e-Swift_FunctionLibrary","CaptureDatafromRequestPRJ_TC03","2",stepName,message)
	Else
		status="FAIL"
		Flag=1
		message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
		Call ReporterFunction("e-Swift_FunctionLibrary","CaptureDatafromRequestPRJ_TC03","1",stepName,message)
		blnObjectError=True
	End If
Browser("CreationTime:=2").Close
'endTime = Timer()
'ExeTime = FormatNumber(endTime - startTime,3)
'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
If  blnObjectError  Then
	Environment.Value("blnFatalError")=True
	Call Error_Recovery ("CloseAllForms")
End If
If Flag =1  Then
							CaptureDatafromRequestPRJ_TC03 = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(objText,message)
			Else
							CaptureDatafromRequestPRJ_TC03 = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
End Function




'Captures Budget number from Output in PRJ_TC03
Public Function CaptureDatafromRequestPRJ_TC04()
Dim blnObjectError
blnObjectError=False
startTime=Timer()
stepName="CaptureDatafromRequestPRJ_TC04 - Campaign Structure Upload"
inputParameter="<b>Browser ID :</b>" & "2" &"<br><b>Web Element HTML Tag : </b>"& "PRE"
strInnerText=Browser("CreationTime:=2").Page("index:=0").WebElement("html tag:=PRE").getROProperty("innertext")
beforeposstart=instr(strInnerText,"Description                         ")
posstart=instr(beforeposstart,strInnerText
'print posstart
dummylinelength= len
CampaignNumberstartpos=posstart+dummylinelength
CaptureDatafromRequestPRJ_TC04=mid(strInnerText,CampaignNumberstartpos,13)
	If CaptureDatafromRequestPRJ_TC04 <> "" Then
		status="DONE"
		message="Inner Text [ "& CaptureDatafromRequestPRJ_TC03 & " ] Captured during Runtime."
		Call ReporterFunction("e-Swift_FunctionLibrary","CaptureDatafromRequestPRJ_TC04","2",stepName,message)
	Else
		status="FAIL"
		Flag=1
		message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
		Call ReporterFunction("e-Swift_FunctionLibrary","CaptureDatafromRequestPRJ_TC04","1",stepName,message)
		blnObjectError=True
	End If
Browser("CreationTime:=2").Close
'endTime = Timer()
'ExeTime = FormatNumber(endTime - startTime,3)
'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
If  blnObjectError  Then
	Environment.Value("blnFatalError")=True
	Call Error_Recovery ("CloseAllForms")
End If
if Flag =1  Then
							CaptureDatafromRequestPRJ_TC04 = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(objText,message)
			Else
							CaptureDatafromRequestPRJ_TC04 = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
End Function

'************************************************************************************************************************************************************************************************************************************************************************************************



Public Function CaptureDatafromRequestPRJ_TC02(adiDesc)
If Not Environment.Value("blnFatalError") Then
   Set obj= Description.Create() 
obj("micclass").value="Page" 
Set childObj=Browser("CreationTime:=2").ChildObjects(obj) 
'pageTitle=childObj(0).getroproperty("title") 
'print (instr(Browser("CreationTime:=2").Page("index:=0").WebElement("html tag:=PRE").getROProperty("innertext"),"F1319-MSNCMR-14"))
'print (instrrev(Browser("CreationTime:=2").Page("index:=0").WebElement("html tag:=PRE").getROProperty("innertext"),"                                                                                       SGP test forecast create"))
posend=instrrev(Browser("CreationTime:=2").Page("index:=0").WebElement("html tag:=PRE").getROProperty("innertext"),"                                                                                       "&adiDesc)
print posend
posstart=instrrev(Browser("CreationTime:=2").Page("index:=0").WebElement("html tag:=PRE").getROProperty("innertextposend)
print posstart
CaptureDatafromRequestPRJ_TC02 = mid(Browser("CreationTime:=2").Page("index:=0").WebElement("html tag:=PRE").getROProperty("innertext"),posstart+816,posend-(posstart+816))
Browser("CreationTime:=2").Close
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
End if
End Function

'*************************************************************************************************************************************************************************************************************************************************

Public Function RefreshRequestByName_GiveRadioDevName(SpecificRequestDevName,requestName,maxTimeOut)
	If Not Environment.Value("blnFatalError") Then
		'startTime=Timer()
		stepName="Refresh a Request and Return Status"
		inputParameter="<b>Request Name :</b>" & requestName &"<br><b>Maximum Timeout : </b>"& maxTimeOut & " Second(s)"
		On Error Resume Next
		requestStatus=""

		If maxTimeOut="" Then
			maxTimeOut=700
			inputParameter="<b>Request Name :</b>" & requestName &"<br><b>Maximum Timeout : </b> 900 Second(s)"
		End If

		If requestName<>"" Then
			If OracleFormWindow("short title:=Find Requests").Exist(4)  Then
				OracleFormWindow("short title:=Find Requests").OracleRadioGroup("developer name:="&SpecificRequestDevName).Select "Specific Requests"
				OracleFormWindow("short title:=Find Requests").OracleTextField("description:=Name").Enter requestName
				OracleFormWindow("short title:=Find Requests").OracleButton("label:=Find").Click
				If OracleFormWindow("short title:=Requests").Exist(4) Then
						Do
								Wait(1)
								OracleFormWindow("short title:=Requests").OracleButton("description:=Refresh Data").Click
								iWaitCounter = iWaitCounter  + 1
								Loop Until (OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,4) = "Completed") OR (iWaitCounter >maxTimeOut)
        						requestName	= OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,2)
								requestPhase =  OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,4)
								requestStatus = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,5)
								If iWaitCounter <maxTimeOut Then
									If requestStatus="Normal" Then
												status="DONE"
												message= "[ " & requestName & " ] : Request Executed Successfully."
												outputParameter="Request Status : [ " & requestStatus &" ]"
												Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName_GiveRadioDevName","2",stepName,message)
									ElseIf requestStatus="Error" Then					  
												status="FAIL"
												Flag=1
												message= "[ " & requestName & " ] : Error occured during Execution."
												outputParameter="Request Status : [ " & requestStatus &" ]"
												Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName_GiveRadioDevName","1",stepName,message)
									Else
												status="FAIL"
												Flag=1
												message="Execution Completed with Warning"
												outputParameter="Request Status : [ " & requestStatus &" ]"
												Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName_GiveRadioDevName","1",stepName,message)
									End If			
								Else
										status="FAIL"
										Flag=1
										message="Maximum Timeout Exceeded."
										outputParameter="Request Status before Timeout : [ "& requestStatus &" ]<br>Request Phase before Timeout : [ "& requestPhase &" ]"
										Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName_GiveRadioDevName","1",stepName,message)
								End If
							Else
									status="FAIL"
									Flag=1
									message="Request Page not Found."
									blnObjectError=True
									Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName_GiveRadioDevName","1",stepName,message)
							End If
						Else
							status="FAIL"
							Flag=1
							message="Invalid Request Name."
							Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName_GiveRadioDevName","1",stepName,message)
					End If
				Else
						status="FAIL"
						Flag=1
						message="No Request Name Provided."
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName_GiveRadioDevName","1",stepName,message)
				End If

				'endTime = Timer()
				'ExeTime = FormatNumber(endTime - startTime,3)
			'	Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

				If  blnObjectError  Then
					Environment.Value("blnFatalError")=True
					Call Error_Recovery ("CloseAllForms")
				End If
                If Flag =1  Then
							RefreshRequestByName_GiveRadioDevName = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(objText,message)
			Else
							RefreshRequestByName_GiveRadioDevName = requestStatus
			End If
			If blnDefault_eSwiftReporting Then  
				Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If

				
	End If
End Function
'****************************************************************************************************************************************************************************************************************************************************
'End Function RefreshRequestByName(requestName,maxTimeOut)
'*****************************************************************************************************************************************************************************************************************************************************




Public Function saveExcel(BookName)
On Error Resume Next
Set Ws1 = CreateObject("WScript.Shell")
Ws1.SendKeys ("{ENTER}")
'Save the WebADI excel
Execute "Set InputAppExcel1 =GetObject(,""Excel.Application"")"
Set objInputWorkBook = InputAppExcel1.WorkBooks(BookName)
Set objInputSheet = objInputWorkBook.Sheets.Item("Sheet1")
InputAppExcel1.Visible=TRUE
objInputWorkBook.Save 'As "C:\Users\251603\Desktop\"&SaveAsBookName&".xlsm",52
Set objInputSheet=Nothing
set objInputWorkBook=nothing
Set InputAppExcel1=Nothing
End Function


'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ValidateWebElementTextWithIndex(browserName,webElementClass,webElementHTMLTag,webElementIndex,expectedValue)
'Author
'											:	TCS
'Date			   				  
'											:	11.10.2011
'Description					
'											:	Selecting an item from a List  in Web Forms
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												webElementClass : Class Property of the Web Element
'												webElementHTMLTag : HTML Tag of the Web Element
'												webElementIndex : Index of the Web Element
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'												expectedValue : The expected value to be matched with run time value
'Output Parameters      
'											:	strCapturedText : Captured Inner Text of the Web Element
'**********************************************************************************************************************************************************************
' Function ValidateWebElementTextWithIndex(browserName,webElementClass,webElementHTMLTag,webElementIndex,expectedValue)
'**********************************************************************************************************************************************************************
Public Function ValidateWebElementTextWithIndex(browserName,webElementhtmlid,webElementHTMLTag,webElelementIndex,expectedData)
	If Not Environment.Value("blnFatalError") Then
	'startTime=Timer()
	stepName="Validate Text in WebElement with Index"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Web Element Class : </b>"& webElementClass &"<br><b>Web Element HTML Tag : </b>" & webElementHTMLTag &"<br><b>Web Element Index : </b>" & webElelementIndex & "<br><b>Web Element InnerText : </b>" & webElemenInnerText
	On Error Resume Next
	If browserName <>"" AND webElementhtmlid <>"" AND webElementHTMLTag <>""  AND expectedData <>"" AND webElelementIndex <>"" Then
		
					Set obj= Description.Create()
					obj("micclass").value="Page"
            		Set childObj=Browser("name:="& browserName).ChildObjects(obj)
					pageTitle=childObj(0).GetROProperty("title")
				
				If  Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("html id:="& webElementhtmlid ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex).Exist(3) Then
					Set objText = Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("html id:="& webElementhtmlid ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex)
					strActual=Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("html id:="& webElementhtmlid ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex).getROProperty("innertext")
					If UCase(strActual)=UCase(expectedData) Then
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "Verifies inner text of a web element " & "[Html Id:="& webElementhtmlid & "]" 
											ImagePath=CaptureScreenshot(objText,strStepDescription)
						End if
						status="PASS"
						message="The Web Element expected value '"&expectedData&"' and matches with actual value "& strActual &" ."
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebElementTextWithIndex","2",stepName,message)					
					Else
						status="FAIL"
						Flag=1
						message="The Web Element expected value'"&expectedData&"'does not  matches with actual value "& strActual &" ."
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebElementTextWithIndex","1",stepName,message)
				End If
					Else
					status="FAIL"
					Flag=1
					message="The Web Element '"&expectedData&"'does not exist"
					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebElementTextWithIndex","1",stepName,message)
		End If
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebElementTextWithIndex","1",stepName,message)
	End If
	
	'endTime = Timer()
	'ExeTime = FormatNumber(endTime - startTime,3)

 ' Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
       End If
       If Flag =1  Then
							ValidateWebElementTextWithIndex = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
			Else
							ValidateWebElementTextWithIndex = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
End if
End Function

'**********************************************************************************************************************************************************************
' End Function ValidateWebElementTextWithIndex(browserName,webElementClass,webElementHTMLTag,webElementIndex,expectedValue)
'**********************************************************************************************************************************************************************

'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ClickImageIfExists(browserName,webTableName,webTableHTMLTag,webButtonName,statusHTMLId,expectedRequestStatus,maxTimeOut)
'Author
'											:	TCS
'Date			   				  
'											:	23.09.2011
'Description					
'											:	Refreshing a given Request until the request completes or Maximum Timeout reaches
'												( This Function is a customized function for the Request page. Need Find Request Page to be opened to operate upon.)
'Input Parameters	     
'											:	requestNumber : Request Number to Refresh
'												maxTimeOut : Maximum allowed time for a request to be waited for
'Output Parameters      
'											:	requestStatus : Status of the Request after refreshing for the given timelimit
'**********************************************************************************************************************************************************************
'Function    ClickImageIfExists(browserName,webTableName,webTableHTMLTag,webButtonName,expectedImageAlt,imageIndex,maxTimeOut)
'**********************************************************************************************************************************************************************
Public Function ClickImageIfExists(browserName,webTableName,webTableHTMLTag,webButtonName,expectedImageAlt,imageIndex,maxTimeOut)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
	'	startTime=Timer()
		stepName="Clicks image"
		inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Web Element Class : </b>"& webTableName &"<br><b>Web Element HTML Tag : </b>" & webTableHTMLTag &"<br><b>Expected Image Alt : </b>" & expectedImageAlt &"<br><b>Image index :</b>" & imageIndex

		On Error Resume Next
		Dim strCapturedText
		If browserName <>"" AND  webTableHTMLTag <>"" AND webButtonName<>"" Then
            Set obj= Description.Create()
			obj("micclass").value="Page"
            Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).GetROProperty("title")
				Do
				    	If Browser("name:="& browserName).Page("title:="& pageTitle).Image("alt:="& expectedImageAlt,"index:="& imageIndex).Exist(3) then
				    			Set objImage = Browser("name:="& browserName).Page("title:="& pageTitle).Image("alt:="& expectedImageAlt,"index:="& imageIndex)
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
												strStepDescription = "Clicks Image" & "[Image Alt:="& expectedImageAlt & "]" 
												ImagePath=CaptureScreenshot(objImage,strStepDescription)
										End if
								objImage.Click
				    			status="DONE"
								message="Process completed successfully."
								Call ReporterFunction("e-Swift_FunctionLibrary","ClickImageIfExists","2",stepName,message)
				    			Exit Do
						Else
							Browser("name:="& browserName).Page("title:="& pageTitle).WebButton("name:="& webButtonName,"index:="& imageIndex).click
							wait(3)
							Browser("name:="& browserName).Page("title:="& pageTitle).Link("name:=Show","index:="& imageIndex).click
							maxTimeOut=maxTimeOut-2
		           			wait(3)
		           	    End If
		           	Loop While (maxTimeOut<>0)
		       		If maxTimeOut = 0 Then
		       			status="FAIL"
						Flag=1
						message="Timed Out."
				 		blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickImageIfExists","1",stepName,message)
						
					End If

		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			 blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickImageIfExists","1",stepName,message)
		End If


	'	endTime = Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)

		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		If Flag =1  Then
							ClickImageIfExists = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objImage,message)
			Else
							ClickImageIfExists = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

	End If	
End Function
'**********************************************************************************************************************************************************************
'End Function ClickImageIfExists(browserName,webTableName,webTableHTMLTag,webButtonName,expectedImageAlt,imageIndex,maxTimeOut)
'**********************************************************************************************************************************************************************



'**********************************************************************************************************************************************************************
'Function    PaymentProcessRequestSelectPayment(browserName,tableName,tableHTMLTag,index,columnName,valueToSearch,checkBoxName,checkBoxStatus)
'**********************************************************************************************************************************************************************
Public Function PaymentProcessRequestSelectPayment(browserName,tableName,tableHTMLTag,index,columnName,valueToSearch,checkBoxName,checkBoxStatus)
	If Not Environment.Value("blnFatalError") Then
	'startTime=Timer()
	stepName="Select Required Check Box in payment process Request Page"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Table Name : </b>"& tableName &"<br><b>Table HTML Tag : </b>" & tableHTMLTag &"<br><b>Table Index : </b>" & index &"<br><b>Value to search : </b>" & valueToSearch &"<br><b>Check Box Name : </b>" & checkBoxName &"<br><b>Check Box Status : </b>" & checkBoxStatus
	On Error Resume Next
	If browserName <>"" AND tableName <>"" AND tableHTMLTag <>"" AND columnName <>"" AND valueToSearch <>"" AND checkBoxName <>"" AND checkBoxStatus <>"" Then
		Set obj= Description.Create()
		obj("micclass").value="Page"
        Set childObj=Browser("name:="& browserName).ChildObjects(obj)
		pageTitle=childObj(0).GetROProperty("title")
		Do
		Browser("name:="& browserName).Page("title:="& pageTitle).Link("name:=Select All","index:=0").Click
		wait(2)
		If  Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("name:="& tableName,"html tag:="& tableHTMLTag,"index:="&index).Exist(3) Then
			colNames = Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("name:="& tableName,"html tag:="& tableHTMLTag,"index:="&index).GetROProperty("column names")
			colNameArr = split (colNames,";")
			For i = 0 To Ubound(colNameArr)
				If Ucase(colNameArr(i)) = Ucase(columnName) Then
					columnNum = i+1
					Exit For
				End If
			Next
			rowCount = Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("name:="& tableName,"html tag:="& tableHTMLTag,"index:="&index).RowCount ()
			For i = 2 To rowCount
				strActual=Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("name:="& tableName,"html tag:="& tableHTMLTag,"index:="&index).GetCellData (i,columnNum)
				checkBoxName=left(checkBoxName,instrrev(checkBoxName,":"))
				checkBoxName = (checkBoxName)+cstr(i-2)
				If Ucase(strActual) = Ucase(valueToSearch) Then
					
					If Ucase(checkBoxStatus)="TRUE" or Ucase(checkBoxStatus)="ON" Then
						Set objCheckbox = Browser("name:="& browserName).Page("title:="& pageTitle).WebCheckBox("name:="& checkBoxName)
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "Select Required Check Box in payment process Request Page" 
											ImagePath=CaptureScreenshot(objCheckbox,strStepDescription)
						End if
						objCheckbox.Set checkBoxStatus
						status="DONE"
						message=checkBoxName &" checkbox is checked"
						Call ReporterFunction("e-Swift_FunctionLibrary","PaymentProcessRequestSelectPayment","2",stepName,message)
					Else
						Browser("name:="& browserName).Page("title:="& pageTitle).WebCheckBox("name:="& checkBoxName).Set checkBoxStatus
						status="DONE"
						message=checkBoxName &" checkbox is unchecked"
						Call ReporterFunction("e-Swift_FunctionLibrary","PaymentProcessRequestSelectPayment","2",stepName,message)
					End If
				End If
			Next
		Else
				Flag=1
				status="FAIL"
				message = "Table not found"
				Call ReporterFunction("e-Swift_FunctionLibrary","PaymentProcessRequestSelectPayment","1",stepName,message)
				Exit Do
		End If
		Browser("name:="& browserName).Page("title:="& pageTitle).WebButton("name:=Remove from Request","index:=0").Click
		wait(2)
		If Browser("name:=Warning").Page("title:=Warning").Exist(3) Then
			Browser("name:=Warning").Page("title:=Warning").WebButton("name:=Yes").Click
			wait(2)
		End If
		Loop while (rowcount>2)
	Else
		status="FAIL"
		Flag=1
		message="Insufficient Data Provided."
		Call ReporterFunction("e-Swift_FunctionLibrary","PaymentProcessRequestSelectPayment","1",stepName,message)
		'endTime=Timer()
	'ExeTime = FormatNumber(endTime - startTime,3) 
	'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
	End If
			If Flag =1  Then
							PaymentProcessRequestSelectPayment = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objCheckbox,message)
			Else
							PaymentProcessRequestSelectPayment = True
			End If
			If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If
			  If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
              End If

	End if
End Function
'**********************************************************************************************************************************************************************
'End Function PaymentProcessRequestSelectPayment(browserName,tableName,tableHTMLTag,index,columnName,valueToSearch,checkBoxName,checkBoxStatus)
'**********************************************************************************************************************************************************************

'*******************************************************************************************************************************************************************************

Public Function EditCPCFiles(sourceFilePath,destinationFilePath,CardNo,PONo,POExist)
If Not Environment.Value("blnFatalError") Then
  On Error Resume Next
	'startTime=Timer()
	inputParameter="<b>Source file path :</b>" & sourceFilePath & "<br><b>Destination File Path : </b>"&destinationFilePath&"<br><b>New card number : </b>"&CardNo&"<br><b>New PO number : </b>"&PONo
	stepName="Edit CPC Files PO and Non=PO"
	timeVal =  time()
	timeVal = replace(timeVal,":","")
	timeVal = trim(left(timeVal,instr(timeVal," ")))
	Set objFso = CreateObject("Scripting.FileSystemObject")
	Set objFile= objFso.OpenTextFile(sourceFilePath,1)
	Set objFile2= objFso.OpenTextFile(destinationFilePath,2,True)
	Do while objFile.AtEndofStream <> true
		defaultData = objFile.ReadLine
		If instr(defaultData,"1")=1 Then
			' card no
			defaultData = replace(defaultData,mid(defaultData,208,15),CardNo)
			'invoice no
			InvoiceNo2 = mid(defaultData,632,31)+timeVal
			defaultData = replace(defaultData,mid(defaultData,632,37),InvoiceNo2)
			'PO No
			If ucase(POExist) = ucase("Yes") OR ucase(POExist) = ucase("true") Then
				If mid(defaultData,1058,14)<>"              " Then
					defaultData = replace(defaultData,mid(defaultData,1058,14),PONo)
				End If		
			else
				defaultData = replace(defaultData,mid(defaultData,1057,14),"              ")		
			End If
		End If
		timeVal=clng(timeVal)+1
		timeVal=cstr(timeVal)
		objFile2.WriteLine(defaultData)
	Loop
	objFile.Close
	objFile2.Close
	Set objFile = Nothing
	If Err.number=0 Then
		status="DONE"
		message="File successfully edited."
		Call ReporterFunction("e-Swift_FunctionLibrary","EditCPCFiles","2",stepName,message)
	Else
		status="FAIL"
		Flag=1
		message="Unexpected error appeared. Error description : " & Err.Description
		Call ReporterFunction("e-Swift_FunctionLibrary","EditCPCFiles","1",stepName,message)
	End If
	'endTime=Timer()
	'ExeTime = FormatNumber(endTime - startTime,3) 
	'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
	If Flag =1  Then
							EditCPCFiles = message
							blnMainFailFlag = True
			Else
							EditCPCFiles = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
End if
End Function

'*******************************************************************************************************************************************************************************
Public Function EditTEVFiles(sourceFilePath,fileHeader,searchForText,replaceWithText)
If Not Environment.Value("blnFatalError") Then
	On Error Resume Next
	'startTime=Timer()
	inputParameter="<b>Source file path :</b>" & sourceFilePath &"<br><b>Invoice number : </b>"&replaceWithText
	stepName="Edit TEV Files PO and Non=PO"
'	dateVal = date()
'	dateVal = trim(replace(dateVal,"/",""))
'	timeVal =  time()
'	timeVal = replace(timeVal,":","")
'	timeVal = trim(left(timeVal,instr(timeVal," ")))
	sequenceNumber = mid(outputFileName,instrrev(outputFileName,"_")+1)
	fileName = mid(sourceFilePath,instrrev(sourceFilePath,"\")+1)
	fileName = left(fileName,instrrev(fileName,"_"))+sequenceNumber
	Set objFso = CreateObject("Scripting.FileSystemObject")
	Set objFile= objFso.OpenTextFile(sourceFilePath,1)
	Set objFile2= objFso.OpenTextFile("C:\e-Swift Oracle Framework_v2.2\Files\"&fileName&".txt",2,True)
		Do while objFile.AtEndofStream <> true
		defaultData = objFile.ReadLine
		If instr(defaultData,".txt")<>0 Then
			defaultData = replace(defaultData,mid(defaultData,1,instr(defaultData,".txt")),outputFileName&".")
		End If
		defaultData = replace(defaultData,searchForText,replaceWithText)
		objFile2.WriteLine(defaultData)
	'	print defaultData&vbcrlf
	Loop
	objFile.Close
	objFile2.Close
	Set objFile = Nothing
	If Err.number=0 Then
		status="DONE"
		message="File successfully edited."
		Call ReporterFunction("e-Swift_FunctionLibrary","EditTEVFiles","2",stepName,message)
	Else
		status="FAIL"
		Flag=1
		message="Unexpected error appeared. Error description : " & Err.Description
		Call ReporterFunction("e-Swift_FunctionLibrary","EditTEVFiles","1",stepName,message)
	End If
	'EditTEVFiles = fileName
    If Flag =1  Then
							EditTEVFiles = message
							blnMainFailFlag = True
			Else
							EditTEVFiles = fileName
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	'endTime=Timer()
	'ExeTime = FormatNumber(endTime - startTime,3) 
	'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)



End if
End Function
'*******************************************************************************************************************************************************************************


Public Function EditUSTaxFiles(sourceFilePath,destinationFilePath,searchForColumn,ReplaceWithValue)
	On Error Resume Next
	inputParameter="<b>Source file path :</b>" & sourceFilePath &"<br><b>Destination File Path : </b>"&destinationFilePath
	stepName="Edit US Tax Automation Files"
	strLineNumber=0
	NewVal = chr(34)&ReplaceWithValue&chr(34)
	Set objFso = CreateObject("Scripting.FileSystemObject")
	Set objFile= objFso.OpenTextFile(sourceFilePath,1)
	Set objFile2= objFso.OpenTextFile(destinationFilePath,2,True)
	Do while objFile.AtEndofStream <> true
		defaultData = objFile.ReadLine
		If strLineNumber=1 Then
			arr = split(defaultData,",")
			For i=0 to UBound(arr)
				If arr(i) = searchForColumn Then
					iPos = i
				End If
			Next
		ElseIf strLineNumber<>0 Then
			arr = split(defaultData,",")
			defaultData = replace(defaultData,arr(iPos),NewVal)		
		End If
		objFile2.WriteLine(defaultData)
		strLineNumber=strLineNumber+1
	loop
	If Err.number=0 Then
		status="DONE"
		message="File successfully edited."
		Call ReporterFunction("e-Swift_FunctionLibrary","EditUSTaxFiles","2",stepName,message)
	Else
		status="FAIL"
		Flag=1
		message="Unexpected error appeared. Error description : " & Err.Description
		Call ReporterFunction("e-Swift_FunctionLibrary","EditUSTaxFiles","1",stepName,message)
	End If
	objFile.Close
	objFile2.Close
	Set objFile2 = Nothing
	Set objFile = Nothing
	If Flag =1  Then
										EditUSTaxFiles = message
										blnMainFailFlag = True
										'ImagePath=CaptureScreenshot(objText,message)
				Else
										EditUSTaxFiles = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
End Function
'*******************************************************************************************************************************************************************************
Public Function RunFolderNameTax(runtimeFolderPath)
	On Error Resume Next
	inputParameter="NA"
	stepName="Create Runtime folder with unique name"
	Randomize
	runFolderName = int(1000000*rnd)
	Set objFSO = CreateObject( "Scripting.FileSystemObject" )
	Set objFolder = objFSO.CreateFolder(runtimeFolderPath&"\Run"&runFolderName)
	RunFolderNameTax = runtimeFolderPath&"\Run"&runFolderName
	
	If Err.number=0 Then
		status="DONE"
		message="Folder Created successfully."
		Call ReporterFunction("e-Swift_FunctionLibrary","RunFolderNameTax","2",stepName,message)
	Else
		status="FAIL"
		Flag=1
		message="Unexpected error appeared. Error description : " & Err.Description
		Call ReporterFunction("e-Swift_FunctionLibrary","RunFolderNameTax","1",stepName,message)
	End If
	Set objFolder = Nothing
	Set objFSO = Nothing
	If Flag =1  Then
										RunFolderNameTax = message
										blnMainFailFlag = True
										'ImagePath=CaptureScreenshot(objText,message)
				Else
										RunFolderNameTax = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
End Function
'*******************************************************************************************************************************************************************************
Public Function CopyAndZipTaxFiles(sourceFile,destPath,zipfilepath)
	On Error Resume Next
	inputParameter="<b>Source file path :</b>" & sourceFile &"<br><b>Destination File Path : </b>"&destPath&"<br><b>Zip File Path : </b>"&zipfilepath
	stepName="Edit US Tax Automation Files"
	destFile = destPath+mid(sourceFile,instrrev(sourceFile,"\"))
	Set objFSO = CreateObject( "Scripting.FileSystemObject" )
	Set objTxt = objFSO.OpenTextFile( zipfilepath, 2, True )
	objFSO.CopyFile sourceFile,destFile,True
	objTxt.Write "PK" & Chr(5) & Chr(6) & String( 18, Chr(0) )
	objTxt.Close    
	Set objTxt = Nothing    
	Set objFSO = Nothing
	Set ShellApp = CreateObject("Shell.Application") 
	Set Zip = ShellApp.NameSpace(zipfilepath) 
	Zip.CopyHere destPath
	If Err.number=0 Then
		status="DONE"
		message="File successfully copied and zip folder created"
		Call ReporterFunction("e-Swift_FunctionLibrary","CopyAndZipTaxFiles","2",stepName,message)
	Else
		status="FAIL"
		Flag=1
		message="Unexpected error appeared. Error description : " & Err.Description
		Call ReporterFunction("e-Swift_FunctionLibrary","CopyAndZipTaxFiles","1",stepName,message)
	End If
	Set ShellApp = Nothing
	Set objApp = Nothing
	If Flag =1  Then
										CopyAndZipTaxFiles = message
										blnMainFailFlag = True
										'ImagePath=CaptureScreenshot(objText,message)
				Else
										CopyAndZipTaxFiles = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
End Function
'****************************************************************************************************************************************************************

Public Function CopyFilesToFolder(sourceFile,destPath)
	On Error Resume Next
	inputParameter="<b>Source file path :</b>" & sourceFile &"<br><b>Destination File Path : </b>"&destPath
	stepName="Copy Files from one folder to another"
	destFile = destPath+mid(sourceFile,instrrev(sourceFile,"\"))
	Set objFSO = CreateObject( "Scripting.FileSystemObject" )
	objFSO.CopyFile sourceFile,destFile,True
	Set objFSO = Nothing
	If Err.number=0 Then
		status="DONE"
		message="File successfully copied"
		Call ReporterFunction("e-Swift_FunctionLibrary","CopyFilesToFolder","2",stepName,message)
	Else
		status="FAIL"
		Flag=1
		message="Unexpected error appeared. Error description : " & Err.Description
		Call ReporterFunction("e-Swift_FunctionLibrary","CopyFilesToFolder","1",stepName,message)
	End If
	If Flag =1  Then
										CopyFilesToFolder = message
										blnMainFailFlag = True
										'ImagePath=CaptureScreenshot(objText,message)
				Else
										CopyFilesToFolder = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
End Function
'********************************************************************************************************************************************************************
Public Function ZipTaxFiles(folderPath,zipfilepath)
	On Error Resume Next
	inputParameter="<b>Folder Path : </b>"&folderPath&"<br><b>Zip File Path : </b>"&zipfilepath
	stepName="Zip Tax Files"
	Set objFSO = CreateObject( "Scripting.FileSystemObject" )
	Set objTxt = objFSO.OpenTextFile( zipfilepath, 2, True )
	objTxt.Write "PK" & Chr(5) & Chr(6) & String( 18, Chr(0) )
	objTxt.Close    
	Set objTxt = Nothing    
	Set objFSO = Nothing
	Set ShellApp = CreateObject("Shell.Application") 
	Set Zip = ShellApp.NameSpace(zipfilepath) 
	Zip.CopyHere folderPath
	If Err.number=0 Then
		status="DONE"
		message="Zip file created and folder copied successfully."
		Call ReporterFunction("e-Swift_FunctionLibrary","ZipTaxFiles","2",stepName,message)
	Else
		status="FAIL"
		Flag=1
		message="Unexpected error appeared. Error description : " & Err.Description
		Call ReporterFunction("e-Swift_FunctionLibrary","ZipTaxFiles","1",stepName,message)
	End If
	Set ShellApp = Nothing
	Set objApp = Nothing
	If Flag =1  Then
										ZipTaxFiles = message
										blnMainFailFlag = True
									'	ImagePath=CaptureScreenshot(objText,message)
				Else
										ZipTaxFiles = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
End Function


'*********************************************************************************************************************************************************************
'Name of the Function
'											:	RefreshRequestStatus(requestNumber,maxTimeOut)
'Author
'											:	TCS
'Date			   				  
'											:	23.09.2011
'Description					
'											:	Refreshing a given Request until the request completes or Maximum Timeout reaches
'												( This Function is a customized function for the Request page. Need Find Request Page to be opened to operate upon.)
'Input Parameters	     
'											:	requestNumber : Request Number to Refresh
'												maxTimeOut : Maximum allowed time for a request to be waited for
'Output Parameters      
'											:	requestStatus : Status of the Request after refreshing for the given timelimit
'**********************************************************************************************************************************************************************
'Function    RefreshRequestStatus(requestNumber,maxTimeOut)
'**********************************************************************************************************************************************************************
Public Function RefreshRequestStatus(requestNumber,maxTimeOut)
	If Not Environment.Value("blnFatalError") Then
		stepName="Refresh a Request and Return Status"
		inputParameter="<b>Request Number :</b>" & requestNumber &"<br><b>Maximum Timeout : </b>"& maxTimeOut & " Second(s)"
		On Error Resume Next
		requestStatus=""

		If maxTimeOut="" Then
			maxTimeOut=700
			inputParameter="<b>Request Number :</b>" & requestNumber &"<br><b>Maximum Timeout : </b> 800 Second(s)"
		End If

		If requestNumber<>"" Then
			If OracleFormWindow("short title:=Find Requests").Exist(4)  Then
				OracleFormWindow("short title:=Find Requests").OracleRadioGroup("developer name:=JOBS_QF_WHICH_JOBS").Select "Specific Requests"
				OracleFormWindow("short title:=Find Requests").OracleTextField("description:=Request ID").Enter requestNumber
				OracleFormWindow("short title:=Find Requests").OracleButton("label:=Find").Click
				If OracleFormWindow("short title:=Requests").Exist(4) Then
						Do
								Wait(1)
								OracleFormWindow("short title:=Requests").OracleButton("description:=Refresh Data").Click
								iWaitCounter = iWaitCounter  + 1
								Loop Until (OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,4) = "Completed") OR (iWaitCounter >maxTimeOut)
        						requestName	= OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,2)
								requestPhase =  OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,4)
								requestStatus = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,5)
								If iWaitCounter <maxTimeOut Then
									If requestStatus="Normal" Then
												status="DONE"
												message= "[ " & requestName & " ] : Request Executed Successfully."
												outputParameter="Request Status : [ " & requestStatus &" ]"
												Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestStatus","2",stepName,message)
									ElseIf requestStatus="Error" Then					  
												status="FAIL"
												Flag=1
												message= "[ " & requestName & " ] : Error occured during Execution."
												outputParameter="[ " & requestName & " ] : Request Status : [ " & requestStatus &" ]"
												Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestStatus","1",stepName,message)
									Else
												status="DONE"
												message= "Execution Completed with Warning"
												outputParameter="Request Status : [ " & requestStatus &" ]"
												Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestStatus","2",stepName,message)
									End If			
								Else
										status="FAIL"
										Flag=1
										message="Maximum Timeout Exceeded."
										outputParameter="Request Status before Timeout : [ "& requestStatus &" ]<br>Request Phase before Timeout : [ "& requestPhase &" ]"
										Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestStatus","1",stepName,message)
								End If
							Else
									status="FAIL"
									Flag=1
									message="Request Page not Found."
									blnObjectError=True
									Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestStatus","1",stepName,message)
							End If
						Else
							status="FAIL"
							Flag=1
							message="Invalid Request Number."
							Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestStatus","1",stepName,message)
					End If
				Else
						status="FAIL"
						Flag=1
						message="No Request Number Provided."
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestStatus","1",stepName,message)
				End If
				set objRequest=OracleFormWindow("short title:=Requests")
				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
							ImagePath=CaptureScreenshot(objRequest,strStepDescription)
				End if
				If  blnObjectError  Then
					Environment.Value("blnFatalError")=True
					Call Error_Recovery ("CloseAllForms")
				End If
				If Flag =1  Then
										RefreshRequestStatus = message
										blnMainFailFlag = True
										'ImagePath=CaptureScreenshot(objText,message)
				Else
									RefreshRequestStatus=requestStatus
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				
	End If
End Function
'**********************************************************************************************************************************************************************
'End Function RefreshRequestStatus(requestNumber,maxTimeOut)
'**********************************************************************************************************************************************************************


'********************************************************************************************************************************************************************
Public Function CaptureAssetNumberFromMassAdditionReport()
Set obj= Description.Create() 
obj("micclass").value="Page" 
Set childObj=Browser("CreationTime:=2").ChildObjects(obj) 
capturedText=Browser("CreationTime:=2").Page("index:=0").WebElement("html tag:=PRE").getROProperty("innertext")
beforeposstart=instr(capturedText,"Comments")
posstart=beforeposstart+len("Comments--------------- --------------------------- ------- ------------- ------------ ------------------ ----------------------------------")
CaptureAssetNumberFromMassAdditionReport = mid(capturedText,posstart,instr(posstart,capturedText,"         ")-posstart)
Browser("CreationTime:=2").Close
End Function
'********************************************************************************************************************************************************************
'**********************************************************************************************************************************************************************
'Function   CaptureAccountingAccountNo(browserName,tableName,tableHTMLTag,index,columnName,accountingClass)
'**********************************************************************************************************************************************************************
Public Function CaptureAccountingAccountNo(browserName,tableName,tableHTMLTag,index,columnName,accountingClass)
	stepName=""
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Table Name : </b>"& tableName &"<br><b>Table HTML Tag : </b>" & tableHTMLTag &"<br><b>Table Index : </b>" & index &"<br><b>Value to search : </b>" & valueToSearch &"<br><b>Check Box Name : </b>" & checkBoxName &"<br><b>Check Box Status : </b>" & checkBoxStatus
	On Error Resume Next
	If browserName <>"" AND tableName <>"" AND tableHTMLTag <>"" AND columnName <>"" AND accountingClass <>"" Then
		Set obj= Description.Create()
		obj("micclass").value="Page"
        Set childObj=Browser("name:="& browserName).ChildObjects(obj)
		pageTitle=childObj(0).GetROProperty("title")
		Dim accNo()
		arrSize=-1
		Redim accNo(0)
		
		If  Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("name:="& tableName,"html tag:="& tableHTMLTag,"index:="&index).Exist(3) Then
			colNames = Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("name:="& tableName,"html tag:="& tableHTMLTag,"index:="&index).GetROProperty("column names")
			colNameArr = split (colNames,";")
			For i = 0 To Ubound(colNameArr)
				If Ucase(colNameArr(i)) = Ucase(columnName) Then
					columnNum = i+1
					Exit For
				End If
			Next
			rowCount = Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("name:="& tableName,"html tag:="& tableHTMLTag,"index:="&index).RowCount ()
			For i = 2 To rowCount
				strActual=Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("name:="& tableName,"html tag:="& tableHTMLTag,"index:="&index).GetCellData (i,columnNum)
				If Ucase(strActual) = Ucase(accountingClass) Then
					arrSize=arrSize+1
					ReDim Preserve accNo(arrSize)
					accNo(arrSize)=Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("name:="& tableName,"html tag:="& tableHTMLTag,"index:="&index).GetCellData (i,3)
				End If
			Next
		End If
		
	End If
	If Err.number=0 Then
		status="DONE"
		message="Account number(s) copied successfully of Accounting class "&accountingClass&" ."
		Call ReporterFunction("e-Swift_FunctionLibrary","CaptureAccountingAccountNo","2",stepName,message)
	Else
		status="FAIL"
		Flag=1
		message="Unexpected error appeared. Error description : " & Err.Description
		Call ReporterFunction("e-Swift_FunctionLibrary","CaptureAccountingAccountNo","1",stepName,message)
	End If
	
	If Flag =1  Then
										ReturnAccountingAccountNo = message
										blnMainFailFlag = True
										'ImagePath=CaptureScreenshot(objText,message)
				Else
										ReturnAccountingAccountNo=accNo
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
End Function


'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ClickButtonWithDevName(formShortTitle,buttonDevName,buttonIndex)
'Author
'											:	TCS
'Date			   				  
'											:	16.12.2014
'Description					
'											:	Clicking a Button in Oracle Form        
'Input Parameters	     
'											:	formShortTitle : Short Title Property of the Oracle Form
'												buttonDevName : Developer Name Property of the Button 
'                                               buttonIndex : Index of Oracle Button
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    ClickButtonWithDevName(formShortTitle,buttonDevName,buttonIndex)
'**********************************************************************************************************************************************************************
Public Function ClickButtonWithDevName(formShortTitle,buttonDevName,buttonIndex)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		strStepDescription = "Clicks the button with developer name [" & buttonDevName  & "] "
		stepName="Click Button"
		inputParameter="<b>Short Title of the Form : </b>" & formShortTitle & "<br><b>Button Developer Name : </b>" & buttonDevName

		On Error Resume Next
		Dim objButton,intSetFlag
		intSetFlag=1
	
		If formShortTitle<>"" AND buttonDevName<>"" Then
			If OracleFormWindow("short title:="& formShortTitle).OracleButton("developer name:="& buttonDevName,"index:="&buttonIndex).Exist(3) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle).OracleButton("developer name:="& buttonDevName,"index:="&buttonIndex)
				intSetFlag=0
			Else
				status="FAIL"
				Flag=1
				message="Oracle Button with Developer Name [ " & buttonDevName &" ]  does not Exist."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWithDevName","1",stepName,message)
			End If

			If intSetFlag=0 Then
				If objButton.GetROProperty("enabled") Then
					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objButton,strStepDescription)
													End if
					objButton.Click
                    blnExceptionFlag = Error_Listener ("ClickButtonWithDevName",objButton)
			        If  Not blnExceptionFlag Then
							status="DONE"
							message="Oracle Button with Developer Name [ " & buttonDevName &" ] clicked Successfully."
							Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWithDevName","2",stepName,message)
			        Else
							Flag=1
							status="FAIL"
							message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
							Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWithDevName","1",stepName,message)																	
					End If     
				Else
						status="FAIL"
						Flag=1
						message="Oracle Button with Developer Name [ " & buttonDevName &" ] is Disabled."
						blnObjectError=True
					   Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWithDevName","1",stepName,message)
				End If
			End If		
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWithDevName","1",stepName,message)
		End If
		 If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
			If Flag =1  Then
										ClickButtonWithDevName = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objButton,message)
				Else
										ClickButtonWithDevName = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
			Set objButton=Nothing
	End If
End Function
'**********************************************************************************************************************************************************************
'End Function   ClickButtonWithDevName(formShortTitle,buttonDevName,buttonIndex)
'**********************************************************************************************************************************************************************

'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ClickTableRadioButtonWeb(browserName,rowInnerText,tableClass,tableName,tableIndex,imageAlt,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex,traversethroughrecordsTableName,traversethroughrecordsTableindex)
'Author
'											:	TCS
'Date			   				  
'											:	15.12.2014
'Description					
'											:	Clicking a Image in Web based Oracle Forms
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												rowInnerText: Innertext  or text of the item to be searched for in a table
'												tableClass: Class of the parent table in which the innertext item is present
'												tableName:Name of the table
'												tableIndex: Index of the table
'												imageAlt: Alt Property of the Image
'												traversethroughrecordsLinkName: link name for navigating to next set of records in the table.
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      
'											:None
'**********************************************************************************************************************************************************************
'Function    ClickTableRadioButtonWeb(browserName,rowInnerText,tableClass,tableName,tableIndex,imageAlt,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)
'**********************************************************************************************************************************************************************
Public Function ClickTableRadioButtonWeb(browserName,rowInnerText,tableClass,tableName,tableIndex,radioGroupName,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)
	If Not Environment.Value("blnFatalError") Then 
		strStepDescription = "Clicks the radio button of Radio Group [" & radioGroupName  & "] of table [" &tableName  & "] "
		stepName="Click Radio Button"
		inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Radio Group Name : </b>"& radioGroupName
		Dim blnObjectError
		blnObjectError=False
		On Error Resume Next
		If browserName <>""  AND rowInnerText<>"" AND tableClass <>"" AND  tableName <>"" AND tableIndex<>""  AND radioGroupName<> ""Then
			Set obj= Description.Create()
			obj("micclass").value="Page"
			Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")
			If Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).Exist(3) Then
				Set objRadio = Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex)
				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objRadio,strStepDescription)
													End if
					varRowNumber= Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).GetRowWithCellText(rowInnerText)
					If  varRowNumber > 1Then
						Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName).Select varRowNumber-2'"3"'radioSelectIndex
						successFlag=0
					Else
						''print Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).GetROProperty("rows")
						If Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&traversethroughrecordsLinkName,"index:="&traversethroughrecordsLinkIndex).Exist(3) Then
							if Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&traversethroughrecordsLinkName,"index:="&traversethroughrecordsLinkIndex).GetROProperty("disabled")=0 Then
								Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&traversethroughrecordsLinkName,"index:="&traversethroughrecordsLinkIndex).click
								wait(2)
								call ClickTableRadioButtonWeb(browserName,rowInnerText,tableClass,tableName,tableIndex,radioGroupName,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)
								Exit Function
							else
								successFlag=1
							End If
						End If
					End If
			If successFlag Then
				status="FAIL"
				Flag=1
				message="Record with text: [ "& rowInnerText &" ] not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickTableRadioButtonWeb","1",stepName,message)
			else:
				status="DONE"
				message=" Radio Button corresponding to Row with value : [ "& rowInnerText &" ] clicked successfully."
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickTableRadioButtonWeb","0",stepName,message)
			End If
			Else
				status="FAIL"
				Flag=1
				message="Table [ "& tableName &" ] not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickTableRadioButtonWeb","1",stepName,message)
			End If
	Else
		status="FAIL"
		Flag=1
		message="Insufficient Data Provided."
		blnObjectError=True
		Call ReporterFunction("e-Swift_FunctionLibrary","ClickTableRadioButtonWeb","1",stepName,message)
	End If
	If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
	End If
	If Flag =1  Then
										ClickTableRadioButtonWeb = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objRadio,message)
				Else
										ClickTableRadioButtonWeb = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objRadio = nothing
	End If
End Function
'**********************************************************************************************************************************************************************
'End Function ClickTableRadioButtonWeb(browserName,rowInnerText,tableClass,tableName,tableIndex,imageAlt,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)
'**********************************************************************************************************************************************************************
'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ClickLinkWebWithHtmlid(browserName,linkHtmlid,linkIndex)
'Author
'											:	TCS
'Date			   				  
'											:	08.01.2015
'Description					
'											:	Clicking a Link in Web based Oracle Forms
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												linkHtmlid: Html id Property of the Link
'												linkIndex: Index of the Link
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    ClickLinkWebWithHtmlid(browserName,linkhtmlid,linkIndex)
'**********************************************************************************************************************************************************************
Public Function ClickLinkWebWithHtmlid(browserName,linkHtmlid,linkIndex)
    If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		stepName="Click Link"
		inputParameter="<b>Browser Name : </b>" & browserName &"<br><b>Link Html id : </b>"& linkHtmlid &"<br><b>Link Index : </b>" & linkIndex
		strStepDescription = "Clicks the link with html id [" & linkHtmlid  &"] "
		On Error Resume Next

		If browserName <>"" AND linkHtmlid <>"" AND  linkIndex <>"" Then
			Set obj= Description.Create()
			obj("micclass").value="Page"
			Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")
			Set objLink=Browser("name:="& browserName).Page("title:="& pageTitle).Link("html id:="& linkHtmlid,"index:="& linkIndex)
			'objLink.highlight
			linkName=objLink.GetROProperty("innertext")
			If  objLink.Exist(10) Then
				If objLink.GetROProperty("disabled")=0  Then
					 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objLink,strStepDescription)
													End if
					objLink.Click
					blnExceptionFlag = Error_Listener ("ClickLinkWeb",objLink)
					If  Not blnExceptionFlag Then
						status="DONE"
						message="Link [ "& linkName &" ] has been Clicked Successfully."
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWeb","2",stepName,message)
					Else
						Flag=1
						status="FAIL"
						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWeb","1",stepName,message)																	
					End If

				Else
					status="FAIL"
					Flag=1
					message="Link [ "& linkName &" ] is Disabled."
					blnObjectError=True
					Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWeb","1",stepName,message)
				End If
			Else
				status="FAIL"
				Flag=1
				message="Link [ "& linkName &" ] not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWeb","1",stepName,message)
			End If
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWeb","1",stepName,message)
		End If

		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
										ClickLinkWebWithHtmlid = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objLink,message)
				Else
										ClickLinkWebWithHtmlid = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objLink=Nothing
		Set childObj=Nothing
		Set obj=Nothing
	End If
End Function
'**********************************************************************************************************************************************************************
'End Function ClickLinkWebWithHtmlid(browserName,linkhtmlid,linkIndex)
'**********************************************************************************************************************************************************************



'*********************************************************************************************************************************************************************
'Name of the Function
'											:	CaptureTextTableWebWithReferenceColumn(browserName,rowInnerTextReference,tableClass,tableName,tableIndex,webElementColumnHtmlid,webElementHtmlTag,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)

'Author
'											:	TCS
'Date			   				  
'											:	15.01.2015
'Description					
'											:	Capture value from table with reference to another column value
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												rowInnerTextReference: Innertext  or text of the another column taken as reference
'												tableClass: Class of the parent table in which the innertext item is present
'												tableName:Name of the table
'												tableIndex: Index of the table
'												webElementColumnHtmlid: Html id of the column from which value is to be captured excluding the ":" and index
'																										eg:if Htmlid= "N69:RegistryID:0" then provide only "N69:RegistryID"
'												webElementHtmlTag: Html tag of the web element
'												traversethroughrecordsLinkName: link name for navigating to next set of records in the table.
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      
'											:strCapturedText	
'**********************************************************************************************************************************************************************
'Function  CaptureTextTableWebWithReferenceColumn(browserName,rowInnerTextReference,tableClass,tableName,tableIndex,webElementColumnHtmlid,webElementHtmlTag,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)

'**********************************************************************************************************************************************************************
Public Function CaptureTextTableWebWithReferenceColumn(browserName,rowInnerTextReference,tableClass,tableName,tableIndex,webElementColumnHtmlid,webElementHtmlTag,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)
	If Not Environment.Value("blnFatalError") Then
		stepName="Capture value from table with reference to another column"
		inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Reference Data : </b>"& rowInnerTextReference
		strStepDescription = stepName
		Dim blnObjectError
		blnObjectError=False
		On Error Resume Next
		If browserName <>""  AND rowInnerTextReference<>"" AND tableClass <>"" AND  tableName <>"" AND tableIndex<>""  AND  webElementHtmlTag<>""Then
			Set obj= Description.Create()
			obj("micclass").value="Page"
			Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")
         			If Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).Exist(3) Then
					varRowNumber= Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).GetRowWithCellText(rowInnerTextReference)
					If  varRowNumber > 1Then
						varIndex=varRowNumber-2
						webElementHtmlid=webElementColumnHtmlid&":"&varIndex
						If  Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).WebElement("html tag:="&webElementHtmlTag,"html id:="&webElementHtmlid,"index:="&varIndex).Exist(3) Then
							If  Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).WebElement("html tag:="&webElementHtmlTag,"html id:="&webElementHtmlid,"index:="&varIndex).GetROProperty("visible") Then
								Set objWebElement=Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).WebElement("html tag:="&webElementHtmlTag,"html id:="&webElementHtmlid,"index:="&varIndex)
								 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objWebElement,strStepDescription)
													End if
								strCapturedText = Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).WebElement("html tag:="&webElementHtmlTag,"html id:="&webElementHtmlid,"index:="&varIndex).GetROProperty("innertext")
                                successFlag=0
							Else
                            status="FAIL"
								Flag=1
								message="Web Element is not Visible."
								 blnObjectError=True
								Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebElement","1",stepName,message)
							End If
							Else
								status="FAIL"
								Flag=1
								message="Given WebElement Not Found"
								 blnObjectError=True
								Call ReporterFunction("e-Swift_FunctionLibrary","CaptureRequiredTextWebElement","1",stepName,message)
						End If
     							Else
								If Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&traversethroughrecordsLinkName,"index:="&traversethroughrecordsLinkIndex).Exist(3) Then
									if Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&traversethroughrecordsLinkName,"index:="&traversethroughrecordsLinkIndex).GetROProperty("disabled")=0 Then
										Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&traversethroughrecordsLinkName,"index:="&traversethroughrecordsLinkIndex).click
										wait(2)
										Call CaptureTextTableWebWithReferenceColumn(browserName,rowInnerTextReference,tableClass,tableName,tableIndex,webElementColumnHtmlid,webElementHtmlTag,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)
										Exit Function
									End If
                                  Else
										successFlag=1					
								  End If
				End If
End If
	 If successFlag Then
								status="FAIL"
								Flag=1
								message="Record with text: [ "& rowInnerTextReference &" ] not Found."
								blnObjectError=True
								Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextTableWebWithReferenceColumn","1",stepName,message)
						else:
								status="DONE"
								message="Inner Text Captured during Runtime:[ "&strCapturedText& " ]"
								Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextTableWebWithReferenceColumn","2",stepName,message)
				  End If
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebElement","1",stepName,message)
	End If

    	outputParameter=strCapturedText						'Setting Output Parameter

	 If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
		End If
			If Flag =1  Then
										CaptureTextTableWebWithReferenceColumn = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objWebElement,message)
				Else
										CaptureTextTableWebWithReferenceColumn=strCapturedText			'Returning the Value
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
	Set objWebElement=Nothing
	End If

End Function
'**********************************************************************************************************************************************************************
'End Function CaptureTextTableWebWithReferenceColumn(browserName,rowInnerTextReference,tableClass,tableName,tableIndex,webElementColumnHtmlid,webElementHtmlTag,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex)
'**********************************************************************************************************************************************************************

'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ValidateTableDataWebWithReferenceColumn(browserName,rowInnerTextReference,tableClass,tableName,tableIndex,webElementColumnHtmlid,webElementHtmlTag,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex,expectedData)

'Author
'											:	TCS
'Date			   				  
'											:	20.01.2015
'Description					
'											:	Validate data in table with reference to data in another column
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												rowInnerTextReference: Innertext  or text of the another column taken as reference
'												tableClass: Class of the parent table in which the innertext item is present
'												tableName:Name of the table
'												tableIndex: Index of the table
'												webElementColumnHtmlid: Html id of the column from which value is to be captured without the index part
'												eg if HTMLid is N19:WfStatusNoterrText:0,N19:WfStatusNoterrText:2 etc  give the webElementColumnHtmlid=N19:WfStatusNoterrText
'												webElementHtmlTag: Html tag of the web element
'												traversethroughrecordsLinkName: link name for navigating to next set of records in the table.
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      
'											:
'**********************************************************************************************************************************************************************
'Function ValidateTableDataWebWithReferenceColumn(browserName,rowInnerTextReference,tableClass,tableName,tableIndex,webElementColumnHtmlid,webElementHtmlTag,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex,expectedData)
'**********************************************************************************************************************************************************************
Public Function ValidateTableDataWebWithReferenceColumn(browserName,rowInnerTextReference,tableClass,tableName,tableIndex,webElementColumnHtmlid,webElementHtmlTag,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex,expectedData)
	If Not Environment.Value("blnFatalError") Then
		stepName="Validate data in table with reference to data in another column"
		inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Reference Data : </b>"& rowInnerTextReference
		strStepDescription = "Validate data in table with reference to data in another column"
		Dim blnObjectError
		blnObjectError=False
		On Error Resume Next
		If browserName <>""  AND rowInnerTextReference<>"" AND tableClass <>"" AND  tableName <>"" AND tableIndex<>""  AND  webElementHtmlTag<>""Then
			Set obj= Description.Create()
			obj("micclass").value="Page"
			Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")
         			If Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).Exist(3) Then
					varRowNumber= Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).GetRowWithCellText(rowInnerTextReference)
					If  varRowNumber > 1Then
						varIndex=varRowNumber-2
						webElementHtmlid=webElementColumnHtmlid&":"&varIndex
						If  Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).WebElement("html tag:="&webElementHtmlTag,"html id:="&webElementHtmlid,"index:="&varIndex).Exist(3) Then
							If  Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).WebElement("html tag:="&webElementHtmlTag,"html id:="&webElementHtmlid,"index:="&varIndex).GetROProperty("visible") Then
								Set objWebElement=Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).WebElement("html tag:="&webElementHtmlTag,"html id:="&webElementHtmlid,"index:="&varIndex)
									 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objWebElement,strStepDescription)
													End if
								strCapturedText =	Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).WebElement("html tag:="&webElementHtmlTag,"html id:="&webElementHtmlid,"index:="&varIndex).GetROProperty("innertext")
									strActual=Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("html id:="& webElementhtmlid ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex).getROProperty("innertext")
                                    If UCase(strActual)=UCase(expectedData) Then
									status="PASS"
									message="The Expected data '"&expectedData&"'  matches with Actual data '"& strActual &"' ."
									Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTableDataWebWithReferenceColumn","2",stepName,message)
'									End If
									Else
								status="FAIL"
								Flag=1
								message="The Expected data '" &expectedData& "' does not match with Actual data '" &strActual& "' ."
								 blnObjectError=True
								Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTableDataWebWithReferenceColumn","1",stepName,message)
								End If
'						
							Else
                            status="FAIL"
								Flag=1
								message="Web Element is not Visible."
								 blnObjectError=True
								Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTableDataWebWithReferenceColumn","1",stepName,message)
							End If
							End If
     							Else
						''print Browser("name:="&browserName).Page("title:="&pageTitle).WebTable("class:="&tableClass,"name:="&tableName,"index:="&tableIndex).GetROProperty("rows")
								If Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&traversethroughrecordsLinkName,"index:="&traversethroughrecordsLinkIndex).Exist(3) Then
									if Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&traversethroughrecordsLinkName,"index:="&traversethroughrecordsLinkIndex).GetROProperty("disabled")=0 Then
										Browser("name:="&browserName).Page("title:="&pageTitle).Link("name:="&traversethroughrecordsLinkName,"index:="&traversethroughrecordsLinkIndex).click
										wait(2)
										Call ValidateTableDataWebWithReferenceColumn(browserName,rowInnerTextReference,tableClass,tableName,tableIndex,webElementColumnHtmlid,webElementHtmlTag,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex,expectedData)
										Exit Function
									End If
                                  Else
										successFlag=1					
								  End If
				End If
				Else 
								status="FAIL"
				Flag=1
				message="The Webelement does not exist"
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTableDataWeb","1",stepName,message)
				End If

	 If successFlag Then
								status="FAIL"
								Flag=1
								message="Record with text: [ "& rowInnerTextReference &" ] not Found."
								blnObjectError=True
								Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTableDataWebWithReferenceColumn","1",stepName,message)
				  End If
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTableDataWebWithReferenceColumn","1",stepName,message)
	End If
		 If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
										ValidateTableDataWebWithReferenceColumn = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objWebElement,message)
				Else
										ValidateTableDataWebWithReferenceColumn = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objWebElement=nothing

	End If
'	End If	
End Function
'**********************************************************************************************************************************************************************
'End Function ValidateTableDataWebWithReferenceColumn(browserName,rowInnerTextReference,tableClass,tableName,tableIndex,webElementColumnHtmlid,webElementHtmlTag,traversethroughrecordsLinkName,traversethroughrecordsLinkIndex,expectedData)
'**********************************************************************************************************************************************************************
'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ValidateScreenWeb(browserName)
'Author
'											:	TCS
'Date			   				  
'											:	20.01.2015
'Description					
'											:	Validating a webpage
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												
'Output Parameters      
'											:	
'**********************************************************************************************************************************************************************
' Function ValidateScreenWeb(browserName)
'**********************************************************************************************************************************************************************
Public Function ValidateScreenWeb(browserName)
	stepName="Validating whether the expected web screen appears"
	inputParameter="<b>Browser Name :</b>" & browserName 
	On Error Resume Next
	If browserName <>"" Then
					Set obj= Description.Create()
					obj("micclass").value="Page"
            		Set childObj=Browser("name:="& browserName).ChildObjects(obj)
					pageTitle=childObj(0).GetROProperty("title")

				If  Browser("name:="& browserName).Page("title:="& pageTitle).Exist(3) Then
						status="PASS"
						message="Expected screen "
						Call ReporterFunction("e-Swift_FunctionLibrary","Validate Web Browser","2",stepName,message)
					
					Else
						status="FAIL"
						Flag=1
						message="Not the expected screen"
						Call ReporterFunction("e-Swift_FunctionLibrary","Validate Web Browser","1",stepName,message)
					End If
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","Validate Web Browser","1",stepName,message)
	End If
	If Flag =1  Then
										ValidateScreenWeb = message
										blnMainFailFlag = True
										'ImagePath=CaptureScreenshot(objText,message)
				Else
										ValidateScreenWeb = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
	'Set objWebElement=Nothing
End Function

'**********************************************************************************************************************************************************************
' End Function ValidateScreenWeb(browserName)
'**********************************************************************************************************************************************************************


'*********************************************************************************************************************************************************************
'Name of the Function
'											:	 ValidateWebListValueNotExist(browserName,listNameOrHtmlId,expectedValue)  
'Author
'											:	TCS
'Date			   				  
'											:	06.02.2015
'Description					
'											:	Validate an item is not present in  a List  in Web 
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												listNameOrHtmlId : Name Or Html Id Property of the WebList Field
'													(Provide which one is available. Can provide either if both are present.)
'												expectedValue : value which is to be check if exist or not. The function should Pass if the value does not exist in web list
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    ValidateWebListValueNotExist(browserName,listNameOrHtmlId,expectedValue) 
'**********************************************************************************************************************************************************************
Public Function ValidateWebListValueNotExist(browserName,listNameOrHtmlId,expectedValue) 
        If Not Environment.Value("blnFatalError") Then 
                Dim blnObjectError 
                blnObjectError=False 
                stepName="Validate Web List Value" 
                inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>List Name or Html Id : </b>"& listNameOrHtmlId &"<br><b>Expected Data : </b>" & expectedValue 
				strStepDescription = "Checks whether the Expected value [" & expectedValue  & "] is available in the Web List [" & listNameOrHtmlId  & "]"
                On Error Resume Next 
                If browserName<>"" AND listNameOrHtmlId<>"" Then 
                        Set obj= Description.Create() 
                        obj("micclass").value="Page" 
            Set childObj=Browser("name:="& browserName).ChildObjects(obj) 
                        pageTitle=childObj(0).getroproperty("title") 
            If Browser("name:="& browserName).Page("title:="& pageTitle).WebList("html id:="& listNameOrHtmlId).Exist(10) Then        'Check Field for Description 
                                Set objWebList=Browser("name:="& browserName).Page("title:="& pageTitle).WebList("html id:="& listNameOrHtmlId) 
                                intSetFlag=0 
                        ElseIf Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listNameOrHtmlId).Exist(10)  Then        'Check Field for Prompt 
                                Set objWebList=Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listNameOrHtmlId) 
                                intSetFlag=0 
                        Else 
                                status="FAIL" 
                                Flag=1 
                                message="Web List Missing/not Matching" 
                                blnObjectError=True 
                                Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebListValue","1",stepName,message) 
            End If 
                        If intSetFlag=0 Then 
                                If objWebList.GetROProperty("disabled")=0 Then 
										 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objWebList,strStepDescription)
													End if

                                        strListContent=objWebList.GetROProperty("value") 
                                        If strListContent=expectedValue Then                ' Check in List if the value exists 
											status="FAIL" 
                                                        Flag=1 
                                                        message="[ " & expectedValue & " ] is not selected." 
                                                        blnObjectError=True 
                                                        Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebListValue","1",stepName,message) 
													                                                                                                                  
                                        Else 
                                                       status="PASS" 
													  message="Expected value ["& expectedValue &"] and Actual value ["& strListContent &"] matches." 
													  Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebListValue","2",stepName,message) 
													  blnExceptionFlag = Error_Listener ("ValidateWebListValue",objWebList)      
                                        End If 
                                Else 
												status="FAIL" 
                                                Flag=1 
                                                message="[ " & listNameOrHtmlId & " ] is Disabled." 
                                                Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebListValue","1",stepName,message) 
                                End If 
                        End If 
                       
                Else 
                                status="FAIL" 
                                Flag=1 
                                message="Insufficient Data Provided." 
                                blnObjectError=True 
                                Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebListValue","1",stepName,message) 
                End If 

                 If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
                End If 
				If Flag =1  Then
										ValidateWebListValueNotExist = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objWebList,message)
				Else
										ValidateWebListValueNotExist = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				 Set objWebList=Nothing 
                        Set obj=Nothing 
                        Set childObj=Nothing 
        End If 
End Function
'**********************************************************************************************************************************************************************
'End Function  ValidateWebListValueNotExist(browserName,listNameOrHtmlId,expectedValue) 
'**********************************************************************************************************************************************************************
'********************************************************************************************************************************************************************
'Name of the Function : VerifyImageWebExist(browserName,ImageAlt,ImageIndex,statusImage)
'Author		    : TCS
'Date			    : 06/02/2015
'Description	    : Function to Check if an Image exist on page and returnTrue or False 
'Input Parameters	    : browserName = Briswer Name property 
'				ImageAlt: image alt property of the image
'				ImageIndex=index of the image
'				statusImage = Enabled/Disabled (eg:If user needs to verify the image as diabled then  statusImage=Disabled)
'Output Parameters    : True or False 
'**********************************************************************************************************************************************************************
'Function    VerifyImageWebExist(browserName,ImageAlt,ImageIndex,statusImage)
'**********************************************************************************************************************************************************************
Public Function VerifyImageWebExist(browserName,ImageAlt,ImageIndex,statusImage)
    If Not Environment.Value("blnFatalError") Then
	Dim blnObjectError
    blnObjectError=False
	stepName="Check Image exist on Page "
	inputParameter="<b>Browser Name : </b>" & browserName &"<br><b>WebImage : </b>"& ImageAlt &"<br><b>WebImage  Index : </b>" & ImageIndex 
	strStepDescription = "Verifies whether the image [" &ImageAlt  & "] exists or not"
	blnCaptureFlag = TRue 
	On Error Resume Next

	If browserName <>"" AND ImageAlt <>"" AND  ImageIndex <>"" Then
						Set objImage=Browser("name:="& browserName).Page("title:="& browserName).Image("alt:="& ImageAlt,"index:="& ImageIndex)
						 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objImage,strStepDescription)
													End if
						If  objImage.Exist(gObjectTimeoutLimit+3) Then
											'blnExceptionFlag = Error_Listener ("ClickLinkWeb",objLink)							
																			status="PASS"
																			message="Image  [ "& ImageAlt &" ] is " &statusImage
                                                                          '  CaptureFlag =  True
											else
																			status="FAIL"
																			Flag=1
																			message="Image [ "& ImageAlt &" ] not Found on page verification failed "
																			blnObjectError=True
																			'CaptureFlag =  False
											End If	
							Else
											status="FAIL"
											Flag=1
											message="Insufficient Data Provided."
											blnObjectError=True						
							End If
		If Flag =1  Then
										VerifyImageWebExist = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objImage,message)
				Else
										VerifyImageWebExist = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
	Set objImage=Nothing
	Set childObj=Nothing
	Set obj=Nothing
   	End if
End Function
'**********************************************************************************************************************************************************************
'End Function    VerifyImageWebExist(browserName,ImageAlt,ImageIndex,statusImage)
'**********************************************************************************************************************************************************************


'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ValidateTextFieldValueWeb_NotNull(browserName,textFieldName,textFieldIndex)
'Author
'											:	TCS
'Date			   				  
'											:	10.02.2015
'Description					
'											:	Validates the value of a test field in web
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												textFieldName : Name Property of Text Field
'												textFieldIndex : Index Property of Text Field
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      
'											:	
'**********************************************************************************************************************************************************************
' Function ValidateTextFieldValueWeb_NotNull(browserName,textFieldName,textFieldIndex)
'**********************************************************************************************************************************************************************
Public Function ValidateTextFieldValueWeb_NotNull(browserName,textFieldName,textFieldIndex)
	stepName="Validate TextField in Web is not Null"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Text Field Name : </b>"& textFieldName &"<br><b>Text Field Index : </b>" & textFieldIndex 
	strStepDescription = "Validates the value of the Text Field [" & textFieldName  & "] is null or not"
	On Error Resume Next
	If browserName <>"" AND textFieldName <>"" AND textFieldIndex <>"" Then
					Set obj= Description.Create()
					obj("micclass").value="Page"
            		Set childObj=Browser("name:="& browserName).ChildObjects(obj)
					pageTitle=childObj(0).GetROProperty("title")

				If  Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName ,"index:="& textFieldIndex).Exist(3) Then
					Set objText = Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName ,"index:="& textFieldIndex)
					 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objText,strStepDescription)
													End if
						  strTableFieldValue=Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName ,"index:="& textFieldIndex).GetROProperty("value") 
							If  strTableFieldValue <> "" Then
								status="PASS"
								Flag=0
								message="Field data is not empty."
								Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFieldValueWeb_NotNull","2",stepName,message)
							Else
								status="FAIL"
								Flag=1
								message="Field data is empty."
								Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFieldValueWeb_NotNull","1",stepName,message)
							End If
				
				Else
					status="FAIL"
					Flag=1
					message="The Text field object not found."
					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFieldValueWeb_NotNull","1",stepName,message)
				End If
		
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFieldValueWeb_NotNull","1",stepName,message)
	End If
	'ValidateTextWebElement=strCapturedText			'Returning the Value
	'outputParameter=strCapturedText						'Setting Output Parameter
	If Flag =1  Then
										ValidateTextFieldValueWeb_NotNull = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objText,message)
				Else
										ValidateTextFieldValueWeb_NotNull = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
	Set objText=Nothing
End Function

'**********************************************************************************************************************************************************************
' End Function ValidateTextFieldValueWeb_NotNull(browserName,textFieldName,textFieldIndex)
'**********************************************************************************************************************************************************************

'**********************************************************************************************************************************************************************
'Name of the Function : CaptureTextWebElementWithHtmlId
'Author		     					:  TCS
'Date			 				    : 12/02/2015
'Description		     :  Get the request Id  mass adjustment
'Input Parameters	     :  browserName:Name property of Browser
'										  : webElementHtmlId -The value of Html id property of webelement
'										  :webElementHTMLTag:The value of Html Tag property of webelement
'										  :	webElementIndex		:The index of webelement							   
'Output Parameters    : strCapturedText
'**********************************************************************************************************************************************************************
'Function    CaptureTextWebElementWithHtmlId(browserName,webElementHtmlId,webElementHTMLTag,webElementIndex)
'**********************************************************************************************************************************************************************
Public Function CaptureTextWebElementWithHtmlId(browserName,webElementHtmlId,webElementHTMLTag,webElementIndex)
    If Not Environment.Value("blnFatalError") Then
	Dim blnObjectError
    blnObjectError=False
	stepName="Capture Text in WebElement"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Web Element Html-Id : </b>"& webElementHtmlId &"<br><b>Web Element HTML Tag : </b>" & webElementHTMLTag &"<br><b>Web Element Index : </b>" & webElementIndex
		strStepDescription = "Captures the text of web element with html id [" & webElementHtmlId  &"] and html tag [" & webElementHTMLTag & "] "
	On Error Resume Next
	Dim strCapturedText
	If browserName <>"" AND webElementHtmlId <>"" AND webElementHTMLTag <>""  AND webElementIndex <>"" Then

					Set obj= Description.Create()
					obj("micclass").value="Page"
            		Set childObj=Browser("name:="& browserName).ChildObjects(obj)
					pageTitle=childObj(0).getroproperty("title")

				If  Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("html id:="& webElementHtmlId ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex).Exist(3) Then
						If  Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("html id:="& webElementHtmlId ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex).GetROProperty("visible") Then
								strCapturedText =	Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("html id:="& webElementHtmlId ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex).GetROProperty("innertext")
								Set objWebElement=Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("html id:="& webElementHtmlId ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex)
								 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objWebElement,strStepDescription)
													End if
												blnExceptionFlag = Error_Listener ("CaptureTextWebElementWithHtmlId",objWebElement)
                                                                                                                    
																If Not blnExceptionFlag Then
																			    status="DONE"
																				message="Inner Text Captured during Runtime."
																				Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebElementWithHtmlId","2",stepName,message)
																Else
																			   status="FAIL"
																				Flag=1
																				message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																				Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebElementWithHtmlId","1",stepName,message)
			
															    End If

						Else
								status="FAIL"
								Flag=1
								message="Web Element is not Visible."
								 blnObjectError=True
								Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebElement","1",stepName,message)
						End If
            
				Else
								status="FAIL"
								Flag=1
								message="Given WebElement Not Found"
								 blnObjectError=True
								Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebElement","1",stepName,message)
				End If
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebElement","1",stepName,message)
	End If
    	outputParameter=strCapturedText						'Setting Output Parameter

		 If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
			If Flag =1  Then
										CaptureTextWebElementWithHtmlId = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objWebElement,message)
				Else
										CaptureTextWebElementWithHtmlId=strCapturedText			'Returning the Value
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
	Set objWebElement=Nothing
	End If	
End Function
'*******************************************************************************************************************************************************************************'
'End Function CaptureTextWebElementWithHtmlId(browserName,webElementHtmlId,webElementHTMLTag,webElementIndex)
'*******************************************************************************************************************************************************************************'

'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ValidateWebMessage(browserName,webDialogText,webStaticText)
'Author
'											:	TCS
'Date			   				  
'											:	16.02.2015
'Description					
'											:	Selecting an item from a List  in Web Forms
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												webDialogText : Text property of Dialog box
'												webStaticText : Text property (message in Dialog box to be validated												
'Output Parameters      
'											:	
'**********************************************************************************************************************************************************************
' Function ValidateWebMessage(browserName,webDialogText,webStaticText)
'**********************************************************************************************************************************************************************
Public Function ValidateWebMessage(browserName,webDialogText,webStaticText)
	stepName="Validate Message in Web Messagebox"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Web Dialogbox : </b>"& webDialogText &"<br><b>Web Message Text : </b>" & webStaticText 
	On Error Resume Next
	If browserName <>"" AND webDialogText <>"" AND webStaticText <>""  Then

		If  Browser("name:="& browserName).Dialog("text:="& webDialogText).Exist(3) Then
				If  Browser("name:="& browserName).Dialog("text:="& webDialogText).Static("text:="& webStaticText).Exist(3) Then
						status="PASS"
						message="The Web Message popup '"&webStaticText&"' appears"
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebMessage","2",stepName,message)
				Else
					status="FAIL"
					Flag=1
					message="The Web Diaolog box message  '"&webStaticText&"' is the  expected messages."
					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebMessage","1",stepName,message)
				End If
			
		Else 
					status="FAIL"
					Flag=1
					message="The Web Diaolog box message '"&webDialogText&"' is not the expected message"
					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebMessage","1",stepName,message)
					End If
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebMessage","1",stepName,message)
	End If
	If Flag =1  Then
										ValidateWebMessage = message
										blnMainFailFlag = True
										'ImagePath=CaptureScreenshot(objText,message)
				Else
										ValidateWebMessage = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
  If  Browser("name:="& browserName).Dialog("text:="& webDialogText).Exist(3) Then
	  	Browser("name:="& browserName).Dialog("text:="& webDialogText).WinButton("text:=OK").Click
	End If
End Function

'**********************************************************************************************************************************************************************
' End Function ValidateWebMessage(browserName,webDialogText,webStaticText)
'**********************************************************************************************************************************************************************

Public Function ClickWebDialogboxButtonIfExist(browserName,webDialogText,winButtonText)
   strStepDescription = "Clicks the web button [" & winButtonText &"] if the Dialog Box [" & webDialogText &"] exists"
  If  Browser("name:="& browserName).Dialog("text:="& webDialogText).Exist(3) Then
	  Set objwebDailogButton = 	Browser("name:="& browserName).Dialog("text:="& webDialogText).WinButton("text:="&winButtonText)
	  If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objwebDailogButton,strStepDescription)
													End if
	  	Browser("name:="& browserName).Dialog("text:="& webDialogText).WinButton("text:="&winButtonText).Click
	End If
End Function

'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ValidateWebButtonExist(browserName,buttonName,buttonIndex,buttonStatus)
'Author
'											:	TCS
'Date			   				  
'											:	16.02.2015
'Description					
'											:	Clicking a button in Web based Oracle Forms
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												buttonName: Name Property of the WebButton
'												buttonIndex: Index of the WebButton
'												buttonStatus = YES -for validating that the  Web button exist
'												buttonStatus = NO -for validating that the  Web button does not exist
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    ValidateWebButtonExist(browserName,buttonName,buttonIndex,buttonStatus)
'**********************************************************************************************************************************************************************
Public Function ValidateWebButtonExist(browserName,buttonName,buttonIndex,buttonStatus)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		stepName="Validate Web button Exist"
		inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Button Name : </b>"& buttonName &"<br><b>Button Index : </b>" & buttonIndex
		strStepDescription = "Checks whether the web button ["  &buttonName  & "] exists or not"
		On Error Resume Next
		If browserName <>"" AND buttonName <>"" AND  buttonIndex <>"" Then
			Set obj= Description.Create()
			obj("micclass").value="Page"

			Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")
			Set objWebButton=Browser("name:="& browserName).Page("title:="& pageTitle).WebButton("name:="& buttonName,"index:=" & buttonIndex)
	Select Case buttonStatus
	Case "YES"
		stepName="Validate Web button Exist"
			If objWebButton.Exist(3) Then
						 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objWebButton,strStepDescription)
													End if
						status="PASS"
						message="Web Button [ "& buttonName &" ] exist"
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebButtonExist","2",stepName,message)
                    else
						Flag=1
						status="FAIL"
						message = "Web Button [ "& buttonName &" ] does not exist"
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebButtonExist","1",stepName,message)																	
					End If     
	Case "NO"
		stepName="Validate Web button does not  Exist"
					If objWebButton.Exist(1) Then
						Flag=1
						status="FAIL"
						message = "Web Button [ "& buttonName &" ] exist"
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebButtonExist","1",stepName,message)
                    else
						status="PASS"
						message="Web Button [ "& buttonName &" ] does not  exist"
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebButtonExist","2",stepName,message)																
					End If   
	End Select 
	Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebButtonExist","1",stepName,message)
		End If

		Set obj=nothing
		Set childObj=nothing
		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CONTINUE")
		End If
			If Flag =1  Then
										ValidateWebButtonExist = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objWebButton,message)
				Else
										ValidateWebButtonExist = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
		        Set objWebButton=Nothing
	End If
End Function
'**********************************************************************************************************************************************************************
'End Function ValidateWebButtonExist(browserName,buttonName,buttonIndex,buttonStatus)
'**********************************************************************************************************************************************************************




'*********************************************************************************************************************************************************************
'Name of the Function  :               ClickImageWebPageTitle(browserName,pageTitle,imageAlt,imageIndex)
'Author
'                                             :               TCS
'Date                                                                                                       
'                                             :               18.02.2015
'Description                                                                        
'                                             :               Clicking a Image in Web based Oracle Forms
'Input Parameters            :               browserName : Name Property of the Browser
'															pageTitle:Page title property of the page
'                                                        imageAlt: Alt Property of the Image
'                                                        imageIndex: Index of the Image
'                                                          (Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      
'                                                             :               None
'**********************************************************************************************************************************************************************
'Function    ClickImageWebPageTitle(browserName,pageTitle,imageAlt,imageIndex)
'**********************************************************************************************************************************************************************
Public Function ClickImageWebPageTitle(browserName,pageTitle,imageAlt,imageIndex)
                On Error Resume Next
                If Not Environment.Value("blnFatalError") Then
                                stepName="Click Image"
                                inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Image Alt : </b>"& imageAlt &"<br><b>Image Index : </b>" & imageIndex
                                Dim blnObjectError
                                blnObjectError=False
								strStepDescription = "Clicks the image [" & imageAlt &"] in page [" & pageTitle &"] "
								On Error Resume Next
                                If browserName <>""AND pageTitle <>"" AND imageAlt <>"" AND  imageIndex <>"" Then
'                                               Set obj= Description.Create()
'                                               obj("micclass").value="Page"
'                                               Set childObj=Browser("name:="& browserName).ChildObjects(obj)
'                                               pageTitle=childObj(0).getroproperty("title")

                                                If  Browser("name:="& browserName).Page("title:="& pageTitle).Image("alt:="& imageAlt,"index:="& imageIndex).Exist(5) Then
                                                                If Browser("name:="& browserName).Page("title:="& pageTitle).Image("alt:="& imageAlt,"index:="& imageIndex).GetROProperty("disabled")=0  Then
                                                                                Set imgObject=Browser("name:="& browserName).Page("title:="& pageTitle).Image("alt:="& imageAlt,"index:="& imageIndex)
																				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																					ImagePath=CaptureScreenshot(imgObject,strStepDescription)
																				End if
																				Browser("name:="& browserName).Page("title:="& pageTitle).Image("alt:="& imageAlt,"index:="& imageIndex).Click
                                                                                blnExceptionFlag = Error_Listener (stepName,imgObject)
                                                                                If Not blnExceptionFlag Then
                                                                                                                                                status="DONE"
                                                                                                                                                message="Image Button [ "& imageAlt &" ] has been Clicked Successfully."
                                                                                                                                                Call ReporterFunction("e-Swift_FunctionLibrary","ClickImageWeb","2",stepName,message)
                                                                                Else
                                                                                                                                                status="FAIL"
                                                                                                                                                Flag=1
                                                                                                                                                message="<br> Unexpected Error Encountered while Cliking Image</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
                                                                                                                                                Call ReporterFunction("e-Swift_FunctionLibrary","ClickImageWeb","1",stepName,message)
                                                                                End If                                                                                    
                                                                Else
                                                                                                status="FAIL"
                                                                                                Flag=1
                                                                                                message="Image Button [ "& imageAlt &" ] is Disabled."
                                                                                                blnObjectError=True
                                                                                                Call ReporterFunction("e-Swift_FunctionLibrary","ClickImageWeb","1",stepName,message)
                                                                End If
                                                ElseIf LCase(imageAlt) <> "not applicable or not required" Then
                                                                                status="FAIL"
                                                                                Flag=1
                                                                                message="Image Button [ "& imageAlt &" ] not Found."
                                                                                blnObjectError=True
                                                                                Call ReporterFunction("e-Swift_FunctionLibrary","ClickImageWeb","1",stepName,message)
                                                End If
                                Else
                                                status="FAIL"
                                                Flag=1
                                                message="Insufficient Data Provided."
                                                blnObjectError=True
                                                Call ReporterFunction("e-Swift_FunctionLibrary","ClickImageWeb","1",stepName,message)
                                End If

                                If  blnObjectError  Then
                                                Environment.Value("blnFatalError")=True
                                                Call Error_Recovery ("CloseAllForms")
                                End If
								If Flag =1  Then
										ClickImageWebPageTitle = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(imgObject,message)
				Else
										ClickImageWebPageTitle = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set imgObject = nothing
                End If
End Function
'**********************************************************************************************************************************************************************
'End Function ClickImageWebPageTitle(browserName,pageTitle,imageAlt,imageIndex)
'**********************************************************************************************************************************************************************

'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ValidateTextWebElementPageTitle(browserName,pageTitle,webElementClass,webElementHTMLTag,webElemenInnerText)
'Author
'											:	TCS
'Date			   				  
'											:	18.02.2015
'Description					
'											:	Selecting an item from a List  in Web Forms
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'											:pageTitle: page title property of the Page
'												webElementClass : Class Property of the Web Element
'												webElementHTMLTag : HTML Tag of the Web Element
'												webElementIndex : Index of the Web Element
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'												expectedValue : The expected value to be matched with run time value
'Output Parameters      
'											:	strCapturedText : Captured Inner Text of the Web Element
'**********************************************************************************************************************************************************************
' Function ValidateTextWebElementPageTitle(browserName,pageTitle,webElementClass,webElementHTMLTag,webElemenInnerText)
'**********************************************************************************************************************************************************************
Public Function ValidateTextWebElementPageTitle(browserName,pageTitle,webElementClass,webElementHTMLTag,webElemenInnerText)
	stepName="Validate Text in WebElement"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Web Element Class : </b>"& webElementClass &"<br><b>Web Element HTML Tag : </b>" & webElementHTMLTag &"<br><b>Web Element Index : </b>" & webElemenInnerText
	On Error Resume Next
	If browserName <>"" AND pageTitle<> "" AND webElementClass <>"" AND webElementHTMLTag <>""  AND webElemenInnerText <>"" Then
'					Set obj= Description.Create()
'					obj("micclass").value="Page"
'            		Set childObj=Browser("name:="& browserName).ChildObjects(obj)
'					pageTitle=childObj(0).GetROProperty("title")

				If  Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("class:="& webElementClass ,"html tag:="& webElementHTMLTag,"innertext:="&webElemenInnerText).Exist(3) Then
					Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("class:="& webElementClass ,"html tag:="& webElementHTMLTag,"innertext:="&webElemenInnerText).SetFocus
						status="PASS"
						message="The Web Element '"&webElemenInnerText&"' exists"
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextWebElement","2",stepName,message)
				Else
					status="FAIL"
					Flag=1
					message="The Web Element '"&webElemenInnerText&"'does not  exist"
					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextWebElement","1",stepName,message)
				End If
		
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextWebElement","1",stepName,message)
	End If
	'ValidateTextWebElement=strCapturedText			'Returning the Value
	'outputParameter=strCapturedText						'Setting Output Parameter
		If Flag =1  Then
										ValidateTextWebElementPageTitle = message
										blnMainFailFlag = True
									'	ImagePath=CaptureScreenshot(objText,message)
				Else
										ValidateTextWebElementPageTitle = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
	Set objWebElement=Nothing
End Function

'**********************************************************************************************************************************************************************
' End Function ValidateTextWebElementPageTitle(browserName,pageTitle,webElementClass,webElementHTMLTag,webElemenInnerText)
'**********************************************************************************************************************************************************************




'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ValidateWebListValueWithIndex(browserName,listNameOrHtmlId,weblistIndex,expectedValue) 
'Author
'											:	TCS
'Date			   				  
'											:	19.02.2015
'Description					
'											:	Validate an item from a List  in Web Forms is selected or not
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												listNameOrHtmlId : Name Or Html Id Property of the WebList Field
'													(Provide which one is available. Can provide either if both are present.)
'												weblistIndex:index of the weblist
'												valueToSelect : Value to be Selected
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    ValidateWebListValueWithIndex(browserName,listNameOrHtmlId,weblistIndex,expectedValue) 
'**********************************************************************************************************************************************************************
Public Function ValidateWebListValueWithIndex(browserName,listNameOrHtmlId,weblistIndex,expectedValue) 
        If Not Environment.Value("blnFatalError") Then 
                Dim blnObjectError 
                blnObjectError=False 
                stepName="Validate Web List Value" 
                inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>List Name or Html Id : </b>"& listNameOrHtmlId &"<br><b>Expected Data : </b>" & expectedValue 
				strStepDescription = "Validates the expected Value [" & expectedValue &" ] with the value of WebList [" & listNameOrHtmlId &"] "
                On Error Resume Next 
                If browserName<>"" AND listNameOrHtmlId<>"" AND weblistIndex <>"" Then 
                        Set obj= Description.Create() 
                        obj("micclass").value="Page" 
            Set childObj=Browser("name:="& browserName).ChildObjects(obj) 
                        pageTitle=childObj(0).getroproperty("title") 
            If Browser("name:="& browserName).Page("title:="& pageTitle).WebList("html id:="& listNameOrHtmlId,"index:="&weblistIndex).Exist(10) Then        'Check Field for Description 
                                Set objWebList=Browser("name:="& browserName).Page("title:="& pageTitle).WebList("html id:="& listNameOrHtmlId,"index:="&weblistIndex) 
                                intSetFlag=0 
                        ElseIf Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listNameOrHtmlId,"index:="&weblistIndex).Exist(10)  Then        'Check Field for Prompt 
                                Set objWebList=Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listNameOrHtmlId,"index:="&weblistIndex) 
                                intSetFlag=0 
                        Else 
                                status="FAIL" 
                                Flag=1 
                                message="Web List Missing/not Matching" 
                                blnObjectError=True 
                                Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebListValue","1",stepName,message) 
            End If 
                        If intSetFlag=0 Then 
                                If objWebList.GetROProperty("disabled")=0 Then 
									If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objWebList,strStepDescription)
													End if
                                        strListContent=objWebList.GetROProperty("value") 
                                        If strListContent=expectedValue Then                ' Check in List if the value exists 
													  status="PASS" 
													  message="Expected value ["& expectedValue &"] and Actual value ["& strListContent &"] matches." 
													  Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebListValue","2",stepName,message) 
													  blnExceptionFlag = Error_Listener ("ValidateWebListValue",objWebList)                                                                                                                      
                                        Else 
                                                        status="FAIL" 
                                                        Flag=1 
                                                        message="[ " & expectedValue & " ] is not selected." 
                                                        blnObjectError=True 
                                                        Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebListValue","1",stepName,message) 
                                        End If 
                                Else 
												status="FAIL" 
                                                Flag=1 
                                                message="[ " & listNameOrHtmlId & " ] is Disabled." 
                                                Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebListValue","1",stepName,message) 
                                End If 
                        End If 
                       
                        Set obj=Nothing 
                        Set childObj=Nothing 
                Else 
                                status="FAIL" 
                                Flag=1 
                                message="Insufficient Data Provided." 
                                blnObjectError=True 
                                Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebListValue","1",stepName,message) 
                End If 
                If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
                End If 
				If Flag =1  Then
										ValidateWebListValueWithIndex = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objWebList,message)
				Else
										ValidateWebListValueWithIndex = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				 Set objWebList=Nothing 
        End If 
End Function
'**********************************************************************************************************************************************************************
'End Function ValidateWebListValueWithIndex(browserName,listNameOrHtmlId,weblistIndex,expectedValue) 
'**********************************************************************************************************************************************************************

'*********************************************************************************************************************************************************************
'Name of the Function
'											:	SelectRadioGroupWeb(browserName,radioGroupName,optionToSelect)
'Author
'											:	TCS
'Date			   				  
'											:	19.02.2015
'Description					
'											:	Selecting an item from a List  in Web Forms
'Input Parameters	     
'											:	browserName : Name Property of the Browser
'												radioGroupName : Name Property of the WebRadioGroup Field
'												optionToSelect : Option to be Selected
'												(Pass 1,2,3 etc. to depict the specific option in the Radio Group)
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    SelectRadioGroupWeb(browserName,radioGroupName,optionToSelect)
'**********************************************************************************************************************************************************************
Public Function SelectRadioGroupWebWithIndex(browserName,radioGroupName,radioGroupIndex,optionToSelect)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		stepName="Select Radio Group"
		inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Radio Group Name : </b>"& radioGroupName &"<br><b>Option to Select : </b>" & optionToSelect
		strStepDescription = "Selects/ Deselects the radio button with Index [" & optionToSelect  & "] of radiogroup [" & radioGroupName & "] "
		On Error Resume Next
        If browserName <>"" AND radioGroupName <>"" AND optionToSelect <>"" Then
			Set obj= Description.Create()
            obj("micclass").value="Page"
            Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")
			If isnumeric(optionToSelect) Then
				indexToSelect=cStr(optionToSelect-1)
			Else 
				indexToSelect= optionToSelect
			End If   

			If  Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName,"index:="&radioGroupIndex).Exist(3) Then
				If Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName,"index:="&radioGroupIndex).GetROProperty("disabled")=0 Then
					strAvailableOptions=Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName,"index:="&radioGroupIndex).GetROProperty("all items")
								'print strAvailableOptions
					If InStr(1,strAvailableOptions,indexToSelect)<>0 Then		' Check if the option exists
						Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName,"index:="&radioGroupIndex).Select indexToSelect
                        Set radioObject=Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName,"index:="&radioGroupIndex)
						 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(radioObject,strStepDescription)
													End if
                        blnExceptionFlag = Error_Listener ("Select Radio Button",radioObject)
						If Not blnExceptionFlag Then
							If Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName,"index:="&radioGroupIndex).GetROProperty("value")=indexToSelect Then
								status="DONE"
								message="Radio Group Option [ " & optionToSelect & " ]  has been Selected Successfully."
								Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioGroupWeb","2",stepName,message)
							Else
								status="FAIL"
								Flag=1
								message="Radio Group Option [ " & optionToSelect & " ] Failed to Select."
								blnObjectError=True
								Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioGroupWeb","1",stepName,message)
							End If
						Else
							status="FAIL"
							Flag=1
    						message="<br> Unexpected Error Encountered while selecting Radio Button </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
							Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioGroupWeb","1",stepName,message)
                        End If
                    Else
						status="FAIL"
						Flag=1
						message="[ " & optionToSelect & " ] is an Invalid Selection."
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioGroupWeb","1",stepName,message)
					End If
				Else
					status="FAIL"
					Flag=1
					message="[ " & radioGroupName & " ] is Disabled."
					blnObjectError=True
					Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioGroupWeb","1",stepName,message)
				End If
			Else
				status="FAIL"
				Flag=1
				message="Web Radio Group Missing/not Matching"
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioGroupWeb","1",stepName,message)
			End If

			Set obj=Nothing
			Set childObj=Nothing
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioGroupWeb","1",stepName,message)
		End If

		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
										SelectRadioGroupWebWithIndex = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(radioObject,message)
				Else
										SelectRadioGroupWebWithIndex = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set radioObject = nothing
	End If
End Function
'**********************************************************************************************************************************************************************
'End Function SelectRadioGroupWeb(browserName,radioGroupName,optionToSelect)
'**********************************************************************************************************************************************************************




'*********************************************************************************************************************************************************************
'Name of the Function
'											:	 RefreshRequestTableByReqName(requestName,tableBlockName,maxTimeOut)
'Author
'											:	TCS
'Date			   				  
'											:	25.02.2015
'Description					
'											:	Refreshing a given Request until the request completes or Maximum Timeout reaches
'												( This Function is a customized function for the Request page. Need Find Request Page to be opened to operate upon.
'													This function can be used where the Table Block property value is other than  JOBS)
'Input Parameters	     
'											:	requestName : Request Number to Refresh
'												tableBlockName: Block Name of the table contaiing the Request Name
'												maxTimeOut : Maximum allowed time for a request to be waited for
'Output Parameters      
'											:	requestStatus : Status of the Request after refreshing for the given timelimit
'**********************************************************************************************************************************************************************
'Function     RefreshRequestTableByReqName(requestName,tableBlockName,maxTimeOut)
'**********************************************************************************************************************************************************************
Public Function RefreshRequestTableByReqName(requestName,tableBlockName,maxTimeOut)
	If Not Environment.Value("blnFatalError") Then
		stepName="Refresh a Request and Return Status"
		inputParameter="<b>Request Name :</b>" & requestName &"<br><b>Maximum Timeout : </b>"& maxTimeOut & " Second(s)"
		On Error Resume Next
		requestStatus=""

		If maxTimeOut="" Then
			maxTimeOut=700
			inputParameter="<b>Request Name :</b>" & requestName &"<br><b>Maximum Timeout : </b> 700 Second(s)"
		End If

		If requestName<>"" Then
				If OracleFormWindow("short title:=Requests").Exist(4) Then
						Do
								Wait(1)
								OracleFormWindow("short title:=Requests").OracleButton("description:=Refresh Data").Click
								iWaitCounter = iWaitCounter  + 1
								Loop Until (OracleFormWindow("short title:=Requests").OracleTable("block name:="&tableBlockName).GetFieldValue(1,4) = "Completed") OR (iWaitCounter >maxTimeOut)
        						requestName	= OracleFormWindow("short title:=Requests").OracleTable("block name:="&tableBlockName).GetFieldValue(1,2)
								requestPhase =  OracleFormWindow("short title:=Requests").OracleTable("block name:="&tableBlockName).GetFieldValue(1,4)
								requestStatus = OracleFormWindow("short title:=Requests").OracleTable("block name:="&tableBlockName).GetFieldValue(1,5)
								If iWaitCounter <maxTimeOut Then
									If requestStatus="Normal" Then 
												status="DONE"
												message= "[ " & requestName & " ] : Request Executed Successfully."
												outputParameter="Request Status : [ " & requestStatus &" ]"
												Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName","2",stepName,message)
									ElseIf requestStatus="Error" Then					  
												status="FAIL"
												Flag=1
												message= "[ " & requestName & " ] : Error occured during Execution."
												outputParameter="Request Status : [ " & requestStatus &" ]"
												Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName","1",stepName,message)
									Else
												status="DONE"
'												Flag=1
												message="Execution Completed with Warning"
												outputParameter="Request Status : [ " & requestStatus &" ]"
												Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName","1",stepName,message)
									End If			
								Else
										status="FAIL"
										Flag=1
										message="Maximum Timeout Exceeded."
										outputParameter="Request Status before Timeout : [ "& requestStatus &" ]<br>Request Phase before Timeout : [ "& requestPhase &" ]"
										Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName","1",stepName,message)
								End If
							Else
									status="FAIL"
									Flag=1
									message="Request form not Found."
									blnObjectError=True
									Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName","1",stepName,message)
							End If
				Else
						status="FAIL"
						Flag=1
						message="No Request Name Provided."
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","RefreshRequestByName","1",stepName,message)
				End If
				If  blnObjectError  Then
					Environment.Value("blnFatalError")=True
					Call Error_Recovery ("CloseAllForms")
				End If
				If Flag =1  Then
										RefreshRequestByName = message
										blnMainFailFlag = True
										'ImagePath=CaptureScreenshot(objText,message)
				Else
										RefreshRequestByName  = requestStatus
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				
	End If
End Function
'**********************************************************************************************************************************************************************
'End Function RefreshRequestByName(requestName,maxTimeOut)
'**********************************************************************************************************************************************************************


'******************************************************************************************************************************************************************************************
'Function    CaptureTableFieldValueTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,dataRowNo,dataColumnName)
'*******************************************************************************************************************************************************************************************
Function CaptureTableFieldValueTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName ,dataRowNo,dataColumnName)
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
        blnObjectError=False
	    stepName="Capture Runtime Value from Table Field in Tabbed Region"
		inputParameter = "<b>Short Title of the Form : </b>" & formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b> Block Name of the Oracle table : </b> " & tableBlockName  & "<br><b> Row Number : </b>" & dataRowNo & "<br><b>Name of the column : </b>" & dataColumnName
		strStepDescription = "Capture the Table Field of Column Name " & dataColumnName &  " with row number " & dataRowNo &" block name " & tableBlockName & " in Tabbed region " & tabbedRegionLabel
		Dim strTableFieldValue
		On Error Resume Next   
		If formShortTitle<>"" AND tabbedRegionLabel<>"" AND tabbedRegionIndex<>""  AND tableBlockName<>""  AND dataRowNo<>"" AND dataColumnName<>"" Then
			Set objOracleTable=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTable("block name:=" & tableBlockName)
			If objOracleTable.Exist(2) Then 
				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
													End if
				strTableFieldValue =objOracleTable.GetFieldValue (dataRowNo,dataColumnName)
				blnExceptionFlag = Error_Listener ("CaptureTextWebElement",objOracleTable)																														'// end
				If Not blnExceptionFlag Then
							status="DONE"
							message="[ " & dataColumnName & " ] value Captured during run time."
							Call ReporterFunction("eSwift_FunctionLibrary","CaptureTableFieldValueTabbedRegion","2",stepName,message)		
				Else
							status="FAIL"
							Flag=1
							message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
							Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTableFieldValueTabbedRegion","1",stepName,message)
                End If
			Else
						    status="FAIL"
							Flag=1
							message="Oracle Table does not Exist."
						    Call ReporterFunction("eSwift_FunctionLibrary","CaptureTableFieldValueTabbedRegion","1",stepName,message)
	      End If
		Else
					status="FAIL"
					Flag=1
					message="Insufficient Data Provided."
					Call ReporterFunction("eSwift_FunctionLibrary","CaptureTableFieldValueTabbedRegion","1",stepName,message)
		End If
		outputParameter=strTableFieldValue		  'Setting Output Parameter

		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
			If Flag =1  Then
										CaptureTableFieldValueTabbedRegion = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objOracleTable,message)
				Else
										CaptureTableFieldValueTabbedRegion = strTableFieldValue		'Returning the Value
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
		Set objOracleTable=Nothing		                  
	End If	
End Function
'*******************************************************************************************************************************************************************
'End Function -CaptureTableFileldValueTabbedRegion
'********************************************************************************************************************************************************************

'***********************************************************************************
'Name of the Function  : CaptureAllValuesFromTableColumn
'Author		    :  TCS
'Date			    :  1 Sep 2011
'Description	     : Function to copy all data from a column in Oracle Table to a dynamic Array declared beforehand
'Input Parameters	     :  formShortTitle,tableBlockName,tableColumnName
'				
'				
'Output Parameters     :array containing the table column values 
'**********************************************************************************************************************************************************************
'Function    CaptureAllValuesFromTableColumn(formShortTitle,tableBlockName,tableColumnName)
'**********************************************************************************************************************************************************************
Function CaptureAllValuesFromTableColumn(formShortTitle,tableBlockName,tableColumnName)	'ByRef aOracleTableData
	If Not Environment.Value("blnFatalError") Then
		On Error Resume Next
		Dim aTempArray(50),aCleanedArray
		Dim blnObjectError
		blnObjectError=False
		strStepDescription = "Captures all the values from table with block name " &tableBlockName &" of column " &tableColumnName
		stepName="Extract run time  values from given Column  in a Table "
		inputParameter=" Short Title of the Form:"& formShortTitle&" "& chr(13) &""& chr(13)  &" Block Name of the Oracle table: "& tableBlockName & chr(13) & "Name of the column :"& tableColumnName

		If formShortTitle<>" " and tableBlockName<>"" and tableColumnName<> ""  Then
				If OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).Exist(3) then 
					Set objTable = OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName)
					 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objTable,strStepDescription)
													End if
					Set Ws = CreateObject("WScript.Shell")
					intRow=1
					Do
							currentRowData=OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).GetFieldValue(intRow,tableColumnName)
							aTempArray(intRow-1) = currentRowData
							OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).SetFocus intRow,tableColumnName
							Ws.SendKeys "{Down}"
                            intRow=intRow+1
							nextRowdata=OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).GetFieldValue(intRow,tableColumnName)
					Loop Until (currentRowData=nextRowdata) Or (Not err.number =0)  

					Err.Number =0
                    aCleanedArray = RemoveEmptyValuesInArray(aTempArray)
					CaptureAllValuesFromTableColumn = aCleanedArray 

                    Call ReporterFunction("e-Swift_FunctionLibrary","CaptureAllValuesFromTableColumn","2","Retrieve  All Values From Column in Oracle Table  ","Done")
					status="DONE"
					message = " Values Retrieved from Table Column => [  "&chr(13) & ConvertArraytoString(aCleanedArray ) &"  ] "
				Else
					status="FAIL"
					Flag=1
					message="Table not Found"
					blnObjectError=True
					Call ReporterFunction("e-Swift_FunctionLibrary","CaptureAllValuesFromTableColumn","1","Retrieve  All Values From Column in Oracle Table  ","Done")
				End if 
                								
		Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","CaptureAllValuesFromTableColumn","1",stepName,message)
		End if 

		Set Ws = Nothing
		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
										CaptureAllValuesFromTableColumn = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objTable,message)
				Else
										CaptureAllValuesFromTableColumn = aCleanedArray
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
		Set objTable=Nothing
	End If
End Function
'***********************************************************************************************************
'End Function CaptureAllValuesFromTableColumn
'***********************************************************************************************************

'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ClickButtonTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,buttonLabelOrDescription)
'Author
'											:	TCS
'Date			   				  
'											:	23.09.2011
'Description					
'											:	Clicking a Button inside Oracle Tabbed Region
'Input Parameters	     
'											:	formShortTitle : Short Title Property of the Oracle Form Window
'												tabbedRegionLabel : Label Property of the Oracle Tabbed Region
'												tabbedRegionIndex : Index of the Oracle Tabbed Region
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'												buttonLabelOrDescription : Description / Label Property of the Oracle Button 
'													(Choose which one is available. Can choose either  in case both are present.)
'Output Parameters      
'											:     None
'**********************************************************************************************************************************************************************
'Function    ClickButtonTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,buttonLabelOrDescription)
'**********************************************************************************************************************************************************************
Function ClickButtonTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,buttonLabelOrDescription)
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
		stepName="Click Button"
		strStepDescription="Clicks the buton " &buttonLabelOrDescription & " of tabbed Region " &tabbedRegionLabel
		inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b>Label or Description of the Button  : </b>" & buttonLabelOrDescription
		Dim blnObjectError
		blnObjectError=False

		On Error Resume Next
		Dim objButton,intSetFlag
		intSetFlag=1

		If formShortTitle<>"" AND tabbedRegionLabel<>"" AND tabbedRegionIndex<>"" AND buttonLabelOrDescription<>"" Then
			If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleButton("label:="& buttonLabelOrDescription).Exist(3) Then
        		Set objButton=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleButton("label:="& buttonLabelOrDescription)
				intSetFlag=0
        	ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleButton("description:="& buttonLabelOrDescription).Exist(3) Then
        		Set objButton=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleButton("description:="& buttonLabelOrDescription)
				intSetFlag=0
        	Else
        		status="FAIL"
				Flag=1
				message="Given Button Object Not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonTabbedRegion","1",stepName,message)
        	End If	

			If intSetFlag=0 Then
				If objButton.GetROProperty("enabled") Then
					 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objButton,strStepDescription)
													End if
					objButton.Click
					blnExceptionFlag = Error_Listener (stepName,objButton)
					If Not blnExceptionFlag Then
						status="DONE"
						message="[ " & buttonLabelOrDescription &"] Button clicked Successfully."
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonTabbedRegion","2",stepName,message)
					Else
				        status="FAIL"
						Flag=1
						message="[ " & buttonLabelOrDescription &"] Button Failed to Click " & Err.Description
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonTabbedRegion","1",stepName,message)    
					End If				
				Else
					status="FAIL"
					Flag=1
					message="[ " & buttonLabelOrDescription & " ] Button is Disabled."
					blnObjectError=True
					Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonTabbedRegion","1",stepName,message)
				End If
			End If
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonTabbedRegion","1",stepName,message)
		End If
		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
			If Flag =1  Then
										ClickButtonTabbedRegion = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objButton,message)
				Else
										ClickButtonTabbedRegion = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objButton=Nothing
	End If
End Function
'*************************************************************************************************************************
'End Function ClickButtonTabbedRegion()
'*************************************************************************************************************************



'****************************************************************************************************************************************************************
'Name of the Function   :ValidateTableFieldValueTabbedRegion
'Author		     					  :TCS
'Date			 				     :27-Sep-2011
'Description		          : Validate  a value during run time from a tabbed region table
'			        
'			        
'Input Parameters	     : formShortTitle->Short Title property value of the Form,
'											tabbedRegionLabel->Label peroperty value of the tabbed region
'                                            tabbedRegionIndex->Index of the tabbed region
'											tableBlockName->Block Name property value of the Oracle table
'											dataRowNo->Row Number
'										    dataColumnName->Name of the column                                     
'Output Parameters        :None

'**********************************************************************************************************************************************************************
'Function    ValidateTableFieldValueTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,dataRowNo,dataColumnName,ExpectedData)
'**********************************************************************************************************************************************************************
Function ValidateTableFieldValueTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,dataRowNo,dataColumnName,ExpectedData)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		stepName="Validate  Runtime Value from Table Field in Tabbed Region"
		inputParameter = "<b>Short Title of the Form : </b>" & formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b> Block Name of the Oracle table : </b> " & tableBlockName  & "<br><b> Row Number : </b>" & dataRowNo & "<br><b>Name of the column : </b>" & dataColumnName & "<br><b>Expected Data : </b>" & ExpectedData
		strStepDescription = "Validate  Runtime Value from Table Field wih expected data " & ExpectedData &" of block name "&tableBlockName&" row number " &dataRowNo &" with column name "&dataColumnName& " in Tabbed Region " &tabbedRegionLabel
		Dim strTableFieldValue
		On Error Resume Next   
		If formShortTitle<>"" AND tabbedRegionLabel<>"" AND tabbedRegionIndex<>""  AND tableBlockName<>""  AND dataRowNo<>"" AND dataColumnName<>"" Then
			Set objOracleTable=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTable("block name:=" & tableBlockName)
			If objOracleTable.Exist(2) Then 
		If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
													End if
                strTableFieldValue =objOracleTable.GetFieldValue (dataRowNo,dataColumnName)
                blnExceptionFlag = Error_Listener ("CaptureTextWebElement",objOracleTable)																														'// end
                If Not blnExceptionFlag Then
					If  strTableFieldValue = ExpectedData Then
						status="PASS"
						message="Field data is same as expected data which is: " & strTableFieldValue
						Call ReporterFunction("eSwift_FunctionLibrary","ValidateTableFieldValueTabbedRegion","2",stepName,message)		
					Else
						status="FAIL"
						Flag=1
						message="Field data is different from the expected data. Field data: " & strTableFieldValue & "Expected data: " & ExpectedData
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTableFieldValueTabbedRegion","1",stepName,message)
					End If
				Else
					status="FAIL"
					Flag=1
					message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTableFieldValueTabbedRegion","1",stepName,message)
                End If
            Else
				status="FAIL"
				Flag=1
				message="Oracle Table does not Exist."
				Call ReporterFunction("eSwift_FunctionLibrary","ValidateTableFieldValueTabbedRegion","1",stepName,message)
			End If
        Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			Call ReporterFunction("eSwift_FunctionLibrary","ValidateTableFieldValueTabbedRegion","1",stepName,message)
		End If
		  
			'ValidateTableFieldValueTabbedRegion=strTableFieldValue		'Returning the Value
			'outputParameter=strTableFieldValue		  'Setting Output Parameter
		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
										ValidateTableFieldValueTabbedRegion = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objOracleTable,message)
				Else
										ValidateTableFieldValueTabbedRegion = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
Set objOracleTable=Nothing		 
	End If	
End Function
'**********************************************************************************************************************************************************************
'End Function    ValidateTableFieldValueTabbedRegion
'**********************************************************************************************************************************************************************

'****************************************************************************************************************************************************************
'Name of the Function   :ValidateTableFieldValueTabbedRegion_NotNull
'Author		     					  :TCS
'Date			 				     :27-Sep-2011
'Description		          : Validate  a value during run time from a tabbed region table is not null
'			        
'			        
'Input Parameters	     : formShortTitle->Short Title property value of the Form,
'											tabbedRegionLabel->Label peroperty value of the tabbed region
'                                            tabbedRegionIndex->Index of the tabbed region
'											tableBlockName->Block Name property value of the Oracle table
'											dataRowNo->Row Number
'										    dataColumnName->Name of the column                                     
'Output Parameters        :None

'**********************************************************************************************************************************************************************
'Function    ValidateTableFieldValueTabbedRegion_NotNull(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,dataRowNo,dataColumnName)
'**********************************************************************************************************************************************************************
Function ValidateTableFieldValueTabbedRegion_NotNull(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,dataRowNo,dataColumnName)
 ' If Not Environment.Value("blnFatalError") Then
	Dim blnObjectError
   'blnObjectError=False
	stepName="Validate Value in Table Field in Tabbed Region is Not Null"
	inputParameter = "<b>Short Title of the Form : </b>" & formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b> Block Name of the Oracle table : </b> " & tableBlockName  & "<br><b> Row Number : </b>" & dataRowNo & "<br><b>Name of the column : </b>" & dataColumnName
	strStepDescription = "Verifies the value of table block name " & tableBlockName &" of row number " &dataRowNo &" of column name " &dataColumnName & " in Tabbed region " & tabbedRegionLabel
	Dim strTableFieldValue
	On Error Resume Next   
    If formShortTitle<>"" AND tabbedRegionLabel<>"" AND tabbedRegionIndex<>""  AND tableBlockName<>""  AND dataRowNo<>"" AND dataColumnName<>"" Then
		Set objOracleTable=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTable("block name:=" & tableBlockName)
	    If objOracleTable.Exist(2) Then 
			 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
													End if
            strTableFieldValue =objOracleTable.GetFieldValue (dataRowNo,dataColumnName)
                            
'								blnExceptionFlag = Error_Listener ("CaptureTextWebElement",objOracleTable)																														'// end

																'If Not blnExceptionFlag Then
			If  strTableFieldValue IS NOT NULL Then
				status="PASS"
				message="Field data is not empty"
				Call ReporterFunction("eSwift_FunctionLibrary","ValidateTableFieldValueTabbedRegion_NotNull","2",stepName,message)		
			Else
				status="FAIL"
				Flag=1
				message="Field data is empty "
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTableFieldValueTabbedRegion_NotNull","1",stepName,message)
			End If
'																Else
'																			   status="FAIL"
'																				Flag=1
'																				message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
'																				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTableFieldValueTabbedRegion_NotNull","1",stepName,message)
'			
'															    End If

		Else
			status="FAIL"
			Flag=1
			message="Oracle Table does not Exist."
			Call ReporterFunction("eSwift_FunctionLibrary","ValidateTableFieldValueTabbedRegion_NotNull","1",stepName,message)
		End If

	Else
		status="FAIL"
		Flag=1
		message="Insufficient Data Provided."
		Call ReporterFunction("eSwift_FunctionLibrary","ValidateTableFieldValueTabbedRegion_NotNull","1",stepName,message)
	End If
		  
			'ValidateTableFieldValueTabbedRegion_NotNull =strTableFieldValue		'Returning the Value
			'outputParameter=strTableFieldValue		  'Setting Output Parameter
		If Flag =1  Then
										ValidateTableFieldValueTabbedRegion_NotNull = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objOracleTable,message)
				Else
										ValidateTableFieldValueTabbedRegion_NotNull = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
	Set objOracleTable=Nothing		                  
	' If  blnObjectError  Then
	'Environment.Value("blnFatalError")=True
	'Call Error_Recovery ("CloseAllForms")
'End If

'End If	
End Function

'*********************************************************************************************************************************************************************

'**********************************************************************************
'Name of the Function	 ->GetDataFromSelectionTable
'Author			->TCS
'Date			 ->27 /09/2011
'Description		  ->Fetches the data from the WebElement from the selection Table 
'Input Parameters		 ->browserName--> Name of the browser ; 
				'dataRowNumber-> Row number of the data to be fetched  ; 
					'dataColumnNumber--> Column Number of the data to be fetched
'												
'Output Parameters		  ->Fetched value as webElementData
'**********************************************************************************************************************************************************************
'Function    GetDataFromSelectionTable(browserName,dataRowNumber,dataColumnNumber)
'**********************************************************************************************************************************************************************
Function GetDataFromSelectionTable(browserName,dataRowNumber,dataColumnNumber)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
        blnObjectError=False
		stepName="Capture value from webElement"
		inputParameter="Browser Name [ " & browserName  & " ]  <br> Row Number  [ " & dataRowNumber  & " <br> Column Name [ " & dataColumnNumber & " ]"
		strStepDescription = "Retrieves the data from web table row number  "&dataRowNumber &" Column number" &dataColumnNumber
		On error resume next
		If browserName<>"" and dataRowNumber<>"" and dataColumnNumber<>""  Then
			Set objWebTable=Browser("name:="&browserName).WebTable("class:=x1h")
			If objWebTable.exist Then	
				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objWebTable,strStepDescription)
													End if
				webElementData=objWebTable.GetCellData(dataRowNumber,dataColumnNumber)
				blnExceptionFlag = Error_Listener ("GetDataFromSelectionTable",objWebTable)
                If Not blnExceptionFlag Then
					status="DONE"
					message="Captured value : [ "& webElementData & " ]"
                    Call ReporterFunction("e-Swift_FunctionLibrary","GetDataFromSelectionTable","2",stepName,message)
				Else			          	
					status="FAIL"
					Flag=1
					message="<br> Unexpected Error Encountered while fetching the Run Time Data </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
					Call ReporterFunction("e-Swift_FunctionLibrary","GetDataFromSelectionTable","1",stepName,message)
                End If
			Else				
				status="FAIL"
				Flag=1
				message="Given WebElement object  Not Found"	
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","GetDataFromSelectionTable","1",stepName,message)
			End If
		Else
			status="FAIL"
			Flag=1
			message="One or more missing parameters"	
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","GetDataFromSelectionTable","1",stepName,message)
		End If
       
		outputParameter=webElementData						'Setting Output Parameter
        		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
										GetDataFromSelectionTable = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objWebTable,message)
				Else
										 GetDataFromSelectionTable=webElementData			'Returning the Value
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objWebTable=Nothing
	End If
End Function
'**********************************************************************************
'End Function  -> GetDataFromSelectionTable
'**********************************************************************************


'*********************************************************************************************************************************************************************
'Name of the Function
'											:	FileName2URL (ByVal fileName)
'Author
'											:	TCS
'Date			   				  
'											:	27.09.2011
'Description					
'											:	Converts a given file name to URL
'Input Parameters	     
'											:	fileName : Short Title Property of the Oracle Form
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function    FileName2URL (ByVal fileName)
'**********************************************************************************************************************************************************************
Function FileName2URL (ByVal fileName)
		On Error Resume Next
		temp= replace (fileName,"\","/") 
		FileName2URL = "file:///"&temp
End Function
'**********************************************************************************************************************************************************************
'End Function    FileName2URL (ByVal fileName)
'**********************************************************************************************************************************************************************



'***********************************************************************************
'Name of the Function  : ValidateTextFieldValue_FullStringMatch
'Author		    :  TCS
'Date			    :   1 Sep 2011
'Description	     :  Validation function for matching expected Full String data with runtime data in Oracle Text Field 
'Input Parameters	     :  formShortTitle,textFieldPromptOrDescription,ExpectedData,
				'CaseSensitive: 'True' or 'False' Value for case sensitive search. Default is False
'				
'Output Parameters     :  TRUE or FALSE
'**********************************************************************************************************************************************************************
'Function    ValidateTextFieldValue_FullStringMatch(formShortTitle,textFieldPromptOrDescription,ExpectedData,CaseSensitive)
'**********************************************************************************************************************************************************************
Function ValidateTextFieldValue_FullStringMatch(formShortTitle,textFieldPromptOrDescription,textFieldIndex,ExpectedData,CaseSensitive)
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		stepName="Validating  Expected Value in Text Field : Full String  Match "
		strStepDescription = "Verifies whether the Expected Data "&ExpectedData & " is in text field " &  textFieldPromptOrDescription
		inputParameter="Short Title of the Form:"& formShortTitle&""& chr(13) &"  Name of the Oracle TextField: "& textFieldPromptOrDescription 
        If OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription,"index:="&textFieldIndex).Exist(3) Then
			Set objText = OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription,"index:="&textFieldIndex)
			 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objText,strStepDescription)
													End if
			sActualValue = objText.GetROProperty("value")
			If CaseSensitive  Or Ucase(CaseSensitive  = "TRUE" ) Then
				If  sActualValue  = ExpectedData  Then
					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFieldValue_FullStringMatch","2","TextField ",ExpectedData &  ": has been successfully Validated in the "& textFieldPromptOrDescription &"Text  field")
					status="PASS"
					message="Expected Data :  [ "&  ExpectedData  & " ] : Matches with Actual  Value : [ " & sActualValue & " ] "
					'ValidateTextFieldValue_FullStringMatch = TRUE
                    blnCaptureFlag =  True
                Else
					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFieldValue_FullStringMatch","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
					status="FAIL"
					Flag=1
					message= " Expected Data  : [ " & ExpectedData  &" ] NOT  Matching with  Actual Value : [ " & sActualValue &" ] "
					'ValidateTextFieldValue_FullStringMatch = FALSE
				End If
            Else
                If  Ucase(sActualValue)  = Ucase(ExpectedData)  Then
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFieldValue_FullStringMatch","2","TextField ",ExpectedData &  ": has been successfully Validated in the Text  field")
						status="PASS"
						message="Expected Value:  [ "&  ExpectedData  & " ] :Matches  with Actual  Value : [ " &textFieldPromptOrDescription & " ] "
						'ValidateTextFieldValue_FullStringMatch = TRUE
                Else
					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFieldValue_FullStringMatch","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
					status="FAIL"
					Flag=1
					message= " Expected Value  :[ " & ExpectedData  &" ] NOT  Matching with  Actual Value : [ " & sActualValue &" ] "
					'ValidateTextFieldValue_FullStringMatch = FALSE
				End If
            End If
		Else
            Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFieldValue_FullStringMatch","1","TextField ", " Text  Field  Not Found")
			status="FAIL"
			Flag=1
			message="Given  Text Field object Not Found"
         '   ValidateTextFieldValue_FullStringMatch = FALSE
		End if 
		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
										ValidateTextFieldValue_FullStringMatch = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objText,message)
				Else
										ValidateTextFieldValue_FullStringMatch = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objText = nothing
	End If 
End Function
'*****************************************************'*****************************************************'*****************************************************
'End Function  ValidateTextFieldValue_FullStringMatch
'***********************************************************************************'***********************************************************************************




''********************************************************************************
'Name of the Function   : SelectNextTab
'Author		     					  :TCS
'Date			 				     :28-12-2010
'Description		          : Selecting the next Tab
'			        
'			        
'Input Parameters	     :  formWindowShortTitle                                 
'Output Parameters    :		None
'**********************************************************************************************************************************************************************
'Function    SelectNextTab(formWindowShortTitle)
'**********************************************************************************************************************************************************************
Function SelectNextTab(formWindowShortTitle)
			On Error Resume Next
			Set Ws = CreateObject("WScript.Shell")
			OracleFormWindow("short title:="&formWindowShortTitle).click    
			Ws.SendKeys "{F2}" 
			Ws.SendKeys "{DOWN}"
			Ws.SendKeys "{ENTER}"
			Set Ws=nothing
End Function
'********************************************************************************************
'End Function -SelectNextTab
'********************************************************************************************



'***********************************************************************************
'Name of the Function  : ConvertArrayToString
'Author		    :  TCS
'Date			    :   1 Sep 2011
'Description	     :Function to convert an array to string 
'Input Parameters	     :  arrSourceArray  = Array Variable 
'Output Parameters     :  String
'**********************************************************************************************************************************************************************
'Function    ConvertArrayToString(arrSourceArray)
'**********************************************************************************************************************************************************************
Public Function ConvertArrayToString(arrSourceArray)
			Dim strTempString
			On error Resume Next
			strTempString  = ""
			If isArray(arrSourceArray) Then
					For  i=Ubound(arrSourceArray) to 0   	Step -1
								strTempString = arrSourceArray(i)	& " " & strTempString  
					Next 
					
			End If
			ConvertArrayToString = strTempString 
End Function
'**********************************************************************************************************************************************************************
'End Function    ConvertArrayToString()
'**********************************************************************************************************************************************************************



'*******************************************************************************************************************************************************************************************
'Name of the Function   : CaptureTextFlexField
'Author		     					  :TCS
'Date			 				     :02 August 2012
'Description		          : Capturing a text to the text field in case of  OracleFlexWindow
'			        
'			        
'Input Parameters	     : flexWindowTitle->short title property value of oracle form window, textFieldPromtOrDescription->Prompt  or description property value of the text field,textFieldIndex->index of the testFiled
'Output Parameters        :	None
'**********************************************************************************************************************************************************************
'Function    CaptureTextFlexField( flexWindowTitle,textFieldPromtOrDescription,textFieldIndex)
'**********************************************************************************************************************************************************************
Function CaptureTextFlexField( flexWindowTitle,textFieldPromtOrDescription,textFieldIndex)
	If Not Environment.Value("blnFatalError") Then
	      Dim blnObjectError
          blnObjectError=False
         stepName="Capture Text FlexField"
         inputParameter="<b>Title of the flex window : </b>" & flexWindowTitle & "<br><b> Prompt Or Description of the TextField :</b> " & textFieldPromtOrDescription  & "<br><b> Index of the TextField : </b>" & textFieldIndex
        strStepDescription = "Capture the value of the text field " & textFieldPromtOrDescription
          On error resume next
                      If flexWindowTitle<>"" AND textFieldPromtOrDescription <>"" AND textFieldIndex<>"" Then
                            If  OracleFlexWindow("title:=" & flexWindowTitle).OracleTextField("prompt:=" & textFieldPromtOrDescription ,"index:="& textFieldIndex).Exist(3) Then
                                   Set objTextFieldPromtOrDescription=OracleFlexWindow("title:=" & flexWindowTitle).OracleTextField("prompt:=" & textFieldPromtOrDescription ,"index:="& textFieldIndex)
			                ElseIf  OracleFlexWindow("title:=" & flexWindowTitle).OracleTextField("description:=" & textFieldPromtOrDescription ,"index:="& textFieldIndex).Exist(3)  Then
			                      Set objTextFieldPromtOrDescription= OracleFlexWindow("title:=" & flexWindowTitle).OracleTextField("description:=" & textFieldPromtOrDescription ,"index:="& textFieldIndex)
			               Else
								 status="FAIL"
								 Flag=1
								 message="Text Field object Not Found"
								 blnObjectError=True
								 Call ReporterFunction("eSwift_FunctionLibrary","CaptureTextFlexField","1",stepName,message)
			                End If
                                    If objTextFieldPromtOrDescription.Exist(3)  Then
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objTextFieldPromtOrDescription,strStepDescription)
													End if
                                                             capturedValue = objTextFieldPromtOrDescription.GetROProperty("Value")
															 blnExceptionFlag = Error_Listener ("CaptureTextFlexField",objTextFieldPromtOrDescription)
															   
                            				                                     If  Not blnExceptionFlag  Then
																									  status="DONE"
																									  message="[ " & capturedValue & " ] captured from the Text field"
																									  Call ReporterFunction("eSwift_FunctionLibrary","CaptureTextFlexField","2",stepName,message)
																				else
																									  status="FAIL"
																									  Flag=1
																									  message="<br> Unexpected Error Encountered After Capturing Text   </br > <b>  ERROR   :=   [  "  & strFatalMessage &" ] "
																									  Call ReporterFunction("eSwift_FunctionLibrary","CaptureTextFlexField","1",stepName,message)
			
								                                                   End If														     
                            
                                    End If
                             
                     Else
						Flag=1
						status="FAIL"
						message="Input Parameter Missing"
						blnObjectError=True
						Call ReporterFunction("eSwift_FunctionLibrary","CaptureTextFlexField","1",stepName,message)
                     End If
		   outputParameter = capturedValue
			If  blnObjectError  Then
					Environment.Value("blnFatalError")=True
					Call Error_Recovery ("CloseAllForms")
			End If
				If Flag =1  Then
										CaptureTextFlexField = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objTextFieldPromtOrDescription,message)
				Else
										CaptureTextFlexField = capturedValue
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objTextFieldPromtOrDescription = Nothing
	End If
End Function
'*******************************************************************************************************************************************************************************************
'End Function - CaptureTextFlexField
'*************************************************************************************************************************************************************************************************

'****************************************************************************************************************************************************************
'Name of the Function   :
'														CaptureTableFieldValueTabbedRegionForSpecificValue
'Author		     					  :
'														TCS
'Date			 				     :
'														31-July-2012
'Description		          : 
'														Capturing  a value from one column in a tabbed region table during run time matching a specific value in some other column
'			        
'			        
'Input Parameters	     : 
'														formShortTitle : Short Title property value of the Form,
'														tabbedRegionLabel : Label peroperty value of the tabbed region
'                                            							tabbedRegionIndex : Index of the tabbed region
'														tableBlockName : Block Name property value of the Oracle table
'														dataColumnNameToMatch : Name of the column to match         
'										    				dataColumnNameToCapture : Name of the column to capture
'														dataToMatch : Data to match with         
                           
'Output Parameters        :			strTableFieldValue->assign run time captured value from a tabbed region table

'**********************************************************************************************************************************************************************
'Function    CaptureTableFieldValueTabbedRegionForSpecificValue(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,dataColumnNameToMatch,dataColumnNameToCapture,dataToMatch)
'**********************************************************************************************************************************************************************
Function CaptureTableFieldValueTabbedRegionForSpecificValue(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,dataColumnNameToMatch,dataColumnNameToCapture,dataToMatch)
	If Not Environment.Value("blnFatalError") Then
    	Dim blnObjectError
		blnObjectError=False
		setMatchFlag=0
		stepName="CaptureTableFieldValueTabbedRegionForSpecificValue"
		strStepDescription = "CaptureTableFieldValueTabbedRegionForSpecificValue"
		inputParameter = "<b>Short Title of the Form : </b>" & formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b> Block Name of the Oracle table : </b> " & tableBlockName  & "<br><b> Name of the Column to Match : </b>" & dataColumnNameToMatch & "<br><b>Name of the Column to Capture : </b>" & dataColumnNameToCapture
		Dim strTableFieldValue

		On Error Resume Next   

		If formShortTitle<>"" AND tabbedRegionLabel<>"" AND tabbedRegionIndex<>""  AND tableBlockName<>""  AND dataColumnNameToMatch<>"" AND dataColumnNameToCapture<>"" AND dataToMatch<>"" Then
				Set objOracleTable=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTable("block name:=" & tableBlockName)
						dataRowNo =1
						If objOracleTable.Exist(2) Then
								 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
													End if

										Do Until(Len(objOracleTable.GetFieldValue (dataRowNo,dataColumnNameToMatch))=0 Or InStr(1,OracleStatusLine("index:=0").GetROProperty("message"),"You cannot create records here")<>0) 

													If objOracleTable.GetFieldValue (dataRowNo,dataColumnNameToMatch)=dataToMatch Then
															strTableFieldValue = objOracleTable.GetFieldValue (dataRowNo,dataColumnNameToCapture)
															setMatchFlag=1
															Exit Do
													End If
													If OracleStatusLine("index:=0").GetROProperty("message")<>"" Then
                                                            If InStr(1,OracleStatusLine("index:=0").GetROProperty("message"),"Record must be entered or deleted first")<>0 Then
																		OracleFormWindow("short title:=" & formShortTitle).SelectMenu "Edit->Clear->Record"
															End If
													End If
													dataRowNo=dataRowNo+1

													Set Ws = CreateObject("WScript.Shell")
													Ws.SendKeys "{Down}"
													Set Ws = Nothing
										Loop
										
										blnExceptionFlag = Error_Listener ("CaptureTableFieldValueTabbedRegionForSpecificValue",objOracleTable)																														'// end
			
																			If Not blnExceptionFlag Then
                                                                                    If setMatchFlag = 0 Then
																                              status="FAIL"
																							  Flag=1
																							  blnObjectError=True
																                              message="[ " & dataToMatch & " ]  Not Exist in the List"
																							  Call ReporterFunction(strLibraryFileName,"CaptureTableFieldValueTabbedRegionForSpecificValue","1",stepName,message)
														                            Else
																							status="DONE"
																							message="[ " & strTableFieldValue & " ] value Captured during run time."
																							Call ReporterFunction("eSwift_FunctionLibrary","CaptureTableFieldValueTabbedRegionForSpecificValue","2",stepName,message)
																					End If
																			Else
																						   status="FAIL"
																							Flag=1
																							message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																							Call ReporterFunction(strLibraryFileName,"CaptureTableFieldValueTabbedRegionForSpecificValue","1",stepName,message)
						
																			End If
			
						Else
											status="FAIL"
											Flag=1
											message="Oracle Table does not Exist."
											blnObjectError=True
											Call ReporterFunction("eSwift_FunctionLibrary","CaptureTableFieldValueTabbedRegionForSpecificValue","1",stepName,message)
						End If

		Else
				status="FAIL"
				Flag=1
				blnObjectError=True
				message="Insufficient Data Provided."
				Call ReporterFunction("eSwift_FunctionLibrary","CaptureTableFieldValueTabbedRegionForSpecificValue","1",stepName,message)
		End If
		  
			CaptureTableFieldValueTabbedRegionForSpecificValue=strTableFieldValue		'Returning the Value
			outputParameter=strTableFieldValue		  'Setting Output Parameter
			                
	 If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
	End If
		If Flag =1  Then
										CaptureTableFieldValueTabbedRegionForSpecificValue = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objOracleTable,message)
				Else
										CaptureTableFieldValueTabbedRegionForSpecificValue = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objOracleTable=Nothing		  
End If	
End Function
'*******************************************************************************************************************************************************************
'End Function -CaptureTableFieldValueTabbedRegionForSpecificValue
'********************************************************************************************************************************************************************

'****************************************************************************************************************************************************************
'Name of the Function   :
'														CaptureTextTableFieldForSpecificValue
'Author		     					  :
'														TCS
'Date			 				     :
'														31-July-2012
'Description		          : 
'														Capturing  a value from one column in a table during run time matching a specific value in some other column
'			        
'			        
'Input Parameters	     : 
'														formShortTitle : Short Title property value of the Form,
'														tableBlockName : Block Name property value of the Oracle table
'														dataColumnNameToMatch : Name of the column to match         
'										    			dataColumnNameToCapture : Name of the column to capture
'														dataToMatch : Data to match with         
                           
'Output Parameters        :			strTableFieldValue->assign run time captured value from a tabbed region table
'**********************************************************************************************************************************************************************
'Function    CaptureTextTableFieldForSpecificValue(formShortTitle,tableBlockName,dataColumnNameToMatch,dataColumnNameToCapture,dataToMatch)
'**********************************************************************************************************************************************************************
Function CaptureTextTableFieldForSpecificValue(formShortTitle,tableBlockName,dataColumnNameToMatch,dataColumnNameToCapture,dataToMatch)

  If Not Environment.Value("blnFatalError") Then
    	Dim blnObjectError
		blnObjectError=False
        setMatchFlag=0
		stepName="CaptureTextTableFieldForSpecificValue"
		strStepDescription = "CaptureTextTableFieldForSpecificValue"
		inputParameter = "<b>Short Title of the Form : </b>" & formShortTitle & "<br><b> Block Name of the Oracle table : </b> " & tableBlockName  & "<br><b> Name of the Column to Match : </b>" & dataColumnNameToMatch & "<br><b>Name of the Column to Capture : </b>" & dataColumnNameToCapture
		Dim strTableFieldValue

		On Error Resume Next   

		If formShortTitle<>"" AND tableBlockName<>""  AND dataColumnNameToMatch<>"" AND dataColumnNameToCapture<>"" And dataToMatch<>""Then
				Set objOracleTable=OracleFormWindow("short title:=" & formShortTitle).OracleTable("block name:=" & tableBlockName)
						dataRowNo =1
						If objOracleTable.Exist(2) Then
								 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
													End if
										Do Until(Len(objOracleTable.GetFieldValue (dataRowNo,dataColumnNameToMatch))=0 Or InStr(1,OracleStatusLine("index:=0").GetROProperty("message"),"You cannot create records here")<>0)

													If objOracleTable.GetFieldValue (dataRowNo,dataColumnNameToMatch)=dataToMatch Then
																	 strTableFieldValue = objOracleTable.GetFieldValue (dataRowNo,dataColumnNameToCapture)	
																	 setMatchFlag=1
														             Exit Do		
													End If
													If OracleStatusLine("index:=0").GetROProperty("message")<>"" Then
                                                            If InStr(1,OracleStatusLine("index:=0").GetROProperty("message"),"Record must be entered or deleted first")<>0 Then
																		OracleFormWindow("short title:=" & formShortTitle).SelectMenu "Edit->Clear->Record"
															End If
													End If
													dataRowNo=dataRowNo+1
													Set Ws = CreateObject("WScript.Shell")
													Ws.SendKeys "{Down}"
													Set Ws = Nothing
										Loop
										
										blnExceptionFlag = Error_Listener ("CaptureTextTableFieldForSpecificValue",objOracleTable)																														'// end
			
																			If Not blnExceptionFlag Then
																				   If setMatchFlag = 0 Then
																                              status="FAIL"
																							  Flag=1
																							  blnObjectError=True
																                              message="[ " & dataToMatch & " ]  Not Exist in the List"
																							  Call ReporterFunction(strLibraryFileName,"CaptureTableFieldValueTabbedRegionForSpecificValue","1",stepName,message)
														                            Else
																							status="DONE"
																							message="[ " & strTableFieldValue & " ] value Captured during run time."
																							Call ReporterFunction("eSwift_FunctionLibrary","CaptureTextTableFieldForSpecificValue","2",stepName,message)		
																			        End If
																			Else
																						   status="FAIL"
																							Flag=1
																							message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																							Call ReporterFunction(strLibraryFileName,"CaptureTextTableFieldForSpecificValue","1",stepName,message)
						
																			End If
			
						Else
											status="FAIL"
											Flag=1
											message="Oracle Table does not Exist."
											blnObjectError=True
											Call ReporterFunction("eSwift_FunctionLibrary","CaptureTextTableFieldForSpecificValue","1",stepName,message)
						End If

		Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				blnObjectError=True
				Call ReporterFunction("eSwift_FunctionLibrary","CaptureTextTableFieldForSpecificValue","1",stepName,message)
		End If
		  
			CaptureTextTableFieldForSpecificValue=strTableFieldValue		'Returning the Value
			outputParameter=strTableFieldValue		  'Setting Output Parameter
				                  
	 If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
	End If
			If Flag =1  Then
										CaptureTextTableFieldForSpecificValue = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objOracleTable,message)
				Else
										CaptureTextTableFieldForSpecificValue = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objOracleTable=Nothing	
End If	
End Function
'*******************************************************************************************************************************************************************
'End Function -CaptureTextTableFieldForSpecificValue
'****************************************************************************************************************************************************




'******************************************************************************************************************************************************************************************************************************************************
'Name of the Function   : SelectCheckboxTabbedRegion_MultipleCheckBox
'										
'Author
'											:	TCS
'Date			   				  
'											:	27.04.2013
'Description					
'											:	Selects the checkbox in a tabbed region when there are more than 1 checkbox
'Input Parameters	     
'											:	formShortTitle
'											:	tabbedRegionLabel
'											:	tabbedRegionIndex
'											:	checkboxDescription
'											:	checkboxIndex
'Output Parameters      
'											: None
'**********************************************************************************************************************************************************************
'Function    SelectCheckBoxTabbedRegion_MultipleCheckBox(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,checkboxDescription,checkboxIndex)
'**********************************************************************************************************************************************************************
Function  SelectCheckBoxTabbedRegion_MultipleCheckBox(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,checkboxDescription,checkboxIndex)
   If Not Environment.Value("blnFatalError") Then
	 Dim blnObjectError
     blnObjectError=False
     stepName="Select " & checkboxDescription &" Checkbox"
	 strStepDescription = "Checks\Unchecks the check box "& checkboxDescription & " of Tabbed region " & tabbedRegionLabel
	 inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br> <b>Description property of the Checkbox:</b> "& checkboxDescription 
	On error resume next
        If 	 formShortTitle<>"" and tabbedRegionLabel<>"" and tabbedRegionIndex<>"" and  checkboxDescription<>"" and checkboxIndex<>""  Then
		   If  OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleCheckbox("description:=" & checkboxDescription ,"index:=" & checkboxIndex).Exist(gObjectTimeoutLimit)Then
			          temp=OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleCheckbox("description:="& checkboxDescription ,"index:=" & checkboxIndex).GetRoProperty("Selected") 
							If temp <> "True" Then
                                   	   Set objchckBox =OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleCheckbox("description:="& checkboxDescription ,"index:=" & checkboxIndex)
									   If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objchckBox,strStepDescription)
													End if
									   OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleCheckbox("description:="& checkboxDescription ,"index:=" & checkboxIndex).Select
                                          blnExceptionFlag = Error_Listener ("SelectCheckBoxTabbedRegion",objchckBox)
																	  If  not blnExceptionFlag Then
                                                                                        	status="DONE"
																							message="Given "& checkboxDescription & ":  Checkbox  has been selected successfully"
																						  Call ReporterFunction("2",checkboxDescription &" Checkbox ","Given "& checkboxDescription & ":  Checkbox  has been selected successfully")
																	 Else
																						  status="FAIL"
																						  Flag=1
																						  blnObjectError=True  '// added
																						  message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																						  Call ReporterFunction(strLibraryFileName,"SelectCheckBoxTabbedRegion","1",stepName,message)
																	  End If

							Else
								OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleCheckbox("description:=" & checkboxDescription ,"index:=" & checkboxIndex).Clear
								                                      If  not blnExceptionFlag Then
                                                                                        	status="DONE"
																							message="Given " & checkboxDescription & ":  Checkbox  has been cleared successfully"
																						  Call ReporterFunction("2", checkboxDescription &" Checkbox ","Given "& checkboxDescription & ":  Checkbox  has been cleared successfully")
																	 Else
																						  status="FAIL"
																						  Flag=1
																						  blnObjectError=True  '// added
																						  message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																						  Call ReporterFunction(strLibraryFileName,"SelectCheckBoxTabbedRegion","1",stepName,message)
																	  End If

								
						   End If
		    Else
			          Call ReporterFunction("1", checkboxDescription &" Checkbox " , "Given "& checkboxDescription & " Checkbox  Not Found")
					   status="FAIL"
					   Flag=1
					   blnObjectError=True
					  message="Given "& checkboxDescription & " Checkbox object  Not Found/missing"
		End If
    Else
											Flag=1
											status="FAIL"
											message="Input Parameter Missing"
										   Call ReporterFunction(strLibraryFileName,"SelectCheckBoxTabbedRegion","1",stepName,message)
   End If
     	If  blnObjectError  Then
					Environment.Value("blnFatalError")=True
					Call Error_Recovery ("CloseAllForms")
		End If
			If Flag =1  Then
										SelectCheckBoxTabbedRegion_MultipleCheckBox = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objchckBox,message)
				Else
										SelectCheckBoxTabbedRegion_MultipleCheckBox = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objchckBox = nothing
	End If
End Function
'******************************************************************************************************************************************************************************************************************************************************
'End Function - SelectCheckboxTabbedRegion_MultipleCheckBox
'******************************************************************************************************************************************************************************************************************************************************

'**********************************************************************************
'Name of the Function   : ClickListOfValues Button
'Author		     					  :TCS
'Date			 				     :14-Sep-2012
'Description		          :  Click on ListOfValuesButton of OracleListOfValues window
'			        
'			        
'Input Parameters	     : ListOfValuesWindowTitle:-title property value of the ListOfValues window  ,   buttonLabelOrDescription- :- Label Or Description property value of the button in the ListOfValues window   
'Output Parameters        :	None
'**********************************************************************************************************************************************************************
'Function    ClickListOfValuesButton(ListOfValuesWindowTitle,buttonLabelOrDescription)
'**********************************************************************************************************************************************************************
Function ClickListOfValuesButton(ListOfValuesWindowTitle,buttonLabelOrDescription)
	  If Not Environment.Value("blnFatalError") Then
	  Dim blnObjectError
      blnObjectError=False
  	  stepName="Click Button in ListOfValues Window"
	  strStepDescription = "Clciks the button " & buttonLabelOrDescription &" of window " & ListOfValuesWindowTitle
	  inputParameter="<b>Title of the Oracle ListOfValues Window :</b>" & ListOfValuesWindowTitle & "<br><b> Label Or Description of the Button :</b> " & buttonLabelOrDescription 
     On error resume next
	       If ListOfValuesWindowTitle<>"" AND buttonLabelOrDescription<>""  Then
               If  OracleListOfValues("title:=" & ListOfValuesWindowTitle).OracleButton("label:=" & buttonLabelOrDescription).Exist(gObjectTimeoutLimit) Then
                     Set objButtonLabelOrDescription=OracleListOfValues("title:=" & ListOfValuesWindowTitle).OracleButton("label:=" & buttonLabelOrDescription)
			   ElseIf OracleListOfValues("title:=" & ListOfValuesWindowTitle).OracleButton("description:=" & buttonLabelOrDescription).Exist(gObjectTimeoutLimit) Then
			         Set objButtonLabelOrDescription=OracleListOfValues("title:=" & ListOfValuesWindowTitle).OracleButton("description:=" & buttonLabelOrDescription)
			   Else
			         status="FAIL"
			         Flag=1
			         message=" ListOfValues Button Object  Not Found"
					 blnObjectError=True
					 Call ReporterFunction(strLibraryFileName,"ClickListOfValuesButton","1",stepName,message)
			   End If
	  
                      If objButtonLabelOrDescription.Exist(3) Then

                           If objButtonLabelOrDescription.GetROProperty("enabled") Then			
							    If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objButtonLabelOrDescription,strStepDescription)
													End if
  										objButtonLabelOrDescription.Click 		
                                              blnExceptionFlag = Error_Listener ("ClickListOfValuesButton",objButtonLabelOrDescription)
													If  Not blnExceptionFlag Then
																	status="DONE"
																	message="[ " & ListOfValuesWindowTitle & " ] ListOfValues window clicked successfully"
																	Call ReporterFunction(strLibraryFileName,"ClickListOfValuesButton","2",stepName,message)	
													 else
																	Flag=1
																	status="FAIL"
																	message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																	Call ReporterFunction(strLibraryFileName,"ClickListOfValuesButton","1",stepName,message)																	
											          End If	                  
								
                           Else
							   status="FAIL"
			                     Flag=1
			                     message="[ " & buttonLabelOrDescription & " ] Button Not Enabled"
								 blnObjectError=True
					              Call ReporterFunction(strLibraryFileName,"ClickListOfValuesButton","1",stepName,message)
                           End If	
                      End If			
						 		
	       Else
				 Flag=1
				 status="FAIL"
				 message="Input Parameter Missing"
				 blnObjectError=True
				 Call ReporterFunction(strLibraryFileName,"ClickListOfValuesButton","1",stepName,message)

	       End If
              
			If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
			End If
				If Flag =1  Then
										ClickListOfValuesButton = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objButtonLabelOrDescription,message)
				Else
										ClickListOfValuesButton = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				 Set objButtonLabelOrDescription=nothing
	End If
End Function
'**********************************************************************************
'End Function - ClickListOfValuesButton
'*************************************************************

'**********************************************************************************
'Name of the Function	 ->ClickTextFieldbyvalue
'Author									->TCS
'Date									 ->27-Sep-2011
'Description					   ->Clicks a TextField
'Input Parameters			 ->formShortTitle : Short Title of the Oracle Form
'												textFieldPromptOrDescription->Prompt  or description property value of the text field,
'												fieldvalue-> value of the text fileld
'Output Parameters		  ->	None
'**********************************************************************************************************************************************************************
'Function    ClickTextFieldbyValue(formShortTitle,textFieldPromptOrDescription,fieldvalue)
'**********************************************************************************************************************************************************************
Function ClickTextFieldbyValue(formShortTitle,textFieldPromptOrDescription,fieldvalue)
Dim blnObjectError 
blnObjectError = False
   If Not Environment.Value("blnFatalError") Then
	Dim blnExceptionFlag 
	stepName="Click a TextField "
	inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Prompt  or Description of the text field : </b>" & textFieldPromptOrDescription &"<br><b>Index of the text field : </b>" & textFiledIndex		
	strStepDescription = "Clicks the Text Field " & textFieldPromptOrDescription &" by value "   &fieldvalue
   On error resume next
   If formShortTitle<>"" AND textFieldPromptOrDescription<>"" AND fieldvalue<>""  Then
				If OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:=" & textFieldPromptOrDescription,"value:=" & fieldvalue).Exist(gObjectTimeoutLimit) Then	'Check Field for Description
							Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:=" & textFieldPromptOrDescription,"value:=" & fieldvalue)
							intSetFlag=0
				ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:=" & textFieldPromptOrDescription,"value:=" & fieldvalue).Exist(gObjectTimeoutLimit) Then	'Check Field for Promp
							Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:=" & textFieldPromptOrDescription,"value:=" & fieldvalue)
							intSetFlag=0
				Else
	                      status="FAIL"
			              Flag=1
		                  message="Text Field object Not Found."
						    blnObjectError = True
   	                     Call ReporterFunction(strLibraryFileName,"ClickTextField","1",stepName,message)
				End If
     If intSetFlag=0 Then
		 If  objText.GetROProperty("enabled") = -1Then		
				 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objText,strStepDescription)
													End if
                    objText.Click
                     				blnExceptionFlag = Error_Listener ("ClickTextField",objText)
										If Not blnExceptionFlag Then
											   status="DONE"
											   message="[ " & descriptionOfTextField & " ] Clicked Sucessfully."
											   Call ReporterFunction(strLibraryFileName,"ClickTextField","2",stepName,message)
										 Else
										        status="FAIL"
												Flag=1
												message="<br> Unexpected Error Encountered: </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
												Call ReporterFunction(strLibraryFileName,"ClickTextField","1",stepName,message)
										End If
                         
		   Else
		                 status="FAIL"
			             Flag=1
		                 message="Text Field  not enabled."
						   blnObjectError = True
		                Call ReporterFunction(strLibraryFileName,"ClickTextField","1",stepName,message)

		   End If
		End If
        
Else
       status="FAIL"
	 	Flag=1
		message="Insufficient Data Provided."
		  blnObjectError = True
		Call ReporterFunction(strLibraryFileName,"ClickTextField","1",stepName,message)
End If

						 If  blnObjectError  Then
					Environment.Value("blnFatalError")=True
					Call Error_Recovery ("CloseAllForms")
					End If
					If Flag =1  Then
										ClickTextFieldbyValue = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objText,message)
				Else
										ClickTextFieldbyValue = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objText=Nothing
   End If
End Function
'**********************************************************************************************************************************************************************
'End Function    ClickTextFieldbyValue(formShortTitle,textFieldPromptOrDescription,fieldvalue)
'**********************************************************************************************************************************************************************
'**********************************************************************************************************************************************************************
'Function    waitUntilFormExist(objShortTitle)
'**********************************************************************************************************************************************************************
Function waitUntilFormExist(objShortTitle)
		'OracleFormWindow("Batch Details").OracleTabbedRegion("Products").Select
	On Error Resume Next
	startTime=Timer()
	a=0
    Do until OracleFormWindow("short title:="&objShortTitle).exist(5)  or OracleListOfValues("title:="& objShortTitle).exist(5)
		a=a+1
		If a=24 Then
		
								status="FAIL"
								Flag = 1
								message="Oracle Form not launched"
									endTime=Timer()
										ExeTime = FormatNumber(endTime - startTime,3) 
								Call UpdateResultHtml(status,"","",message,ExeTime,"Oracle Form Launch")
				Exit do
								
         End If
	 
	loop
End Function
'**********************************************************************************************************************************************************************
'End Function    waitUntilFormExist(objShortTitle)
'**********************************************************************************************************************************************************************

'*******************************************************************************************************************

Function GetTimer()
	On Error Resume Next
	Wait(20)
End Function

'*******************************************************************************************************************


'***********************************************************************************
'Name of the Function  : CompareTabbedTextFieldValue
'Author		    :  TCS
'Date			    :   9 Dec 2013
'Description	     :  Compare function for untime data with user data in Oracle Tabbed Text Field 
'Input Parameters	     :  formShortTitle,textFieldPromptOrDescription,ExpectedData,
				'ComparisonOperator: Comparison operator > or <; for comparing actual value with user specified value
'				
'Output Parameters     :  TRUE or FALSE
'**********************************************************************************************************************************************************************
'Function    CompareTabbedTextFieldValue(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,ExpectedData,CaseSensitive)
'**********************************************************************************************************************************************************************
Function CompareTabbedTextFieldValue(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,ExpectedData,ComparisonOperator)
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
   Dim blnObjectError
   blnObjectError=False
	stepName="Validating  Expected Value in Tabbed Text Field : Full String  Match "
	inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex &"<br><b>Prompt Or Description of the TextField : </b>" & textFieldPromptOrDescription & "<br><b>Expected Data : </b>" & ExpectedData & "<br><b>Case Sensitive : </b>" & CaseSensitive
	strStepDescription =  "Comparing the Expected Data " &ExpectedData &" of Tabbed region " & tabbedRegionLabel  &" of Text Field " & textFieldPromptOrDescription &" with Comparision Operator" & ComparisonOperator
    If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescription).Exist(gObjectTimeoutLimit) Then
				Set objText = OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescription)
					 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objText,strStepDescription)
													End if
				sActualValue = objText.GetROProperty("value")
           If ComparisonOperator= ">" Then
					If sActualValue  > ExpectedData then 
							Call ReporterFunction(strLibraryFileName,"CompareTabbedTextFieldValue","2","TextField ",ExpectedData &  ": has been successfully compared &is smaller  in the "& textFieldPromptOrDescription &"Text  field")
							status="PASS"
							message="Expected Data :  [ "&  ExpectedData  & " ] : is smaller  than  Actual  Value : [ " & sActualValue & " ] "
							CompareTabbedTextFieldValue = TRUE
							blnCaptureFlag =  True
				Else
						Call ReporterFunction(strLibraryFileName,"CompareTabbedTextFieldValue","1","TextField ", ExpectedData & " is greater  than actual value , Actual Value = " & sActualValue)
						status="FAIL"
						Flag=1
						message= " Expected Data  : [ " & ExpectedData  &" ] is greater than  Actual Value : [  " & sActualValue &" ] "
						CompareTabbedTextFieldValue = FALSE
				End If
			elseif ComparisonOperator= "<"  then
				If ActualValue  < ExpectedData Then

						Call ReporterFunction(strLibraryFileName,"CompareTabbedTextFieldValue","2","TextField ",ExpectedData &  ": has been successfully compared and is greater  than that  in the Text  field")
						status="PASS"
						message="Expected Value:  [ "&  ExpectedData  & " ] :is greater than  Actual  Value : [ " & sActualValue & " ] "
						CompareTabbedTextFieldValue = TRUE
					
				Else
						Call ReporterFunction(strLibraryFileName,"CompareTabbedTextFieldValue","1","TextField ", ExpectedData & " Expected Value is not "&  ComparisonOperator &" Actual Value ")
						status="FAIL"
						Flag=1
						message= "Expected Data :  [ "&  ExpectedData  & " ] : is smaller  than  Actual  Value : [ " & sActualValue & " ] "
						CompareTabbedTextFieldValue = FALSE
			
				End If
		Else

			Call ReporterFunction(strLibraryFileName,"CompareTabbedTextFieldValue","1","TextField ", "Comparison Operator not correct , Operator :" & ComparisonOperator)
			status="FAIL"
			Flag=1
			message= " Comparison Operator not correct , Operator :" & ComparisonOperator
			CompareTabbedTextFieldValue = FALSE
		
     End If
Else

		Call ReporterFunction(strLibraryFileName,"CompareTabbedTextFieldValue","1","TextField ", " Text  Field  Not Found")
		status="FAIL"
		Flag=1
		message="Given  Text Field object Not Found"
                CompareTabbedTextFieldValue = FALSE
	End if 
	  If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
	End If
		If Flag =1  Then
										CompareTabbedTextFieldValue = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objText,message)
				Else
										CompareTabbedTextFieldValue = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
					Set objText = nothing
End If 
	
End Function


'*******************************************************************************************************************




'********************************************************************************
'Name of the Function   : SelectTabTabbedRegion
'Author              :TCS
'Date             :11-12-2013
'Description            : Moving one form to another form 
'           
'           
'Input Parameters      :  fformShortTitle->short title property value of oracle form window, tabbedRegionLabel->Label peroperty value of the tabbed region, tabbedRegionIndex->Index of the tabbed region                    
'Output Parameters    :		None
'**********************************************************************************************************************************************************************
'Function    SelectTabTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex)
'**********************************************************************************************************************************************************************
Function SelectTabTabbedRegionWithFormIndex(formShortTitle,tabbedRegionLabel,FormWindowIndex,tabbedRegionIndex)
	If Not Environment.Value("blnFatalError") Then
			Dim blnObjectError
			blnObjectError=False
  	        stepName="Select Tab"
			inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel  & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex 
			strStepDescription = "Selects the tab " & tabbedRegionLabel & " of Form " & formShortTitle
            On error resume next
			If formShortTitle <>"" And tabbedRegionLabel <>""  And tabbedRegionIndex <>"" Then
				If OracleFormWindow("short title:=" & formShortTitle,"index:=" & FormWindowIndex).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).Exist(3) Then
					If OracleFormWindow("short title:=" & formShortTitle,"index:=" & FormWindowIndex).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).GetRoProperty("enabled") Then
						Set objOracleTabbedRegion=OracleFormWindow("short title:=" & formShortTitle,"index:=" & FormWindowIndex).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex)
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objOracleTabbedRegion,strStepDescription)
													End if
						OracleFormWindow("short title:=" & formShortTitle,"index:=" & FormWindowIndex).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).Select	
                        blnExceptionFlag = Error_Listener ("SelectTabTabbedRegion",objOracleTabbedRegion)
						If Not blnExceptionFlag Then
							status="DONE"
							message=" [ "&tabbedRegionLabel &" ] Tabbed Selected"
							Call ReporterFunction("e-Swift_FunctionLibrary","SelectTabTabbedRegionWithFormIndex","2",stepName,message)
						Else
							status="FAIL"
							Flag=1
							message="<br> Unexpected Error Encountered After selecting tab </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
							Call ReporterFunction("e-Swift_FunctionLibrary","SelectTabTabbedRegionWithFormIndex","1",stepName,message)
						End If
                    Else
						status="FAIL"
						Flag=1
						message=" [ "&tabbedRegionLabel &" ] Tabbed not enabled"
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","SelectTabTabbedRegionWithFormIndex","1",stepName,message)
					End If

                Else
					status="FAIL"
					Flag=1
					message="Tabbed Region Object not Found"
					blnObjectError=True
					Call ReporterFunction("e-Swift_FunctionLibrary","SelectTabTabbedRegionWithFormIndex","1",stepName,message)
				End If
			Else
				Flag=1
				status="FAIL"
				message="Input Parameter Missing"
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","SelectTabTabbedRegionWithFormIndex","1",stepName,message)
            End If
			
			If  blnObjectError  Then
				Environment.Value("blnFatalError")=True
				Call Error_Recovery ("CloseAllForms")
			End If
				If Flag =1  Then
										SelectTabTabbedRegionWithFormIndex = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objOracleTabbedRegion,message)
				Else
										SelectTabTabbedRegionWithFormIndex = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objOracleTabbedRegion = Nothing
	End If
End Function
'*******************************************************************************************************************************************************************
'End Function -SelectTabTabbedRegion
'********************************************************************************************************************************************************************





'*********************************************************************************************************************************************************************
'Name of the Function
'											:	ClickButtonTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,buttonLabelOrDescription)
'Author
'											:	TCS
'Date			   				  
'											:	11.12.2013
'Description					
'											:	Clicking a Button inside Oracle Tabbed Region
'Input Parameters	     
'											:	formShortTitle : Short Title Property of the Oracle Form Window
'												tabbedRegionLabel : Label Property of the Oracle Tabbed Region
'												tabbedRegionIndex : Index of the Oracle Tabbed Region
'													(Normally set as 0. For more than one identical object need to change accordingly.)
'												buttonLabelOrDescription : Description / Label Property of the Oracle Button 
'													(Choose which one is available. Can choose either  in case both are present.)
'Output Parameters      
'											:     None
'**********************************************************************************************************************************************************************
'Function    ClickButtonTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,buttonLabelOrDescription)
'**********************************************************************************************************************************************************************
Function ClickButtonTabbedRegionWithFormIndex(formShortTitle,tabbedRegionLabel,FormWindowIndex,tabbedRegionIndex,buttonLabelOrDescription)
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
		stepName="Click Button"
		inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b>Label or Description of the Button  : </b>" & buttonLabelOrDescription
		Dim blnObjectError
		blnObjectError=False
		strStepDescription = "Clicks the Button " & buttonLabelOrDescription &" of Tabbed Region " &tabbedRegionLabel
		On Error Resume Next
		Dim objButton,intSetFlag
		intSetFlag=1

		If formShortTitle<>"" AND tabbedRegionLabel<>"" AND tabbedRegionIndex<>"" AND buttonLabelOrDescription<>"" Then
			If OracleFormWindow("short title:="& formShortTitle,"index:="&FormWindowIndex).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleButton("label:="& buttonLabelOrDescription).Exist(3) Then
        		Set objButton=OracleFormWindow("short title:="& formShortTitle,"index:="&FormWindowIndex).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleButton("label:="& buttonLabelOrDescription)
				intSetFlag=0
        	ElseIf OracleFormWindow("short title:="& formShortTitle,"index:="&FormWindowIndex).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleButton("description:="& buttonLabelOrDescription).Exist(3) Then
        		Set objButton=OracleFormWindow("short title:="& formShortTitle,"index:="&FormWindowIndex).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleButton("description:="& buttonLabelOrDescription)
				intSetFlag=0
        	Else
        		status="FAIL"
				Flag=1
				message="Given Button Object Not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonTabbedRegionWithFormIndex","1",stepName,message)
        	End If	

			If intSetFlag=0 Then
				If objButton.GetROProperty("enabled") Then
					 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objButton,strStepDescription)
													End if
					objButton.Click
					blnExceptionFlag = Error_Listener (stepName,objButton)
					If Not blnExceptionFlag Then
						status="DONE"
						message="[ " & buttonLabelOrDescription &"] Button clicked Successfully."
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonTabbedRegionWithFormIndex","2",stepName,message)
					Else
				        status="FAIL"
						Flag=1
						message="[ " & buttonLabelOrDescription &"] Button Failed to Click " & Err.Description
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonTabbedRegionWithFormIndex","1",stepName,message)    
					End If				
				Else
					status="FAIL"
					Flag=1
					message="[ " & buttonLabelOrDescription & " ] Button is Disabled."
					blnObjectError=True
					Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonTabbedRegionWithFormIndex","1",stepName,message)
				End If
			End If
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonTabbedRegionWithFormIndex","1",stepName,message)
		End If

		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
			If Flag =1  Then
										ClickButtonTabbedRegionWithFormIndex = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objButton,message)
				Else
										ClickButtonTabbedRegionWithFormIndex = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If

		Set objButton=Nothing
	End If
End Function
'*************************************************************************************************************************
'End Function ClickButtonTabbedRegionWithFormIndex()
'*************************************************************************************************************************


'***********************************************************************************
'Name of the Function  : CompareTextFieldValue
'Author		    :  TCS
'Date			    :   9 Dec 2013
'Description	     :  Compare function for untime data with user data in Oracle Tabbed Text Field 
'Input Parameters	     :  formShortTitle,textFieldPromptOrDescription,ExpectedData,
				'ComparisonOperator: Comparison operator > or <; for comparing actual value with user specified value
'				
'Output Parameters     :  TRUE or FALSE
'**********************************************************************************************************************************************************************
'Function    CompareTextFieldValue(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,ExpectedData,CaseSensitive)
'**********************************************************************************************************************************************************************
Function CompareTextFieldValue(formShortTitle,textFieldPromptOrDescription,ExpectedData,ComparisonOperator)
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
   Dim blnObjectError
   blnObjectError=False
	stepName="Validating  Expected Value in  Text Field : Full String  Match "
	inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Prompt Or Description of the TextField : </b>" & textFieldPromptOrDescription & "<br><b>Expected Data : </b>" & ExpectedData
	strStepDescription = "Comparing the Expected Data " &ExpectedData &" of Text Field " & textFieldPromptOrDescription &" with Comparision Operator" & ComparisonOperator
    If OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription).Exist(gObjectTimeoutLimit) Then
		Set objText = OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription)
				 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objText,strStepDescription)
													End if
				sActualValue = objText.GetROProperty("value")
           If ComparisonOperator= ">" Then
					If sActualValue  > ExpectedData then 
							Call ReporterFunction(strLibraryFileName,"CompareTextFieldValue","2","TextField ",ExpectedData &  ": has been successfully compared &is smaller  in the "& textFieldPromptOrDescription &"Text  field")
							status="PASS"
							message="Expected Data :  [ "&  ExpectedData  & " ] : is smaller  than  Actual  Value : [ " & sActualValue & " ] "
							CompareTextFieldValue = TRUE
							blnCaptureFlag =  True
				Else
						Call ReporterFunction(strLibraryFileName,"CompareTextFieldValue","1","TextField ", ExpectedData & " is greater  than actual value , Actual Value = " & sActualValue)
						status="FAIL"
						Flag=1
						message= " Expected Data  : [ " & ExpectedData  &" ] is greater than  Actual Value : [  " & sActualValue &" ] "
						CompareTextFieldValue = FALSE
				End If
			elseif ComparisonOperator= "<"  then
				If ActualValue  < ExpectedData Then

						Call ReporterFunction(strLibraryFileName,"CompareTextFieldValue","2","TextField ",ExpectedData &  ": has been successfully compared and is greater  than that  in the Text  field")
						status="PASS"
						message="Expected Value:  [ "&  ExpectedData  & " ] :is greater than  Actual  Value : [ " & sActualValue & " ] "
						CompareTextFieldValue = TRUE
					
				Else
						Call ReporterFunction(strLibraryFileName,"CompareTextFieldValue","1","TextField ", ExpectedData & " Expected Value is not "&  ComparisonOperator &" Actual Value ")
						status="FAIL"
						Flag=1
						message= "Expected Data :  [ "&  ExpectedData  & " ] : is smaller  than  Actual  Value : [ " & sActualValue & " ] "
						CompareTextFieldValue = FALSE
			
				End If
		Else

			Call ReporterFunction(strLibraryFileName,"CompareTextFieldValue","1","TextField ", "Comparison Operator not correct , Operator :" & ComparisonOperator)
			status="FAIL"
			Flag=1
			message= " Comparison Operator not correct , Operator :" & ComparisonOperator
			CompareTextFieldValue = FALSE
		
     End If
Else

		Call ReporterFunction(strLibraryFileName,"CompareTextFieldValue","1","TextField ", " Text  Field  Not Found")
		status="FAIL"
		Flag=1
		message="Given  Text Field object Not Found"
                CompareTextFieldValue = FALSE
	End if 
	  If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
	End If
	If Flag =1  Then
										CompareTextFieldValue = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objText,message)
				Else
										CompareTextFieldValue = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
					Set objText = nothing
End If 
	
End Function
'**********************************************************************************************************************************************************************
'End Function    CompareTextFieldValue(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,ExpectedData,CaseSensitive)
'**********************************************************************************************************************************************************************
'**********************************************************************************************************************************************************************
'Function    SelectCheckBox_multipleCheckBox(formShortTitle,checkBoxDescription,checkBoxOption,checkBoxIndex)
'**********************************************************************************************************************************************************************
Function SelectCheckBox_multipleCheckBox(formShortTitle,checkBoxDescription,checkBoxOption,checkBoxIndex)
   
    If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		stepName="Check/Uncheck Check Box "
		inputParameter="Short Title of  Form:"& formShortTitle &"<br>Check Box : "& checkBoxDescription & "<br> Option: " & checkBoxOption 
		strStepDescription = "Check/Uncheck Check Box " & checkBoxDescription& " with index " &checkBoxIndex
		On Error Resume Next

		If 	formShortTitle<>" " and checkBoxDescription<> " " and checkBoxOption<>" " Then
			If  OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("description:="& checkBoxDescription,"index:="&checkBoxIndex).Exist(3) Then
		   Set objCheckBox=OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("description:="& checkBoxDescription,"index:="&checkBoxIndex)
				If OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("description:="& checkBoxDescription,"index:="&checkBoxIndex).GetROProperty("Enabled") Then
					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
									ImagePath=CaptureScreenshot(objCheckBox,strStepDescription)
					End if
                    If Ucase(checkBoxOption)="YES" or Ucase(checkBoxOption)="TRUE" Then
						If   OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("description:="& checkBoxDescription,"index:="&checkBoxIndex).IsSelected Then
							message=checkBoxDescription & " :CheckBox already selected"
						Else
							'if not already selected ,select it
							OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("description:="& checkBoxDescription,"index:="&checkBoxIndex).Select
							message="Checkbox" & checkBoxDescription &"selected"
						End If
                    ElseIf Ucase(checkBoxOption)="NO" or Ucase(checkBoxOption)="FALSE" Then
						'If already selected  clear /uncheck it
						If  OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("description:="& checkBoxDescription,"index:="&checkBoxIndex).IsSelected Then
							OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("description:="& checkBoxDescription,"index:="&checkBoxIndex).Clear
							message=checkBoxDescription & " :CheckBox  unchecked"
						Else
							message=checkBoxDescription & " :CheckBox already unchecked"
                        End If
					Else
						status="FAIL"
						Flag=1
						message="[ " & checkBoxOption & " ] Invalid Option."
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBox","1",stepName,message)
					End If
					blnExceptionFlag = Error_Listener ("SelectCheckBox",objCheckBox)
					If  Not blnExceptionFlag Then
						status="DONE"
						Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBox","2",stepName,message)
					Else
						Flag=1
						status="FAIL"
						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
						Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBox","1",stepName,message)
                    End If
                Else
					status="FAIL"
					Flag=1
					message=checkBoxDescription & " : CheckBox disabled"
					blnObjectError=True
                    Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBox","1",stepName,message)
				End If
            Else
				status="FAIL"
				Flag=1
				message=checkBoxDescription & " : CheckBox not found"
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBox","1",stepName,message)
			End If
		Else
			status="FAIL"
			Flag=1
			message="One or More Missing parameter"
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBox","1",stepName,message)
		End If

        If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
										SelectCheckBox_multipleCheckBox = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objCheckBox,message)
				Else
										SelectCheckBox_multipleCheckBox = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
					Set objCheckBox=Nothing
	End If 
End Function


''***********************************************************************************
'Name of the Function  : ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch
'Author		    :  TCS
'Date			    :   01Jan 2014
'Description	     :  Validation function for matching expected Full String data with runtime data in Oracle Tabbed Text Field 
'Input Parameters	     :  formShortTitle,textFieldPromptOrDescription,ExpectedData,
				'CaseSensitive: 'True' or 'False' Value for case sensitive search. Default is False
'				
'Output Parameters     :  TRUE or FALSE
'**********************************************************************************************************************************************************************
'Function    ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,ExpectedData,CaseSensitive)
'**********************************************************************************************************************************************************************
Function ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,textFieldIndex,ExpectedData,CaseSensitive)
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
   Dim blnObjectError
   blnObjectError=False
	stepName="Validating  Expected Value in Tabbed Text Field : Full String  Match "
	inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex &"<br><b>Prompt Or Description of the TextField : </b>" & textFieldPromptOrDescription & "<br><b>Expected Data : </b>" & ExpectedData & "<br><b>Case Sensitive : </b>" & CaseSensitive
	strStepDescription = "Validating  Expected Value " & ExpectedData &" in Tabbedregion " & tabbedRegionLabel  &" Text Field " & textFieldPromptOrDescription &" : Full String  Match "
    If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescription,"index:="&textFieldIndex).Exist(gObjectTimeoutLimit) Then
				Set objText= OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescription,"index:="&textFieldIndex)
				 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objText,strStepDescription)
													End if
				sActualValue  = objText.GetROProperty("value")
           If CaseSensitive  Or Ucase(CaseSensitive  = "TRUE" ) Then
		If  sActualValue  = ExpectedData  Then
                    Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch","2","TextField ",ExpectedData &  ": has been successfully Validated in the "& textFieldPromptOrDescription &"Text  field")
			status="PASS"
		        message="Expected Data :  [ "&  ExpectedData  & " ] : Matches with Actual  Value : [ " & sActualValue & " ] "
			'ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch = TRUE
                        blnCaptureFlag =  True

	            Else
			Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
			status="FAIL"
		        Flag=1
		        message= " Expected Data  : [ " & ExpectedData  &" ] NOT  Matching with  Actual Value : [  " & sActualValue &" ] "
			'ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch = FALSE
		End If

		Else

		If  Ucase(sActualValue)  = Ucase(ExpectedData)  Then
		Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch","2","TextField ",ExpectedData &  ": has been successfully Validated in the Text  field")
		status="PASS"
		message="Expected Value:  [ "&  ExpectedData  & " ] :Matches  with Actual  Value : [ " & sActualValue & " ] "
		'ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch = TRUE
		
	        Else
		Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
		status="FAIL"
		Flag=1
		message= " Expected Value  :[ " & ExpectedData  &" ] NOT  Matching with  Actual Value : [ " & sActualValue &" ] "
	      '  ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch = FALSE
		
                End If

    End If
	
Else

		Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch","1","TextField ", " Text  Field  Not Found")
		status="FAIL"
		Flag=1
		message="Given  Text Field object Not Found"
               ' ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch = FALSE
	End if 

	If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
	End If
	If Flag =1  Then
										ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objText,message)
				Else
										ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
End If 
	
End Function

'**************************************************************************************************************************************************************************************************************************************************************
'End Function    ValidateTabbedTextFieldValue_MultipleTextField_FullStringMatch(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,textFieldIndex,ExpectedData,CaseSensitive)
'**************************************************************************************************************************************************************************************************************************************************************


'**************************************************************************************************

Function SelectConfiguratorRadioItem(itemDescription)
   On Error Resume Next
	stepName="Select Configurator Radio Item"
	inputParameter="<b>Process Name :</b>"& processName &"<br><b>Expected Status : </b>"& expectedStatus & "<br><b>Maximum Seconds to wait for Status Change : </b>" & maxWaitTime
	browserCreationTime = FindLatestOpenedBrowser()
	preDescRowNo = Browser("CreationTime:="&browserCreationTime).Page("title:=.*").WebTable("name:=N.*","index:=0").GetRowWithCellText(itemDescription)
	descRowNo = preDescRowNo-2
	Set rgWithinCell = Browser("CreationTime:="&browserCreationTime).Page("title:=.*").WebTable("name:=N.*","index:=0").ChildItem(2, 1, "WebRadioGroup", 0)
	rgWithinCell.Select "#"&descRowNo
	If Err.Number <> 0 Then
		status="FAIL"
		Flag=1
		message= "The Radio button for Item [ "& itemDescription &" ] is NOTselected"
		Call ReporterFunction("e-Swift_FunctionLibrary","SelectConfiguratorRadioItem","2",stepName,message)
	Else
		status="DONE"
		message= "The Radio button for Item [ "& itemDescription &" ] has been Successfully selected"
		Call ReporterFunction("e-Swift_FunctionLibrary","SelectConfiguratorRadioItem","2",stepName,message)
	End If

		If Flag =1  Then
										SelectConfiguratorRadioItem = message
										blnMainFailFlag = True
									'	ImagePath=CaptureScreenshot(objText,message)
				Else
										SelectConfiguratorRadioItem = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
End Function

Function FindLatestOpenedBrowser()   
   On Error Resume Next
	Dim oDescription   
	Dim BrowserObjectList   
	Dim oLatestBrowserIndex   
	Set oDescription=Description.Create   
	oDescription("micclass").value="Browser"  
	Set BrowserObjectList=Desktop.ChildObjects(oDescription)   
	oLatestBrowserIndex=BrowserObjectList.count-1   
	FindLatestOpenedBrowser = oLatestBrowserIndex
	Set oDescription=Nothing  
	Set BrowserObjectList=Nothing  
End Function  


'**********************************************************************************************************************************************************************

Function RunProcessToChangeStatus(expectedStatus,processName,maxWaitTime,rowNumber,refreshRequestTimeOut,CloseFormIfYes,OrderNo,ExecCount)
   On Error Resume Next
		stepName="Validate Line Status"
		inputParameter="<b>Process Name :</b>"& processName &"<br><b>Expected Status : </b>"& expectedStatus & "<br><b>Maximum Seconds to wait for Status Change : </b>" & maxWaitTime
	If OracleFormWindow("short title:=Sales Orders").Exist(2) Then
		For cntExec = 0 to ExecCount
				If Ucase(CloseFormIfYes) = "YES"  Then
							OracleFormWindow("short title:=Sales Orders").CloseWindow
							Browser("name:=Oracle Applications Home Page").Page("title:=Oracle Applications Home Page").Link("innertext:=Sales Orders").Click
							waitUntilFormExist "Sales Orders"
							OracleFormWindow("short title:=Sales Orders").SelectMenu "View->Query By Example->Enter"
							OracleFormWindow("short title:=Sales Orders").OracleTabbedRegion("label:=Order Information","index:=1").OracleTextField("description:=Order Number").Enter OrderNo
							OracleFormWindow("short title:=Sales Orders").SelectMenu "View->Query By Example->Run"
							OracleFormWindow("short title:=Sales Orders").OracleTabbedRegion("label:=Line Items","index:=0").Select
							OracleFormWindow("short title:=Availability").CloseWindow
						End If
					Do
						Wait(1)
						actualStatus = OracleFormWindow("short title:=Sales Orders").OracleTabbedRegion("label:=Line Items","index:=1").OracleTextField("description:=Status","index:="&rowNumber).GetROProperty("value")
						iWaitCounter = iWaitCounter + 1
					Loop Until ((actualStatus = expectedStatus)OR(cint(iWaitCounter) = cint(maxWaitTime)))
					wait(5)
					If  (actualStatus <> expectedStatus) OR(cint(iWaitCounter) > cint(maxWaitTime)) Then
						Call RunBackgroudProcess(processName,refreshRequestTimeOut,expectedStatus)
						passFlag = 0
					Else
						passFlag = 1
						Exit For
					End If
			Next
				If passFlag = 1 Then
						status="DONE"
						message= "The Expected Status [ " & expectedStatus & " ] MATCHES with the Actual Status [ " & actualStatus & " ]"
						Call ReporterFunction(strLibraryFileName,"RunProcessToChangeStatus","1",stepName,message)
				Else
						status="DONE"
						'Flag=1
						message= "The Expected Status [ " & expectedStatus & " ] MATCHES with the Actual Status [ " & actualStatus & " ]"
						Call ReporterFunction("e-Swift_FunctionLibrary","RunProcessToChangeStatus","2",stepName,message)
				End If
	Else
		status="FAIL"
		Flag=1
		message= "Oracle Form [ Sales Orders ] DOES NOT exist"
		blnObjectError=True
		Call ReporterFunction(strLibraryFileName,"RunProcessToChangeStatus","1",stepName,message)
	 End if
	 If Flag =1  Then
										RunProcessToChangeStatus = message
										blnMainFailFlag = True
										'ImagePath=CaptureScreenshot(objText,message)
				Else
										RunProcessToChangeStatus = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
End Function

'**********************************************************************************************************************************************************************


Function RunBackgroudProcess(processName,refreshRequestTimeOut,expectedStatus)
	On Error Resume Next
	OracleFormWindow("short title:=Sales Orders").SelectMenu "View->Requests"
	OracleFormWindow("short title:=Find Requests").OracleButton("label:=Submit a New Request...").Click
	OracleFormWindow("short title:=Submit a New Request").OracleButton("label:=OK").Click
	OracleFormWindow("short title:=Submit Request").OracleTextField("description:=Name").Enter processName
	wait(3)
	OracleFlexWindow("title:=Parameters").OracleTextField("prompt:=Process Deferred").Enter "Yes"
	OracleFlexWindow("title:=Parameters").OracleTextField("prompt:=Process Timeout").Enter "No"
	OracleFlexWindow("title:=Parameters").Approve
	wait(3)
	OracleFormWindow("short title:=Submit Request").OracleButton("label:=Submit").Click	
	wait(2)
	requestId = CaptureBGProcessReqNumber()
	Call RefreshData (requestId,refreshRequestTimeOut)
	OracleFormWindow("short title:=Requests").CloseWindow
	'Call RunProcessToChangeStatus(expectedStatus,maxTimeOut,rowNumber)
End Function



'**********************************************************************************************************************************************************************


Function CaptureBGProcessReqNumber()
			On Error Resume Next
				Set  objText=OracleNotification("title:=Decision")
				message = objText.GetROProperty("message")
				posX =instr(1,message,"=") 
				posY = instr(1,message,")") 
				intRequestNumber = trim(mid(message,posX+1,posY-posX-1))
				OracleNotification("title:=Decision").Decline
				CaptureBGProcessReqNumber = intRequestNumber
End Function

'**********************************************************************************************************************************************************************





'**********************************************************************************************************************************************************************
Function SelectCheckBoxTabbedRegionWithOption(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,checkBoxDescription,checkBoxOption)
   
    If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		stepName="Check/Uncheck Check Box "
        inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br> <b>Description property of the Checkbox:</b> "& checkboxDescription
		strStepDescription = "Checks/Unchecks Check Box  "& checkBoxDescription
		On Error Resume Next

		If 	formShortTitle<>" " and tabbedRegionLabel<>"" and tabbedRegionIndex<>"" and checkBoxDescription<> " " and checkBoxOption<>" " Then
			If  OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleCheckbox("description:="& checkBoxDescription).Exist(3) Then
		   Set objCheckBox=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleCheckbox("description:="& checkBoxDescription)
				If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleCheckbox("description:="& checkBoxDescription).GetROProperty("Enabled") Then
						 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objCheckBox,strStepDescription)
													End if
                    If Ucase(checkBoxOption)="YES" or Ucase(checkBoxOption)="TRUE" Then
						If   OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleCheckbox("description:="& checkBoxDescription).IsSelected Then
							message=checkBoxDescription & " :CheckBox already selected"
						Else
							'if not already selected ,select it
							OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleCheckbox("description:="& checkBoxDescription).Select
							message="Checkbox" & checkBoxDescription &"selected"
						End If
                    ElseIf Ucase(checkBoxOption)="NO" or Ucase(checkBoxOption)="FALSE" Then
						'If already selected  clear /uncheck it
						If  OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleCheckbox("description:="& checkBoxDescription).IsSelected Then
							OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleCheckbox("description:="& checkBoxDescription).Clear
							message=checkBoxDescription & " :CheckBox  unchecked"
						Else
							message=checkBoxDescription & " :CheckBox already unchecked"
                        End If
					Else
						status="FAIL"
						Flag=1
						message="[ " & checkBoxOption & " ] Invalid Option."
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBox","1",stepName,message)
					End If
					blnExceptionFlag = Error_Listener ("SelectCheckBox",objCheckBox)
					If  Not blnExceptionFlag Then
						status="DONE"
						Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBox","2",stepName,message)
					Else
						Flag=1
						status="FAIL"
						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
						Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBox","1",stepName,message)
                    End If
                Else
					status="FAIL"
					Flag=1
					message=checkBoxDescription & " : CheckBox disabled"
					blnObjectError=True
                    Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBox","1",stepName,message)
				End If
            Else
				status="FAIL"
				Flag=1
				message=checkBoxDescription & " : CheckBox not found"
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBox","1",stepName,message)
			End If
		Else
			status="FAIL"
			Flag=1
			message="One or More Missing parameter"
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBox","1",stepName,message)
		End If
	
        If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
										SelectCheckBoxTabbedRegionWithOption = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objCheckBox,message)
				Else
										SelectCheckBoxTabbedRegionWithOption = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
					Set objCheckBox=Nothing
	End If 
End Function



'**********************************************************************************************************************************************************************


Function CloseWebAdiWindow()
   On Error Resume Next
   If  Window("nativeclass:=.*ThunderDFrame.*").Exist(5)Then
'		Window("nativeclass:=.*ThunderDFrame.*").Close
'	   	Dim objShell
'		Set objShell = CreateObject("WScript.Shell")
'		wait(2)
'		Window("nativeclass:=ThunderDFrame").Activate
'		wait(2)
'		objShell.SendKeys "%C"
	
		set parentexcelwindow = Window("text:=WebADI.*","regexpwndtitle:=Excel","regexpwndclass:=XLMAIN").Window("regexpwndtitle:=Download","regexpwndclass:=ThunderDFrame","is owned window:=True")
		If parentexcelwindow.Exist(5) Then
			parentexcelwindow.Page("title:=Download").WebButton("type:=button","name:=Close","html tag:=BUTTON","index:=0").click
		Else
			set parentexcelwindow1 = Window("text:=Excel.*","regexpwndtitle:=Excel","regexpwndclass:=XLMAIN").Window("regexpwndtitle:=Download","regexpwndclass:=ThunderDFrame","is owned window:=True")
			parentexcelwindow1.Page("title:=Download").WebButton("type:=button","name:=Close","html tag:=BUTTON","index:=0").click		
		End If
			
   End If	


End Function

'**********************************************************************************************************************************************************************


Function ClickUploadMenuItem(ExcelWorkbookName)
   On Error Resume Next
	Execute "Set InputAppExcel =GetObject(,""Excel.Application"")"
	Set objInputWorkBook = InputAppExcel.WorkBooks(ExcelWorkbookName)
	Set objInputSheet = objInputWorkBook.Sheets.Item("Sheet1")
	InputAppExcel.Visible=TRUE
	InputAppExcel.SendKeys "%X"
	wait(3)
	InputAppExcel.SendKeys "A"
	wait(3)
	InputAppExcel.SendKeys "U"
	wait(15)
	InputAppExcel = Nothing
	objInputWorkBook = Nothing
	objInputSheet = Nothing
End Function


'**********************************************************************************************************************************************************************


Function CloseWebAdiExcel(ExcelWorkBookName)
	On Error Resume Next
   Execute "Set InputAppExcel =GetObject(,""Excel.Application"")"
	Set objInputWorkBook = InputAppExcel.WorkBooks(ExcelWorkBookName)
	'objInputWorkBook.Close (False)
	SystemUtil.CloseProcessByName "excel.exe"
End Function


'**********************************************************************************************************************************************************************

'**********************************************************************************
'Name of the Function   : VerifyCheckBOx
'Author		     					  :TCS
'Date			 				     :26/08/2014
'Description		          : Select and unselect checkbox based on the value specified
'			        
'			        
'Input Parameters	     :formShortTitle->ShortTitle of the form.'
											'checkBoxDescription->description property of checkbox
												'checkBoxOption-> Yes/No/True /False/T/F
'                                            
'Output Parameters        :	None

'**********************************************************************************************************************************************************************
'Function    VerifyCheckBOx(formShortTitle,checkBoxDescription,checkBoxOption)
'**********************************************************************************************************************************************************************Function VerifyCheckBOx(formShortTitle,checkBoxDescription,checkBoxOption)
   Function VerifyCheckBOx(formShortTitle,checkBoxDescription)
    If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		stepName="Check/Uncheck Check Box "
		inputParameter="Short Title of  Form:"& formShortTitle &"<br>Check Box : "& checkBoxDescription & "<br> Option: " & checkBoxOption 
	strStepDescription = "Verifies the Check box " & checkBoxDescription &" is selected or not "
		On Error Resume Next

		If 	formShortTitle<>" " and checkBoxDescription<> " " and checkBoxOption<>" " Then
			If  OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("description:="& checkBoxDescription).Exist(3) Then
		   Set objCheckBox=OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("description:="& checkBoxDescription)
				If OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("description:="& checkBoxDescription).GetROProperty("Enabled") Then
    					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objCheckBox,strStepDescription)
													End if
						If   OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("description:="& checkBoxDescription).IsSelected Then
							message=checkBoxDescription & " :CheckBox already selected"
				    	Else
							message="Checkbox" & checkBoxDescription &" not selected"
						End If
            
					blnExceptionFlag = Error_Listener ("VerifyCheckBOx",objCheckBox)
					If  Not blnExceptionFlag Then
						status="DONE"
						Call ReporterFunction("e-Swift_FunctionLibrary","VerifyCheckBOx","2",stepName,message)
					Else
						Flag=1
						status="FAIL"
						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
						Call ReporterFunction("e-Swift_FunctionLibrary","VerifyCheckBOx","1",stepName,message)
                    End If
                Else
					status="FAIL"
					Flag=1
					message=checkBoxDescription & " : CheckBox disabled"
					blnObjectError=True
                    Call ReporterFunction("e-Swift_FunctionLibrary","VerifyCheckBOx","1",stepName,message)
				End If
            Else
				status="FAIL"
				Flag=1
				message=checkBoxDescription & " : CheckBox not found"
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","VerifyCheckBOx","1",stepName,message)
			End If
		Else
			status="FAIL"
			Flag=1
			message="One or More Missing parameter"
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","VerifyCheckBOx","1",stepName,message)
		End If

        If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
			If Flag =1  Then
										VerifyCheckBOx = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objCheckBox,message)
				Else
										VerifyCheckBOx = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objCheckBox=Nothing
	End If 
End Function

'*******************************************************************************************************************************************************************************




''***********************************************************************************
'Name of the Function  : ValidateTabbedTextFieldValue
'Author		    :  TCS
'Date			    :   11 Nov 2014
'Description	     :  Validation function for matching expected data with runtime data in Oracle Tabbed Text Field 
'Input Parameters	     :  formShortTitle,textFieldPromptOrDescription,ExpectedData,
				'CaseSensitive: 'True' or 'False' Value for case sensitive search. Default is False
'				
'Output Parameters     :  TRUE or FALSE
'**********************************************************************************************************************************************************************
'Function    ValidateTabbedTextFieldValue(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,ExpectedData,CaseSensitive)
'**********************************************************************************************************************************************************************
Function ValidateTabbedTextFieldValue(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,ExpectedData,CaseSensitive)
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
   Dim blnObjectError
   blnObjectError=False
	stepName="Validating  Expected Value in Tabbed Text Field"
	inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex &"<br><b>Prompt Or Description of the TextField : </b>" & textFieldPromptOrDescription & "<br><b>Expected Data : </b>" & ExpectedData & "<br><b>Case Sensitive : </b>" & CaseSensitive
	strStepDescription = "Validating whether Expected Value "& ExpectedData &" Text Field Value " & textFieldPromptOrDescription&" of tabbed region " & tabbedRegionLabel
    If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescription).Exist(gObjectTimeoutLimit) Then
		Set objText = OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescription)
		If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objText,strStepDescription)
													End if
				sActualValue = OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescription).GetROProperty("value")
           If CaseSensitive  Or Ucase(CaseSensitive  = "TRUE" ) Then
		If   instr(0,sActualValue,ExpectedData)  Then
                    Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldValue","2","TextField ",ExpectedData &  ": has been successfully Validated in the "& textFieldPromptOrDescription &"Text  field")
			status="PASS"
		        message="Expected Data :  [ "&  ExpectedData  & " ] Matches with Actual  Value : [ " & sActualValue & " ] "
			'ValidateTabbedTextFieldValue = TRUE
                        blnCaptureFlag =  True

	            Else
			Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldValue","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
			status="FAIL"
		        Flag=1
		        message= " Expected Data  : [ " & ExpectedData  &" ] NOT  Matching with  Actual Value : [ " & sActualValue &" ] "
			'ValidateTabbedTextFieldValue = FALSE
		End If

		Else

		If instr(0,Ucase(sActualValue),Ucase(ExpectedData)) Then
		Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldValue","2","TextField ",ExpectedData &  ": has been successfully Validated in the Text  field")
		status="PASS"
		message="Expected Value:  [ "&  ExpectedData  & " ] Matches  with Actual  Value : [ " & sActualValue & " ] "
		'ValidateTabbedTextFieldValue = TRUE
		
	        Else
		Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldValue","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
		status="FAIL"
		Flag=1
		message= " Expected Value  :[ " & ExpectedData  &" ] NOT  Matching with  Actual Value : [ " & sActualValue &" ] "
	       ' ValidateTabbedTextFieldValue = FALSE
		
                End If

    End If
	
Else

		Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldValue","1","TextField ", " Text  Field  Not Found")
		status="FAIL"
		Flag=1
		message="Given  Text Field object Not Found"
                ValidateTabbedTextFieldValue = FALSE
	End if 
	  If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
	End If
	If Flag =1  Then
										ValidateTabbedTextFieldValue = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objText,message)
				Else
										ValidateTabbedTextFieldValue = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objText = nothing
End If 
	
End Function

'***********************************************************************************
'Name of the Function  : ValidateTextFlexField
'Author		    :  TCS
'Date			    :   1 Sep 2011
'Description	     :  Validation function for matching expected  Data with Actual Data in a Flex window Text Field
'Input Parameters	     :  flexWindowTitle,textFieldPrompt,textFieldIndex,ExpectedData,
'				
'**********************************************************************************************************************************************************************
'Function    ValidateTextFlexField(flexWindowTitle,textFieldPrompt,textFieldIndex,ExpectedData)
'**********************************************************************************************************************************************************************
Function ValidateTextFlexField(flexWindowTitle,textFieldPromptOrDescription,textFieldIndex,ExpectedData)
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		stepName="Validating  Expected Value in Text Field In Flex Window "
		inputParameter="Flex Window Title:"&flexWindowTitle &"  Name of the Oracle TextField: "&textFieldPromptOrDescription 
		strStepDescription = "Validating whether Expected Value "& ExpectedData &" Text Field Value " & textFieldPromptOrDescription&" of flex window " & flexWindowTitle
      	If  OracleFlexWindow("title:="&flexWindowTitle).OracleTextField("prompt:="&textFieldPromptOrDescription,"index:="&textFieldIndex).Exist(3) Then
				Set objFlexText =  OracleFlexWindow("title:="&flexWindowTitle).OracleTextField("prompt:="&textFieldPromptOrDescription,"index:="&textFieldIndex)
					
				Elseif  OracleFlexWindow("title:="&flexWindowTitle).OracleTextField("description:="&textFieldPromptOrDescription,"index:="&textFieldIndex).Exist(3) Then
					Set objFlexText = OracleFlexWindow("title:="&flexWindowTitle).OracleTextField("description:="&textFieldPromptOrDescription,"index:="&textFieldIndex)
					Else
					status="FAIL"
					Flag=1
                    blnObjectError=True
					message="Given Text field [ " & textFieldPromptOrDescription & " ]  not found"
					Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextForm","1",stepName,message)
				End If
			If IsObject(objFlexText) Then
				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objFlexText,strStepDescription)
													End if
					sActualValue =objFlexText.GetROProperty("value")
					If  sActualValue  = ExpectedData  Then
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFlexField","2","TextField ",ExpectedData &  ": has been successfully Validated in the "& textFieldPromptOrDescription &"Text  field")
						status="PASS"
						message="Expected Data :  [ "&  ExpectedData  & " ] : Matches with Actual  Value : [ " & sActualValue & " ] "
						blnCaptureFlag =  True
					Else
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFlexField","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
						status="FAIL"
						Flag=1
						message= " Expected Data  : [ " & ExpectedData  &" ] NOT  Matching with  Actual Value : [ " & sActualValue &" ] "
					End If
			End If
'				Else
'					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFlexField","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
'					status="FAIL"
'					Flag=1
'					message= " Expected Value  :[ " & ExpectedData  &" ] NOT  Matching with  Actual Value : [ " & sActualValue &" ] "
'				End If
		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
										ValidateTextFlexField = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objFlexText,message)
				Else
										ValidateTextFlexField = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objFlexText = nothing
			End IF
End Function
'*****************************************************'*****************************************************'***********************************************************
'End Function  ValidateTextFlexField
'***********************************************************************************'***********************************************************************************
 '***********************************************************************************
'Name of the Function  : ValidateDataInTableNotNull(formShortTitle,tableBlockName,dataRowNo,tableColumnName)
'Author		    :  TCS
'Date			    :   1 Sep 2011
'Description	     :  Function to Verify if Oracle Table colimn is NULL or Not
'Input Parameters	     :  formShortTitle,tableBlockName,tableColumnName,ExpectedData
'										:dataRowNo = enter the Row Number if row number known Else leave blank							
'Output Parameters     :  True/ False
'**********************************************************************************************************************************************************************
'Function    ValidateDataInTableNotNull(formShortTitle,tableBlockName,dataRowNo,tableColumnName)
'**********************************************************************************************************************************************************************
Function ValidateDataInTableNotNull(formShortTitle,tableBlockName,dataRowNo,tableColumnName)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		Dim blnFlagFound,blnNoRowGivenFlag  
		blnFlagFound = False
		blnNoRowGivenFlag = False
		strStepDescription = "Validating whether Data in table " & tableBlockName&" of row " &dataRowNo & "in column " &tableColumnName &" is not null "
		stepName="Search a value in Table populated with Values "
		inputParameter="Short Title of the Form:"& formShortTitle&" "&" Block Name of the Oracle table: "& tableBlockName & "Name of the column :"& tableColumnName
		On error resume next
		If OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).Exist(3) Then
			Set ObjTable = OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName)
			 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(ObjTable,strStepDescription)
													End if
			sActualValue = OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).GetFieldValue(dataRowNo,tableColumnName)
				If  sActualValue<>"" Then 
					blnFlagFound = True
				End if 
            If blnFlagFound  Then
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateDataInTableNotNull","2"," Validation in Oracel Table ", ExpectedData &  ": has been successfully Validated in the ["& descriptionOfTextField &"  ] Oracle Table ")
				status="PASS"
				message="Field value is present."
                ValidateDataInTable = True
            Else
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateDataInTableNotNull","1","Validation in Oracel Table  ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
				status="FAIL"
				Flag=1
				message="Field value is not present."
				ValidateDataInTable = False
            End If
		Else
			Call ReporterFunction("e-Swift_FunctionLibrary","ValidateDataInTableNotNull","1","Table Name "& tableBlockName,"Table in  " & formShortTitle & " Not Found")
			status="FAIL"
			Flag=1
			message="Given Table Name [ "& tableBlockName &" ] Not Found"
			blnObjectError=True
			ValidateDataInTable = False
		End if 
		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
			If Flag =1  Then
										ValidateDataInTableNotNull = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(ObjTable,message)
				Else
										ValidateDataInTableNotNull = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
			Set ObjTable = nothing
	End If
End Function

'******************************************************************************************************************************************************************************************
'End Function  ValidateDataInTableNotNull(formShortTitle,tableBlockName,dataRowNo,tableColumnName)
'******************************************************************************************************************************************************************************************
'**********************************************************************************************************************************************************************
'Name of the Function  : ValidateTextFlexFieldNotNull
'Author		    :  TCS
'Date			    :   1 Sep 2011
'Description	     :  Validation function for verifying text field value not null
'Input Parameters	     :  flexWindowTitle,textFieldPrompt,textFieldIndex
'				
'**********************************************************************************************************************************************************************
'Function ValidateTextFlexFieldNotNull(flexWindowTitle,textFieldPrompt,textFieldIndex)
'**********************************************************************************************************************************************************************
Function ValidateTextFlexFieldNotNull(flexWindowTitle,textFieldPromptOrDescription,textFieldIndex)
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		stepName="Validating  Expected Value in Text Field Not Null "
		inputParameter="Flex Window Title:"&flexWindowTitle &"  Name of the Oracle TextField: "&textFieldPromptOrDescription 
		strStepDescription = "Validating whether Text Field Value " & textFieldPromptOrDescription&" is not null of flex window " & flexWindowTitle
		If  OracleFlexWindow("title:="&flexWindowTitle).OracleTextField("prompt:="&textFieldPromptOrDescription,"index:="&textFieldIndex).Exist(3) Then
				Set objText = OracleFlexWindow("title:="&flexWindowTitle).OracleTextField("prompt:="&textFieldPromptOrDescription,"index:="&textFieldIndex)
				Elseif  OracleFlexWindow("title:="&flexWindowTitle).OracleTextField("description:="&textFieldPromptOrDescription,"index:="&textFieldIndex).Exist(3) Then
				Set objText  = OracleFlexWindow("title:="&flexWindowTitle).OracleTextField("description:="&textFieldPromptOrDescription,"index:="&textFieldIndex)
				Else
					status="FAIL"
					Flag=1
                    blnObjectError=True
					message="Given Text field [ " & textFieldPromptOrDescription & " ]  not found"
					Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextForm","1",stepName,message)
				End If
			If IsObject(objText) Then
						 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objText,strStepDescription)
													End if
					sActualValue = OracleFlexWindow("title:="&flexWindowTitle).OracleTextField("description:="&textFieldPromptOrDescription,"index:="&textFieldIndex).GetROProperty("value")
					If  sActualValue = "" Then
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFlexFieldNotNull","2","TextField ",ExpectedData &  ": has been successfully Validated in the "& textFieldPromptOrDescription &"Text  field")
						status="FAIL"
						message="Expected Data :  [ "&  ExpectedData  & " ] : Matches with Actual  Value : [ " & sActualValue & " ] "
						blnCaptureFlag =  True
					Else
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFlexFieldNotNull","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
						status="PASS"
						Flag=1
						message= " Expected Data  : [ " & ExpectedData  &" ] NOT  Matching with  Actual Value : [ " & sActualValue &" ] "
					End If
								End If
'					Else
'						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateTextFlexFieldNotNull","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
'						status="FAIL"
'						Flag=1
'						message= " Expected Value  :[ " & ExpectedData  &" ] NOT  Matching with  Actual Value : [ " & sActualValue &" ] "
'					End If

		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
			If Flag =1  Then
										ValidateTextFlexFieldNotNull = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objText,message)
				Else
										ValidateTextFlexFieldNotNull = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objText = nothing
				End If
End Function
'*****************************************************'*****************************************************'***********************************************************
'End Function  ValidateTextFlexFieldNotNull
'***********************************************************************************'***********************************************************************************


''***********************************************************************************
'Name of the Function  : ValidateTabbedTextFieldValueNotNULL
'Author		    :  TCS
'Date			    :   11 Nov 2014
'Description	     :  Validation function for matching expected data with runtime data in Oracle Tabbed Text Field 
'Input Parameters	     :  formShortTitle,textFieldPromptOrDescription,ExpectedData,
				'CaseSensitive: 'True' or 'False' Value for case sensitive search. Default is False
'				
'Output Parameters     :  TRUE or FALSE
'**********************************************************************************************************************************************************************
'Function    ValidateTabbedTextFieldValueNotNULL(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,ExpectedData,CaseSensitive)
'**********************************************************************************************************************************************************************
Function ValidateTabbedTextFieldValueNotNULL(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription)
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
   Dim blnObjectError
   blnObjectError=False
	stepName="Validating  Tabbed Text Field is not NULL"
	inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex &"<br><b>Prompt Or Description of the TextField : </b>" & textFieldPromptOrDescription
	strStepDescription = "Validating whether Text Field Value " & textFieldPromptOrDescription&" is not null of tabbed region " & tabbedRegionLabel
    If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescription).Exist(gObjectTimeoutLimit) Then
		Set objText = OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescription)
		 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
			ImagePath=CaptureScreenshot(objText,strStepDescription)
		End if
				sActualValue = OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescription).GetROProperty("value")
'           If CaseSensitive  Or Ucase(CaseSensitive  = "TRUE" ) Then
		If   sActualValue IS NOT NULL   Then
                    Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldValueNotNULL","2","TextField ",ExpectedData &  ": has been successfully Validated in the "& textFieldPromptOrDescription &"Text  field")
			status="PASS"
		        message="Text field is not null. Actual Value : [ " & sActualValue &" ]"
			'ValidateTabbedTextFieldValueNotNULL = TRUE
                        blnCaptureFlag =  True

	            Else
			Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldValuenotNULL","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
			status="FAIL"
		        Flag=1
		        message= " No data in text field "
			'ValidateTabbedTextFieldValueNotNULL = FALSE
		End If

        
Else

		Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldValueNotNULL","1","TextField ", " Text  Field  Not Found")
		status="FAIL"
		Flag=1
		message="Given  Text Field object Not Found"
              '  ValidateTabbedTextFieldValueNotNULL = FALSE
	End if 
	  If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
	End If
		If Flag =1  Then
										ValidateTabbedTextFieldValueNotNULL = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objText,message)
				Else
										ValidateTabbedTextFieldValueNotNULL = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If

				Set objText = Nothing
End If 
	
End Function

'*********************************************************************************************************************************************************************



'*****************************************************************************************************************************************************************
'Name of the Function  : ValidateTabbedTextFieldPartialValue



'Author		    :  TCS
'Date			    :   13 March 2012
'Description	     :  Validation function for matching expected Full String data with runtime data in Oracle Tabbed Text Field 
'Input Parameters	     :  formShortTitle,textFieldPromptOrDescription,ExpectedData,
				'CaseSensitive: 'True' or 'False' Value for case sensitive search. Default is False
'				
'Output Parameters     :  TRUE or FALSE
'**********************************************************************************************************************************************************************
'Function    ValidateTabbedTextFieldPartialValue(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,textFieldindex,ExpectedPartialValue)
'**********************************************************************************************************************************************************************
Function ValidateTabbedTextFieldPartialValue(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,textFieldindex,ExpectedPartialValue)
	On Error Resume Next
	If Not Environment.Value("blnFatalError") Then
   Dim blnObjectError
   blnObjectError=False
	stepName="Validating  Partial Expected Value in Tabbed Text Field "
	strStepDescription = "Validating  Partial Expected Value "& ExpectedPartialValue &" in Tabbed Text Field " & textFieldPromptOrDescription&" of tabbed region " & tabbedRegionLabel
	inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex &"<br><b>Prompt Or Description of the TextField : </b>" & textFieldPromptOrDescription & "<br><b>Expected Data : </b>" & ExpectedData
    If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" &textFieldindex).Exist(gObjectTimeoutLimit) Then
		Set objText = OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" &textFieldindex)
		 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objText,strStepDescription)
													End if
				sActualValue = OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" &textFieldindex).GetROProperty("value")
		If  Instr(1,sActualValue, ExpectedPartialValue) Then
                    Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldValue_FullStringMatch","2","TextField ",ExpectedData &  ": has been successfully Validated in the "& textFieldPromptOrDescription &"Text  field")
					status="PASS"
					message="Expected Data :  [ "&  ExpectedData  & " ] Matches with Actual  Value : [ " & sActualValue & " ] "
					'ValidateTabbedTextFieldPartialValue = TRUE
                    blnCaptureFlag =  True

	            Else
			Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldPartialValue","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
			status="FAIL"
		        Flag=1
		        message= " Expected Data  : [ " & ExpectedData  &" ] NOT  Matching with  Actual Value : [ " & sActualValue &" ] "
			'ValidateTabbedTextFieldPartialValue = FALSE
		End If	


Else

		Call ReporterFunction(strLibraryFileName,"ValidateTabbedTextFieldPartialValue","1","TextField ", " Text  Field  Not Found")
		status="FAIL"
		Flag=1
		message="Given  Text Field object Not Found"
        ' ValidateTabbedTextFieldPartialValue = FALSE
	End if 

	  If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
	End If
	If Flag =1  Then
										ValidateTabbedTextFieldPartialValue = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objText,message)
				Else
										ValidateTabbedTextFieldPartialValue = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objText = Nothing
End If 
	
End Function
'******************************************************************************************************************************************************************************************************************************


'****************************************************************************************************************************************************************
'Name of the Function   :
'														SetFocusTabbedRegionTableForSpecificValue
'Author		     					  :
'														TCS
'Date			 				     :
'														31-July-2012
'Description		          : 
'														Set Focus on a table cell with specific value
'			        
'			        
'Input Parameters	     : 
'														formShortTitle : Short Title property value of the Form,
'														tabbedRegionLabel : Label peroperty value of the tabbed region
'                                            							tabbedRegionIndex : Index of the tabbed region
'														tableBlockName : Block Name property value of the Oracle table
'														         
                           
'Output Parameters        :			

'**********************************************************************************************************************************************************************
'Function    SetFocusTabbedRegionTableForSpecificValue(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,dataColumnName,columnValue)
'**********************************************************************************************************************************************************************
Function SetFocusTabbedRegionTableForSpecificValue(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,dataColumnName,columnValue)
	If Not Environment.Value("blnFatalError") Then
    	Dim blnObjectError
		blnObjectError=False
		setMatchFlag=0
		stepName="SetFocusTabbedRegionTableForSpecificValue"
		strStepDescription  = "Sets the focus for the " & columnValue & " of data column name " & dataColumnName & " in block " & tableBlockName &" of table in tabbed region " & tabbedRegionLabel
		inputParameter = "<b>Short Title of the Form : </b>" & formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b> Block Name of the Oracle table : </b> " & tableBlockName  & "<br><b> Name of the Column : </b> " & dataColumnName
		Dim strTableFieldValue

		On Error Resume Next   

		If formShortTitle<>"" AND tabbedRegionLabel<>"" AND tabbedRegionIndex<>""  AND tableBlockName<>""  AND dataColumnName<>"" AND columnValue<>"" Then
				Set objOracleTable=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTable("block name:=" & tableBlockName)
						dataRowNo =1
						If objOracleTable.Exist(2) Then
								 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
													End if
										Do Until(Len(objOracleTable.GetFieldValue (dataRowNo,dataColumnName))=0 Or InStr(1,OracleStatusLine("index:=0").GetROProperty("message"),"You cannot create records here")<>0) 

													If objOracleTable.GetFieldValue (dataRowNo,dataColumnName)=columnValue Then
															objOracleTable.SetFocus dataRowNo,dataColumnName
															setMatchFlag=1
															Exit Do
													End If
													
													dataRowNo=dataRowNo+1

													Set Ws = CreateObject("WScript.Shell")
													Ws.SendKeys "{Down}"
													Set Ws = Nothing
										Loop
										
										blnExceptionFlag = Error_Listener ("SetFocusTabbedRegionTableForSpecificValue",objOracleTable)																														'// end
			
																			If Not blnExceptionFlag Then
                                                                                    If setMatchFlag = 0 Then
																                              status="FAIL"
																							  Flag=1
																							  blnObjectError=True
																                              message="[ " & columnValue & " ]  Not Exist in the List"
																							  Call ReporterFunction(strLibraryFileName,"SetFocusTabbedRegionTableForSpecificValue","1",stepName,message)
														                            Else
																							status="DONE"
																							message="Focus is set on the required field."
																							Call ReporterFunction("eSwift_FunctionLibrary","SetFocusTabbedRegionTableForSpecificValue","2",stepName,message)
																					End If
																			Else
																						   status="FAIL"
																							Flag=1
																							message="<br> Unexpected Error Encountered while trying to set focus   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																							Call ReporterFunction(strLibraryFileName,"SetFocusTabbedRegionTableForSpecificValue","1",stepName,message)
						
																			End If
			
						Else
											status="FAIL"
											Flag=1
											message="Oracle Table does not Exist."
											blnObjectError=True
											Call ReporterFunction("eSwift_FunctionLibrary","SetFocusTabbedRegionTableForSpecificValue","1",stepName,message)
						End If

		Else
				status="FAIL"
				Flag=1
				blnObjectError=True
				message="Insufficient Data Provided."
				Call ReporterFunction("eSwift_FunctionLibrary","SetFocusTabbedRegionTableForSpecificValue","1",stepName,message)
		End If
	 If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
	End If
			If Flag =1  Then
										SetFocusTabbedRegionTableForSpecificValue = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objOracleTable,message)
				Else
										SetFocusTabbedRegionTableForSpecificValue = dataRowNo
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
					Set objOracleTable=Nothing	
End If	
End Function
'*******************************************************************************************************************************************************************
'End Function -SetFocusTabbedRegionTableForSpecificValue
'********************************************************************************************************************************************************************


'***********************************************************************************
'Name of the Function  : ValidateInstrDataInTable
'Author		    :  TCS
'Date			    :   1 Sep 2011
'Description	     :  Function to Verify if any value is present in a Oracle Table 
'Input Parameters	     :  formShortTitle,tableBlockName,tableColumnName,ExpectedData
'										:dataRowNo = enter the Row Number if row number known Else leave blank							
'Output Parameters     :  True/ False
'**********************************************************************************************************************************************************************
'Function    ValidateInstrDataInTable(formShortTitle,tableBlockName,dataRowNo,tableColumnName,ExpectedData)
'**********************************************************************************************************************************************************************
Function ValidateInstrDataInTable(formShortTitle,tableBlockName,dataRowNo,tableColumnName,ExpectedData)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		Dim blnFlagFound,blnNoRowGivenFlag  
		blnFlagFound = False
		blnNoRowGivenFlag = False
		stepName="Search a value in Table populated with Values "
		inputParameter="Short Title of the Form:"& formShortTitle&" "&" Block Name of the Oracle table: "& tableBlockName & "Name of the column :"& tableColumnName
		strStepDescription = "Checks " &  ExpectedData & " is available in the Oracle Table " & tableBlockName & " Name of the column :"& tableColumnName & " or not "
		On error resume next
		If OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).Exist(3) Then
			Set objTable = OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName)
			If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objTable,strStepDescription)
													End if
			If  dataRowNo = ""  or isEmpty(dataRowNo)Then	'
				blnNoRowGivenFlag =true ' Flag to check if RowNumber supplied
                Set Ws = CreateObject("WScript.Shell")		' This section would be executed  if no RowNumber is supplied. this code would iterate thorugh the each row until data found inder Column
				intRow=1
				Do
					currentRowData=OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).GetFieldValue(intRow,tableColumnName)
					OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).SetFocus intRow,tableColumnName
					Ws.SendKeys "{Down}"
					Wait(2)
					intRow=intRow+1
					nextRowdata=OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).GetFieldValue(intRow,tableColumnName)
                    'Loop Until (nextRowdata = ExpectedData) Or (Not err.number =0)  
				Loop Until (currentRowData  = ExpectedData) Or (Not err.number =0)  Or (nextRowdata = currentRowData  )

				err.number =0
				If instr(nextRowdata,ExpectedData)<>0 Then
					blnFlagFound= True
					sActualValue = nextRowdata
				End If
            Else
                sActualValue = OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).GetFieldValue(dataRowNo,tableColumnName)
				If  instr(sActualValue,ExpectedData)<>0 Then 
					blnFlagFound = True
				End if 
            End If
            If blnFlagFound  Then
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateInstrDataInTable","2"," Validation in Oracel Table ", ExpectedData &  ": has been successfully Validated in the ["& descriptionOfTextField &"  ] Oracle Table ")
				status="PASS"
				message="Expected Value:  [ "&  ExpectedData  & " ] : Matches with Actual Data [ " & sActualValue &" ] "
                ValidateDataInTable = True
            Else
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateInstrDataInTable","1","Validation in Oracel Table  ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
				status="FAIL"
				Flag=1
				If blnNoRowGivenFlag  Then
					message= " Expected Value  :[ " & ExpectedData  &" ] NOT  Found in Any Row of Oracle Table : [ " &  tableBlockName &" ] "
				Else
					message= " Expected Value  :[ " & ExpectedData  &" ] NOT  Matching with  Actual Value :[  " & sActualValue &" ] in Expected Row : '"& dataRowNo 
				End If
				ValidateDataInTable = False
            End If
		Else
			Call ReporterFunction("e-Swift_FunctionLibrary","ValidateInstrDataInTable","1","Table Name "& tableBlockName,"Table in  " & formShortTitle & " Not Found")
			status="FAIL"
			Flag=1
			message="Given Table Name [ "& tableBlockName &" ] Not Found"
			blnObjectError=True
			ValidateDataInTable = False
		End if 
		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
										ValidateInstrDataInTable = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objTable,message)
				Else
										ValidateInstrDataInTable = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objTable = Nothing
	End If
End Function

'******************************************************************************************************************************************************************************************
'End Function  ValidateInstrDataInTable
'******************************************************************************************************************************************************************************************


'****************************************************************************************************************************************************************
'Name of the Function   :
'                                                        SetFocusTableForSpecificValue
'Author                                   :
'                                                        TCS
'Date                                  :
'                                                        31-July-2012
'Description                  : 
'                                                        Set Focus on a table cell with specific value
'                    
'                    
'Input Parameters         : 
'                                                        formShortTitle : Short Title property value of the Form,
'                                                        tabbedRegionLabel : Label peroperty value of the tabbed region
'                                                                        tabbedRegionIndex : Index of the tabbed region
'                                                        tableBlockName : Block Name property value of the Oracle table
'                                                                 
                           
'Output Parameters        :            

'**********************************************************************************************************************************************************************
'Function    SetFocusTableForSpecificValue(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,dataColumnName,columnValue)
'**********************************************************************************************************************************************************************
Function SetFocusTableForSpecificValue(formShortTitle,tableBlockName,dataColumnName,columnValue)
    If Not Environment.Value("blnFatalError") Then
        Dim blnObjectError
        blnObjectError=False
        setMatchFlag=0
        stepName="SetFocusTableForSpecificValue"
		strStepDescription=stepName
        inputParameter = "<b>Short Title of the Form : </b>" & formShortTitle &"<br><b> Block Name of the Oracle table : </b> " & tableBlockName  & "<br><b> Name of the Column : </b> " & dataColumnName
        Dim strTableFieldValue

        On Error Resume Next   

        If formShortTitle<>"" AND tableBlockName<>""  AND dataColumnName<>"" AND columnValue<>"" Then
                Set objOracleTable=OracleFormWindow("short title:=" & formShortTitle).OracleTable("block name:=" & tableBlockName)
                        dataRowNo =1
                        setFocusTableForSpecificValueRowNo=0
                        If objOracleTable.Exist(2) Then
							 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
													End if
                                        Do Until(Len(objOracleTable.GetFieldValue (dataRowNo,dataColumnName))=0 Or InStr(1,OracleStatusLine("index:=0").GetROProperty("message"),"You cannot create records here")<>0) 

                                                    If objOracleTable.GetFieldValue (dataRowNo,dataColumnName)=columnValue Then
                                                            objOracleTable.SetFocus dataRowNo,dataColumnName
                                                            setMatchFlag=1
                                                            setFocusTableForSpecificValueRowNo=dataRowNo
                                                            Exit Do
                                                    End If
                                                    
                                                    dataRowNo=dataRowNo+1

                                                    Set Ws = CreateObject("WScript.Shell")
                                                    Ws.SendKeys "{Down}"
                                                    Set Ws = Nothing
                                        Loop
                                        
                                        blnExceptionFlag = Error_Listener ("SetFocusTableForSpecificValue",objOracleTable)                                                                                                                        '// end
            
                                                                            If Not blnExceptionFlag Then
                                                                                    If setMatchFlag = 0 Then
                                                                                              status="FAIL"
                                                                                              Flag=1
                                                                                              blnObjectError=True
                                                                                              message="[ " & columnValue & " ]  Not Exist in the List"
                                                                                              Call ReporterFunction(strLibraryFileName,"SetFocusTableForSpecificValue","1",stepName,message)
                                                                                    Else
                                                                                            status="DONE"
                                                                                            message="Focus is set on the required field."
                                                                                            Call ReporterFunction("eSwift_FunctionLibrary","SetFocusTableForSpecificValue","2",stepName,message)
                                                                                    End If
                                                                            Else
                                                                                           status="FAIL"
                                                                                            Flag=1
                                                                                            message="<br> Unexpected Error Encountered while trying to set focus   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
                                                                                            Call ReporterFunction(strLibraryFileName,"SetFocusTableForSpecificValue","1",stepName,message)
                        
                                                                            End If
            
                        Else
                                            status="FAIL"
                                            Flag=1
                                            message="Oracle Table does not Exist."
                                            blnObjectError=True
                                            Call ReporterFunction("eSwift_FunctionLibrary","SetFocusTableForSpecificValue","1",stepName,message)
                        End If

        Else
                status="FAIL"
                Flag=1
                blnObjectError=True
                message="Insufficient Data Provided."
                Call ReporterFunction("eSwift_FunctionLibrary","SetFocusTableForSpecificValue","1",stepName,message)
        End If
     If  blnObjectError  Then
        Environment.Value("blnFatalError")=True
        Call Error_Recovery ("CloseAllForms")
    End If
	If Flag =1  Then
										SetFocusTableForSpecificValue = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objOracleTable,message)
				Else
										SetFocusTableForSpecificValue = dataRowNo
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				            Set objOracleTable=Nothing      
End If    
End Function
'*******************************************************************************************************************************************************************
'End Function -SetFocusTableForSpecificValue
'********************************************************************************************************************************************************************


'**********************************************************************************************************************************************************************
'Name of the Function   : EnterTextTableWithIndex
'Author		     					  :TCS
'Date			 				     :11/01/2015
'Description		          : Entering a field in a table
'			        
'			        
'Input Parameters	     : formShortTitle->Form window short title
'										 		 tableBlockName->blockName of the oracle table
'													tableIndex->Index of the oracle table
'													 dataRowNo->RowNumber
'														 dataColumnName->ColumnName  of the field    
'															 valueToEnter ->value which will be entered                                   
'Output Parameters        :		None
'**********************************************************************************************************************************************************************
'Function    EnterTextTableWithIndex(formShortTitle,tableBlockName,tableIndex,dataRowNo,dataColumnName,valueToEnter)
'**********************************************************************************************************************************************************************
Function EnterTextTableWithIndex(formShortTitle,tableBlockName,tableIndex,dataRowNo,dataColumnName,valueToEnter)
	Dim blnObjectError
	blnObjectError=False
	If Not Environment.Value("blnFatalError") Then
		stepName="Entering Data  under  a table column "
		inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br> <b>Block Name of Oracle table:</b> "& tableBlockName & "<br><b> Row Number: </b>" & dataRowNo &"<br> <b>Name of the column : </b>" & dataColumnName &"<br> <b>Value : </b>" & valueToEnter
		strStepDescription = stepName
        On error resume next
        If 	 formShortTitle<>"" and tableBlockName<>"" and tableIndex<>"" and dataRowNo<>"" and dataColumnName<>"" and valueToEnter <>""  Then
            If  OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName,"index:="& tableIndex).Exist(3)  Then
				Set objTable = OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName,"index:="& tableIndex)
				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
							ImagePath=CaptureScreenshot(objTable,strStepDescription)
				End if
'				If OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).IsFieldEditable(dataRowNo,dataColumnName) Then   ' Commented this validation  as it was failing  to check Accounting Allowed check box in  "Invoice and hold reason" forms
				OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName,"index:="& tableIndex).EnterField dataRowNo,dataColumnName,valueToEnter
                blnExceptionFlag = Error_Listener ("ClickButton",objTable)
				If  not blnExceptionFlag Then
					status="DONE"
					message=valueToEnter & ":  entered Under  the "& dataColumnName &" Table Column "
					Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTable","2",stepName,message)
				Else
					status="FAIL"
					Flag=1
					blnObjectError=True  '// added
					message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
					Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTable","1",stepName,message)
				End If			
			Else
				status="FAIL"
				Flag=1
				blnObjectError=True  '// added
				message="[ " & tableBlockName & " ] Table not Found"
   				Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTable","1",stepName,message)
			End If
        Else
			status="FAIL"
			Flag=1
			blnObjectError=True  '// added
			message="One or More Missing parameter"
            Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTable","1",stepName,message)
        End If
        
		If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
										EnterTextTableWithIndex = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objTable,message)
				Else
										EnterTextTableWithIndex = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
		Set objTable = Nothing
	End If 

End Function

'**********************************************************************************
'End Function - EnterTextTableWithIndex
'**********************************************************************************


'********************************************************************************************************************************************************************
'Name of the Function : ValidateDatabaseTableValue(serverName,port,serviceName,userID,password,tableColumn,SQLQuery,ExpectedData)
'Author                    			 : TCS
'Date                                 : 09/02/2015
'Description          		    : Function to verify a column in database table
'Input Parameters         : serverName = Host name  
'                                             port	: Port Number
'                                             serviceName : Instance name (eg orq1,orq2 etc)
'                                             userID = Database userid
'                                             password	: Database password
'                                             tableColumn : Column name which the user need to validate
'                                             SQLQuery = Query 
'                                             port	: Port Number

'Output Parameters    : True or False 
'**********************************************************************************************************************************************************************
'Function ValidateDatabaseTableValue(serverName,port,serviceName,userID,password,tableColumn,SQLQuery,ExpectedData)
'**********************************************************************************************************************************************************************
Function ValidateDatabaseTableValue(serverName,port,serviceName,userID,password,tableColumn,SQLQuery,ExpectedData)
	On Error Resume Next
	stepName="Validate Expected Value in Database Table"
	inputParameter="<b>Server Name : </b>"& serverName &"<br><b>Port : </b>"& port & "<br><b>Service Name : </b>" & serviceName & "<br><b>Table Column : </b>" & tableColumn
    Dim connectionString: connectionString = "DRIVER={Microsoft ODBC for Oracle}; SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST="&serverName&")(PORT="&port&"))(CONNECT_DATA=(SERVICE_NAME="&serviceName&")));Uid="&userID&";Pwd="&password&";"
	Dim connection : Set connection = CreateObject("ADODB.Connection")
	Dim ErrorFlag : ErrorFlag="False"
	Dim QueryResultSet: Set QueryResultSet = CreateObject("ADODB.Recordset") 
	QueryResultSet.CursorType = 3
	QueryResultSet.open SQLQuery,connectionString

	If Err.Number <> 0  Then
		message="An error has occured : "&Err.Description
		Err.Clear
		status="FAIL"
		Flag=1
		Call ReporterFunction("e-Swift_FunctionLibrary","ValidateDatabaseTableValue","1",stepName,message)
		If Flag =1  Then
										ValidateDatabaseTableValue = message
										blnMainFailFlag = True
										'ImagePath=CaptureScreenshot(objCheckBox,message)
                End If
			If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
		connection.Close
		Set QueryResultSet = Nothing
		Set connection = Nothing
		Exit Function
	End If

    rowCount = QueryResultSet.RecordCount
	If rowCount > 0 Then
			For rowJump = 1 to rowCount
				If UCase(QueryResultSet.Fields(0).Value)  <> UCase(ExpectedData) Then
					mismatchCount = mismatchCount+1
					mismatchRowNo = mismatchRowNo&","&rowJump
				End If
				QueryResultSet.MoveNext
			Next
	Else
			message = "No Records were retrieved"
            status="FAIL"
			Flag=1
			Call ReporterFunction("e-Swift_FunctionLibrary","ValidateDatabaseTableValue","1",stepName,message)
			If Flag =1  Then
										ValidateDatabaseTableValue = message
										blnMainFailFlag = True
										'ImagePath=CaptureScreenshot(objCheckBox,message)
                End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
			connection.Close
			Set QueryResultSet = Nothing
			Set connection = Nothing
			Exit Function
	End If

	If  mismatchCount <> 0 Then
		message = "One or more Record(s) mismatched with the Expected Data : "&ExpectedData
        status="FAIL"
		Flag=1
		Call ReporterFunction("e-Swift_FunctionLibrary","ValidateDatabaseTableValue","1",stepName,message)
	Else
		message = "All the Record(s) in the column "&tableColumn &" matched successfully with the Expected Data : "&ExpectedData
        status="DONE"
        Call ReporterFunction("e-Swift_FunctionLibrary","ValidateDatabaseTableValue","0",stepName,message)
	End If

	
	If Flag =1  Then
										ValidateDatabaseTableValue = message
										blnMainFailFlag = True
										'ImagePath=CaptureScreenshot(objCheckBox,message)
				Else
										ValidateDatabaseTableValue = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
		 
	connection.Close
	Set QueryResultSet = Nothing
	Set connection = Nothing
End Function
'**********************************************************************************************************************************************************************
'End Function ValidateDatabaseTableValue(serverName,port,serviceName,userID,password,tableColumn,SQLQuery,ExpectedData)
'***********************************************************************************'***********************************************************************************


'**********************************************************************************************************************************************************************
'Name of the Function   :  SelectCheckBoxWithDevName(formShortTitle,checkBoxDeveloperName,checkBoxOption)
'Author		     					  :TCS
'Date			 				     :17/02/2015
'Description		          : Select and unselect checkbox based on the value specified
 
'Input Parameters	     :formShortTitle->ShortTitle of the form.'
											'checkBoxDeveloperName->Developer name property of checkbox
												'checkBoxOption-> Yes/No/True /False/T/F
'                                            
'Output Parameters        :	None

'**********************************************************************************************************************************************************************
'Function     SelectCheckBoxWithDevName(formShortTitle,checkBoxDeveloperName,checkBoxOption)
'**********************************************************************************************************************************************************************
Function SelectCheckBoxWithDevName(formShortTitle,checkBoxDeveloperName,checkBoxOption)
   
    If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		stepName="Check/Uncheck Check Box "
		inputParameter="Short Title of  Form:"& formShortTitle &"<br>Check Box : "& checkBoxDeveloperName & "<br> Option: " & checkBoxOption 
		strStepDescription= stepName
		On Error Resume Next

		If 	formShortTitle<>" " and checkBoxDescription<> " " and checkBoxOption<>" " Then
			If  OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("developer name:="& checkBoxDeveloperName).Exist(3) Then
		   Set objCheckBox=OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("developer name:="& checkBoxDeveloperName)
				If OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("developer name:="& checkBoxDeveloperName).GetROProperty("Enabled") Then
					 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objCheckBox,strStepDescription)
													End if
                    If Ucase(checkBoxOption)="YES" or Ucase(checkBoxOption)="TRUE" Then
						If   OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("developer name:="& checkBoxDeveloperName).IsSelected Then
							message=checkBoxDeveloperName & " :CheckBox already selected"
						Else
							'if not already selected ,select it
							OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("developer name:="& checkBoxDeveloperName).Select
							message="Checkbox" & checkBoxDeveloperName &"selected"
						End If
                    ElseIf Ucase(checkBoxOption)="NO" or Ucase(checkBoxOption)="FALSE" Then
						'If already selected  clear /uncheck it
						If  OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("developer name:="& checkBoxDeveloperName).IsSelected Then
							OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("developer name:="& checkBoxDeveloperName).Clear
							message=checkBoxDeveloperName & " :CheckBox  unchecked"
						Else
							message=checkBoxDeveloperName & " :CheckBox already unchecked"
                        End If
					Else
						status="FAIL"
						Flag=1
						message="[ " & checkBoxOption & " ] Invalid Option."
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBoxWithDevName","1",stepName,message)
					End If
					blnExceptionFlag = Error_Listener ("SelectCheckBox",objCheckBox)
					If  Not blnExceptionFlag Then
						status="DONE"
						Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBoxWithDevName","2",stepName,message)
					Else
						Flag=1
						status="FAIL"
						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
						Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBoxWithDevName","1",stepName,message)
                    End If
                Else
					status="FAIL"
					Flag=1
					message=checkBoxDeveloperName & " : CheckBox disabled"
					blnObjectError=True
                    Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBoxWithDevName","1",stepName,message)
				End If
            Else
				status="FAIL"
				Flag=1
				message=checkBoxDeveloperName & " : CheckBox not found"
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBoxWithDevName","1",stepName,message)
			End If
		Else
			status="FAIL"
			Flag=1
			message="One or More Missing parameter"
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","SelectCheckBoxWithDevName","1",stepName,message)
		End If
        If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CONTINUE")
		End If
			If Flag =1  Then
										SelectCheckBoxWithDevName = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objCheckBox,message)
				Else
										SelectCheckBoxWithDevName = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objCheckBox=Nothing
	End If 
End Function
'**********************************************************************************************************************************************************************
'End Function -  SelectCheckBoxWithDevName(formShortTitle,checkBoxDeveloperName,checkBoxOption)
'**********************************************************************************************************************************************************************

'********************************************************************************************************************************************************************
'Name of the Function : CaptureDatabaseTableValue(serverName,port,serviceName,userID,password,tableColumn,SQLQuery)
'Author                    			 : TCS
'Date                                 : 18/02/2015
'Description          		    : Function to verify a column in database table
'Input Parameters         : serverName = Host name  
'                                             port	: Port Number
'                                             serviceName : Instance name (eg orq1,orq2 etc)
'                                             userID = Database userid
'                                             password	: Database password
'                                             tableColumn : Column name which the user need to validate
'                                             SQLQuery = Query 
'                                             port	: Port Number

'Output Parameters    : True or False 
'**********************************************************************************************************************************************************************
'Function CaptureDatabaseTableValue(serverName,port,serviceName,userID,password,tableColumn,SQLQuery)
'**********************************************************************************************************************************************************************
Function CaptureDatabaseTableValue(serverName,port,serviceName,userID,password,tableColumn,SQLQuery)
	On Error Resume Next
	stepName="Capture a value from Database Table"
	inputParameter="<b>Server Name : </b>"& serverName &"<br><b>Port : </b>"& port & "<br><b>Service Name : </b>" & serviceName & "<br><b>Table Column : </b>" & tableColumn
    Dim connectionString: connectionString = "DRIVER={Microsoft ODBC for Oracle}; SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST="&serverName&")(PORT="&port&"))(CONNECT_DATA=(SERVICE_NAME="&serviceName&")));Uid="&userID&";Pwd="&password&";"
	Dim connection : Set connection = CreateObject("ADODB.Connection")
	Dim ErrorFlag : ErrorFlag="False"
	Dim QueryResultSet: Set QueryResultSet = CreateObject("ADODB.Recordset") 
	QueryResultSet.CursorType = 3
	QueryResultSet.open SQLQuery,connectionString

	If Err.Number <> 0  Then
		message="An error has occured : "&Err.Description
		Err.Clear
		status="FAIL"
		Flag=1
		Call ReporterFunction("e-Swift_FunctionLibrary","CaptureDatabaseTableValue","1",stepName,message)
			If Flag =1  Then
										CaptureDatabaseTableValue = message
										blnMainFailFlag = True
									'	ImagePath=CaptureScreenshot(objText,message)
				End If
		If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
		connection.Close
		Set QueryResultSet = Nothing
		Set connection = Nothing
		Exit Function
	End If

    rowCount = QueryResultSet.RecordCount
	If rowCount > 0 Then
'			For rowJump = 1 to rowCount
				strCapturedValue=QueryResultSet.Fields(0).Value
				CaptureDatabaseTableValue=strCapturedValue
				outputParameter=strCapturedValue
'					mismatchCount = mismatchCount+1
'					mismatchRowNo = mismatchRowNo&","&rowJump
'				End If
'				QueryResultSet.MoveNext
'			Next
		message = "The value '"&strCapturedValue&"' is captured"
        status="DONE"
	Call ReporterFunction("e-Swift_FunctionLibrary","CaptureDatabaseTableValue","2",stepName,message)
	Else
			message = "No Records were retrieved"
            status="FAIL"
			Flag=1
			Call ReporterFunction("e-Swift_FunctionLibrary","CaptureDatabaseTableValue","1",stepName,message)
				If Flag =1  Then
										CaptureDatabaseTableValue = message
										blnMainFailFlag = True
									'	ImagePath=CaptureScreenshot(objText,message)
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
			connection.Close
			Set QueryResultSet = Nothing
			Set connection = Nothing
			Exit Function
	End If
	If Flag =1  Then
										CaptureDatabaseTableValue = message
										blnMainFailFlag = True
									'	ImagePath=CaptureScreenshot(objText,message)
				Else
										CaptureDatabaseTableValue = strCapturedValue
				End If

'	If  mismatchCount <> 0 Then
'		message = "One or more Record(s) mismatched with the Expected Data : "&ExpectedData
'        status="FAIL"
'		Flag=1
'	Else
''		message = "All the Record(s) in the column "&tableColumn &" matched successfully with the Expected Data : "&ExpectedData
''        status="DONE"
''	End If
'
'	Call ReporterFunction("e-Swift_FunctionLibrary","ValidateDatabaseTableValue","1",stepName,message)
 
	If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
	connection.Close
	Set QueryResultSet = Nothing
	Set connection = Nothing
End Function
'**********************************************************************************************************************************************************************
'End Function  CaptureDatabaseTableValue(serverName,port,serviceName,userID,password,tableColumn,SQLQuery)
'**********************************************************************************************************************************************************************

'**********************************************************************************************************************************************************************
Public  Function OpenDocument()
'   If Dialog("text:=File Download").Exist(3) Then
'	   If Dialog("text:=File Download").WinButton("text:=&Open").Exist(3) then
'			Dialog("text:=File Download").WinButton("text:=&Open").Click
'		End If
'	End If
'	wait(100)
'    Window("nativeclass:=ThunderDFrame").Close
'Browser("creationtime:=0").WinObject("nativeclass:=DirectUIHWND","regexpwndclass:=DirectUIHWND", "index:=0").Clickontext "Open"
If Browser("CreationTime:=0").Page("title:=").WebButton("name:=Return","index:=0").Exist(5) Then
	Browser("creationtime:=0").WinObject("text:=Do you want to open or save WebADI.*","nativeclass:=window","regexpwndclass:=DirectUIHWND","index:=0").highlight
	wait(1)
	OpenDocumentHWND=Browser("CreationTime:=0").Page("title:=").GetROProperty("hwnd")
	Window("hwnd:="&cstr(OpenDocumentHWND)).Click
	wait(3)	
	Set Ws1 = CreateObject("WScript.Shell")
	'Ws1.SendKeys "%"
	wait(1)
	Ws1.SendKeys "%O"
	'wait(0.5)
	'Ws1.SendKeys "%O"
	Set Ws1=Nothing
End If
End Function


'**********************************************************************************************************************************************************************

Public Function WriteDataToMSExcel(Workbookname,FieldName,IterationIndex,ColumnIndex,valueToEnter)
On Error Resume Next

   stepName="Write Data to MSExcel cell"
	inputParameter="<br><b>Row Number : </b>"& IterationIndex&"<br><b>Column Number : </b>"& ColumnIndex&"<br><b>Value to Enter : </b>"& valueToEnter
	 Dim successEntry
	 successEntry = 0
     'Set InputAppExcel = CreateObject("Excel.Application")     
 '    Set objInputWorkBook = InputAppExcel.Workbooks.Open(InputFilePath)  
  '   Set objInputSheet =  InputAppExcel.Sheets("Sheet1") 

Execute "Set InputAppExcel =GetObject(,""Excel.Application"")"
'Set InputAppExcel =GetObject(,"Excel.Application")
Set objInputWorkBook = InputAppExcel.WorkBooks(Workbookname)
Set objInputSheet = objInputWorkBook.Sheets.Item("Sheet1")

		objInputSheet.cells(Cint(IterationIndex),Cint(ColumnIndex)).value = Cstr(valueToEnter)
		If instr(0,cstr(valueToEnter),cstr(objInputSheet.cells(Cint(IterationIndex),Cint(ColumnIndex)).value))  Then
			successEntry = 1
		Else
			successEntry = 0
		End If
	If successEntry = 1 Then
		status="DONE"
		message="Value '"&valueToEnter&"' successfully entered against '"&FieldName&"' at Row '"&IterationIndex&"' and Column '"&ColumnIndex&"'"
		Call ReporterFunction("e-Swift_FunctionLibrary","WriteDataToMSExcel","2",stepName,message)
	Else
		status="FAIL"
		Flag=1
		message="Value '"&valueToEnter&"' could not be entered successfully against '"&FieldName&"' at Row '"&IterationIndex&"' and Column '"&ColumnIndex&"'"
		Call ReporterFunction("e-Swift_FunctionLibrary","WriteDataToMSExcel","1",stepName,message)
	End If
	If Flag =1  Then
										WriteDataToMSExcel = message
										blnMainFailFlag = True
										'ImagePath=CaptureScreenshot(objText,message)
				Else
										WriteDataToMSExcel = True
				End If
   'objInputWorkBook.Save
   'objInputWorkBook.Close
   Set InputAppExcel = Nothing
   Set objInputWorkBook =Nothing
   Set objInputSheet =Nothing
	If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
End Function


'**********************************************************************************************************************************************************************

'*********************************************************************************************************************************************************************
'Name of the Function
'											:	OracleAppsBrowserReset()
'Author
'											:	TCS
'Date			   				  
'											:	20.02.2015
'Description					
'											:	To Close All browsers except ALM .It can be called before starting an execution
'Input Parameters	     
'											:	None
'Output Parameters      
'											:	None
'**********************************************************************************************************************************************************************
'Function   OracleAppsBrowserReset()
'**********************************************************************************************************************************************************************
Function OracleAppsBrowserReset()
			Set obj= Description.Create()
			obj("micclass").value="Browser"
			Set childObj=Desktop.ChildObjects(obj) 
			For brsr=0 to childObj.Count-1
                browserName=childObj(brsr).getroproperty("name")
				If  ucase(browserName) <> ucase("HP Application Lifecycle Management 11.52") Then
					childObj(brsr).close
				End If
			Next
End Function
'*********************************************************************************************************************************************************************************
'End Function   OracleAppsBrowserReset()
'**********************************************************************************************************************************************************************


'**********************************************************************************************************************************************************************

Public Function ClickJavaButton(windowLabelOrTitle,frameLabelOrTitle,frameIndex,buttonLabelOrTagname,buttonIndex)
If Not Environment.Value("blnFatalError") Then
'		Dim blnObjectError
		blnObjectError=False
		startTime=Timer()
		stepName="Click Button"
		inputParameter="<b>Title of the Java Window : </b>" & windowLabelOrTitle & "<br><b>InternalFrame Title/Label : </b>" & frameLabelOrTitle & "<br><b>Button Tagname/Label : </b>" & buttonLabelOrTagname
		strStepDescription= "Click the button [" & buttonLabelOrTagname & "]"
		On Error Resume Next
		Dim objButton,intSetFlag
		intSetFlag=1

		If JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("label:="& buttonLabelOrTagname,"index:="& buttonIndex).Exist(gObjectTimeoutLimit) Then
				Set objButton = JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("label:="& buttonLabelOrTagname,"index:="& buttonIndex)
				intSetFlag=0
		ElseIf JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("tagname:="& buttonLabelOrTagname,"index:="& buttonIndex).Exist(gObjectTimeoutLimit) Then
				Set objButton = JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("tagname:="& buttonLabelOrTagname,"index:="& buttonIndex)
				intSetFlag=0
		ElseIf JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("label:="& buttonLabelOrTagname,"index:="& buttonIndex).Exist(gObjectTimeoutLimit) Then
				Set objButton =JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("label:="& buttonLabelOrTagname,"index:="& buttonIndex)
				intSetFlag=0
		ElseIf JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("tagname:="& buttonLabelOrTagname,"index:="& buttonIndex).Exist(gObjectTimeoutLimit) Then
				Set objButton =JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("tagname:="& buttonLabelOrTagname,"index:="& buttonIndex)
				intSetFlag=0
	    ElseIf JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("label:="& buttonLabelOrTagname,"index:="& buttonIndex).Exist(gObjectTimeoutLimit) Then
				Set objButton = JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("label:="& buttonLabelOrTagname,"index:="& buttonIndex)
				intSetFlag=0
		ElseIf JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("tagname:="& buttonLabelOrTagname,"index:="& buttonIndex).Exist(gObjectTimeoutLimit) Then
				Set objButton = JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("tagname:="& buttonLabelOrTagname,"index:="& buttonIndex)
				intSetFlag=0
		ElseIf JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("label:="& buttonLabelOrTagname,"index:="& buttonIndex).Exist(gObjectTimeoutLimit) Then
				Set objButton =JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("label:="& buttonLabelOrTagname,"index:="& buttonIndex)
				intSetFlag=0
		ElseIf JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("tagname:="& buttonLabelOrTagname,"index:="& buttonIndex).Exist(gObjectTimeoutLimit) Then
				Set objButton =JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaButton("tagname:="& buttonLabelOrTagname,"index:="& buttonIndex)
				intSetFlag=0
		Else
				status="FAIL"
				Flag=1
				message="[ " & buttonDescriptionOrLabelOrDeveloperName &"] Button does not Exist."
				blnObjectError=True
				Call ReporterFunction(strLibraryFileName,"ClickJavaButton","1",stepName,message)
		End If

		If intSetFlag=0 Then
				If objButton.GetROProperty("enabled") Then
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											ImagePath=CaptureScreenshot(objButton,strStepDescription)
										End if  
							objButton.Click
							If blnIgnoreError = False  Then
										blnExceptionFlag = Error_Listener ("ClickButton",objButton)
							else
										blnExceptionFlag= False
										blnIgnoreError = False
							End If
							If  Not blnExceptionFlag Then
										status="DONE"
										message="[ " & buttonDescriptionOrLabelOrDeveloperName &"] Button clicked Successfully."
										Call ReporterFunction(strLibraryFileName,"ClickJavaButton","2",stepName,message)
									 
							else
										Flag=1
										status="FAIL"
										message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
										Call ReporterFunction(strLibraryFileName,"ClickJavaButton","1",stepName,message) 
							End If     
				Else
							status="FAIL"
							Flag=1
							message="[ " & buttonDescriptionOrLabelOrDeveloperName &"] Button is Disabled."
							blnObjectError=True
							  Call ReporterFunction(strLibraryFileName,"ClickJavaButton","1",stepName,message)
				End If
		End If 
		Set objButton=Nothing
		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)
		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

		If  blnObjectError  Then
				Environment.Value("blnFatalError")=True
				Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
							ClickJavaButton = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objButton,message)
			Else
							ClickJavaButton = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
End if 
End Function

'**********************************************************************************************************************************************************************



Function ClickJavaButtonWithoutFrame(windowTitle, buttonLabel, buttonIndex)

If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False

		startTime=Timer()
		stepName="Click Button"
		inputParameter="<b>Title of the Java Window : </b>" & windowTitle & "<br><b>Button Label : </b>" & buttonLabel
		strStepDescription= "Click button [" & buttonLabel & "]"

		On Error Resume Next

		Set testObj = Description.Create()
		testObj("class description").value = "push_button"
		testObj("label").value = buttonLabel

		If JavaWindow("title:=" & windowTitle).Exist(3) Then
						Set buttonSet = JavaWindow("title:=" & windowTitle).ChildObjects(testObj)
		
						If buttonSet.Count>0 Then
											For i=0 to CInt(buttonIndex)
												Set buttonObj = buttonSet(i)
											Next
						
											xVal = buttonObj.GetROProperty("abs_x")
											yVal = buttonObj.GetROProperty("abs_y")
											
											Set mrcObj = CreateObject("Mercury.DeviceReplay")
											buttonObj.Highlight
											mrcObj.MouseClick xVal+5,yVal,LEFT_MOUSE_BUTTON
											Set mrcObj = Nothing
		
											status="DONE"
											message="[ " & buttonLabel &"] Button clicked Successfully."
											Call ReporterFunction(strLibraryFileName,"ClickJavaButtonWithoutFrame","2",stepName,message)
																							
						Else
											status="FAIL"
											Flag=1
											message="[ " & buttonLabel &"] Button does not Exist."
											blnObjectError=True
											Call ReporterFunction(strLibraryFileName,"ClickJavaButtonWithoutFrame","1",stepName,message)
		
						End If
						Set buttonSet = Nothing
		Else
				status="FAIL"
				Flag=1
				message="[ " & windowTitle &"] Window does not Exist."
				blnObjectError=True
				Call ReporterFunction(strLibraryFileName,"ClickJavaButtonWithoutFrame","1",stepName,message)

 		End If

		Set testObj = Nothing

		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If

		If Flag =1  Then
										ClickJavaButtonWithoutFrame = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objButtonLabelOrDescription,message)
		Else
										ClickJavaButtonWithoutFrame = True
		End If

		If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

End If
End Function


'**********************************************************************************************************************************************************************

Function SelectFromJavaTree(windowTitle, treeTagName, hierarchyToSelect)

   If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		startTime=Timer()
		stepName="SelectFromJavaTree"
		inputParameter="<b>Title of the Java Window : </b>" & windowTitle & "<br><b>Java Tree Name : </b>" & treeTagName
		strStepDescription= "Select From Java Tree [" & hierarchyToSelect & "]"
					If JavaWindow("title:=" & windowTitle).JavaTree("tagname:=" & treeTagName).Exist(3) Then
					
									 getParts = Split(hierarchyToSelect,";")
									  expansitionToSelect = ""
								
									For i=0 to UBound(getParts)-1
										expansitionToSelect = expansitionToSelect & getParts(i)
										JavaWindow("title:=" & windowTitle).JavaTree("tagname:=" & treeTagName).Expand expansitionToSelect
										expansitionToSelect = expansitionToSelect & ";"
									Next
									JavaWindow("title:=" & windowTitle).JavaTree("tagname:=" & treeTagName).Select hierarchyToSelect
									status="DONE"
									message="[ " & hierarchyToSelect &"] Hierarchy Selected Successfully."
									Call ReporterFunction(strLibraryFileName,"SelectFromJavaTree","2",stepName,message)
					Else
															status="FAIL"
															Flag=1
															message="[ " & treeTagName &"] Java Tree does not Exist."
															blnObjectError=True
															Call ReporterFunction(strLibraryFileName,"SelectFromJavaTree","1",stepName,message)
					End If
					If  blnObjectError  Then
						Environment.Value("blnFatalError")=True
						Call Error_Recovery ("CloseAllForms")
					End If

		If Flag =1  Then
										SelectFromJavaTree = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objButtonLabelOrDescription,message)
		Else
										SelectFromJavaTree = True
		End If

		If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
  End If

End Function

'**********************************************************************************************************************************************************************
Public Function ClickWebADIButton(pageTitle,buttonName,buttonIndex)
    BalloonTooltip.Show "e-Swift Automation","Executing Now : ClickWebADIButton"
	If Not Environment.Value("blnFatalError") Then
'		Dim blnObjectError
		blnObjectError=False
		startTime=Timer()
		stepName="Click WebADI Button :"&buttonName
		inputParameter=buttonname
		strStepDescription= "Click the button [" & buttonName & "]"
		On Error Resume Next
		If pageTitle <>"" AND buttonName <>"" AND  buttonIndex <>"" Then
			Set objWebADIButton=Window("regexpwndclass:=ThunderDFrame").Page("title:="&pageTitle).WebButton("name:="& buttonName,"index:=" & buttonIndex)
			If objWebADIButton.Exist(3) Then
				If objWebADIButton.GetROProperty("disabled")=0  Then
				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
								ImagePath=CaptureScreenshot(objWebADIButton,strStepDescription)
				End if
				
								
					objWebADIButton.Click
	
'					blnExceptionFlag = Error_Listener ("ClickButtonWeb",objWebButton)
					If  Not blnExceptionFlag Then
						status="DONE"
						message="Web Button [ "& buttonName &" ]  has been Clicked Successfully."
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickWebADIButton","2",stepName,message)

					else
						Flag=1
						status="FAIL"
						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickWebADIButton","1",stepName,message)																	
					End If     
				Else
					status="FAIL"
					Flag=1
					message="Web Button [ "& buttonName &" ]  is Disabled."
					blnObjectError=True
				  Call ReporterFunction("e-Swift_FunctionLibrary","ClickWebADIButton","1",stepName,message)
				End If

			Else
				status="FAIL"
				Flag=1
				message="Web Button [ "& buttonName &" ]  not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickWebADIButton","1",stepName,message)
			End If
			
		Set objWebButton=Nothing
		Set obj=nothing
		Set childObj=nothing
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickWebADIButton","1",stepName,message)
		End If

		endTime = Timer()
		ExeTime = FormatNumber(endTime - startTime,3)

		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
'			Call Error_Recovery ("CloseAllForms")
		End If

			If Flag =1  Then
							ClickWebADIButton = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebButton,message)
			Else
							ClickWebADIButton = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If
End Function
'*****************************************************************************************************************************
Public Function EnterTextWebADI(pageTitle,textFieldName,textFieldIndex,valueToEnter)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError, customMessage
		BalloonTooltip.Show "e-Swift Automation","Executing Now : EnterTextWebADI" 
		blnObjectError=False
		startTime=Timer()
		stepName="Enter Text in WEBADI"
		inputParameter=valueToEnter
		strStepDescription= "Enter value [" & valueToEnter & "] in text-field [ " & textFieldName &" ]" 
		On Error Resume Next
		If pageTitle<>"" AND textFieldName<>"" AND textFieldIndex<>"" Then
			Set objWEBADIWebEdit=Window("regexpwndclass:=ThunderDFrame").Page("title:="&pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex)
			If  objWEBADIWebEdit.Exist(3) Then
				If objWEBADIWebEdit.GetROProperty("visible") Then
					If objWEBADIWebEdit.GetROProperty("disabled")=0  Then
						objWEBADIWebEdit.Set valueToEnter
						status="DONE"
						message="[ " & valueToEnter &"] Entered Successfully in Textfield ["& textFieldName &"]"
	
					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
								ImagePath=CaptureScreenshot(objWebEdit,strStepDescription)
					End if 
																	

					Else
						status="FAIL"
						Flag=1
						message="[ " & textFieldName &"] is Disabled / Non Editable."
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWebADI","1",stepName,message)
					End If
				Else
					status="FAIL"
					Flag=1
					message="[ " & textFieldName &" ] is not Visible."
					blnObjectError=True
					Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWebADI","1",stepName,message)
				End If
			Else
				status="FAIL"
				Flag=1
				message="[ " & textFieldName &"] Field does not Exist."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWebADI","1",stepName,message)
			End If
			Set objWebEdit=Nothing
			Set obj=nothing
			Set childObj=nothing

		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWebADI","1",stepName,message)
		End If

		endTime = Timer()
		ExeTime = FormatNumber(endTime - startTime,3)

  		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			'Call Error_Recovery ("CloseAllForms")
			'Call Error_Recovery ("CONTINUE")
		End If
		
		If Flag =1  Then
							EnterTextWebADI = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebEdit,message)
		Else
							EnterTextWebADI = True
		End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If	
End Function

'******************************************************************************************************************************
Public Function CaptureRequestNumberFromWEBADI()
    If Not Environment.Value("blnFatalError") Then
							Dim blnObjectError:blnObjectError=False
							Dim strCapturedText
							Dim blnobjectFound  : blnobjectFound = False
							Dim objWebElement
							'startTime=Timer()
							stepName="Capture request number from WEBADI window"
							inputParameter=""
							strStepDescription= "Capture request number from WEBADI window"
							On Error Resume Next
							Set objWEBADIwebElement=Window("regexpwndclass:=ThunderDFrame").Page("title:=Upload Parameters").WebElement("html tag:=LI","index:=1")
							
							If objWEBADIwebElement.Exist(gObjectTimeoutLimit) Then
									blnobjectFound = True
							Else
									blnobjectFound=False
						 	End If
							If  blnobjectFound Then								
											If  objWEBADIwebElement.GetROProperty("visible") Then
												If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																										ImagePath=CaptureScreenshot(objWEBADIwebElement,strStepDescription)
																									End if
																	strCapturedText =	objWEBADIwebElement.GetROProperty("innertext")
																	strReturn = ExtractNumberFromString(strCapturedText ,aReturnArray)
														   			For arrayCounter = 0 to uBound(aReturnArray)
															   			If  arrayCounter= uBound(aReturnArray) Then
																   			outputParameter= outputParameter & aReturnArray(arrayCounter)
																   		else
																   			outputParameter= outputParameter & aReturnArray(arrayCounter) & ", "
															   			End If
															   		Next
																	blnExceptionFlag = Error_Listener ("CaptureRequestNumberFromWEBADI",objWebElement)
																	If Not blnExceptionFlag Then
																									status="DONE"
																									
																									message="Request number : "& outputParameter &" captured from WEBADI window"
																									Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromWEBADI","2",stepName,message)
																	Else
																								   status="FAIL"
																									Flag=1
																									message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																									Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromWEBADI","1",stepName,message)
								
																	End If
											
									'								outputParameter=strCapturedText
										Else
											            
											                      
																	status="FAIL"
																	Flag=1
																	message="Object is not Visible."
																	blnObjectError=True
																	Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromWEBADI","1",stepName,message)
											End If
		
						
            
							Else
											status="FAIL"
											Flag=1
											message="Object not found"
											 blnObjectError=True
											Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromWEBADI","1",stepName,message)
							End If
							
'							outputParameter=strCapturedText						'Setting Output Parameter
							Set objWEBADIwebElement=Nothing
							'endTime = Timer()
							'ExeTime = FormatNumber(endTime - startTime,3)
							'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
							 If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										Call Error_Recovery ("CONTINUE")
							End If

							If Flag =1  Then
									CaptureRequestNumberFromWEBADI = message
									blnMainFailFlag = True
									ImagePath=CaptureScreenshot(objWebElement,message)
							Else
									CaptureRequestNumberFromWEBADI = outputParameter
							End If
							If blnDefault_eSwiftReporting Then  
									Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
							End If
End If
End Function
'*********************************************************************************************************************************************************
Public Function ValidateWebElementTextWEBADI(pageTitle,webElementHTMLTag,webElementIndex,expectedValue)
 If Not Environment.Value("blnFatalError") Then

	startTime=Timer()
	stepName="Validate Text in WEBADI window"
	inputParameter=expectedValue
	On Error Resume Next
	If pageTitle <>"" AND webElementHTMLTag <>""  AND webElementIndex <>"" Then
				objElementWEBADI=Window("regexpwndclass:=ThunderDFrame").Page("title:="& pageTitle).WebElement("html tag:="& webElementHTMLTag,"index:="&webElementIndex)	
				If  objElementWEBADI.Exist(3) Then
						strInnerText=objElementWEBADI.GetROProperty("innertext")
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
							strStepDescription = "validating expected data ' "&expectedValue&" ' in WEBADI window"
							ImagePath=CaptureScreenshot(objElementWEBADI,strStepDescription)
						End if
						If InStr(0,strInnerText,expectedValue)  Then
							status="PASS"
							message="Expected value matches with actual value"
							Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebElementTextWEBADI","2",stepName,message)
						else
							status="FAIL"
							Flag=1
							message="Expected value does not match with actual value"
							Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebElementTextWEBADI","1",stepName,message)
						End If
				Else
						status="FAIL"
						Flag=1
						message="The Web Element does not  exist"
						Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebElementTextWEBADI","1",stepName,message)
				End If
		
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebElementTextWEBADI","1",stepName,message)
	End If
	
	
	Set objElementWEBADI=Nothing
	endTime = Timer()
	ExeTime = FormatNumber(endTime - startTime,3)
	'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
	
	If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If

	If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	If Flag =1  Then
							ValidateWebElementTextWEBADI = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(imgObject,message)
		Else
							ValidateWebElementTextWEBADI = true

		End If
End if  
End Function
'***********************************************************************************************************************************************************************
Public Function SelectRadioGroupWebWithOption(browserName,radioGroupName,optionToSelect)
If Not Environment.Value("blnFatalError") Then
			Dim blnObjectError:	   blnObjectError=False
			'startTime=Timer()
			stepName="Select Radio Group"
			inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Radio Group Name : </b>"& radioGroupName &"<br><b>Option to Select : </b>" & optionToSelect
			strStepDescription= "Select the Radio Group [" & radioGroupName & "]"
			
			On Error Resume Next
			Set obj= Description.Create()
			obj("micclass").value="Page"
            Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")
'			indexToSelect=cStr(optionToSelect-1)
			If  Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName,"index:=0").Exist(gObjectTimeoutLimit) Then
										If Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName,"index:=0").GetROProperty("disabled")=0 Then
																strAvailableOptions=Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName,"index:=0").GetROProperty("all items")
																availableOptions=Split(strAvailableOptions,";")																															
																If optionToSelect < cstr(ubound(availableOptions)+1) Then		' Check if the option exists
																						
																						Set radioObject=Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName,"index:=0")
																						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																																	ImagePath=CaptureScreenshot(radioObject,strStepDescription)
																						End if
																						Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName,"index:=0").Select availableOptions(optionToSelect)
																						blnExceptionFlag = Error_Listener ("Select Radio Button",radioObject)
																						If Not blnExceptionFlag Then
																											If Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName,"index:=0").GetROProperty("selected item index")=optionToSelect+1 Then
																																status="DONE"
																																
																																message="Radio Group Option [ " & optionToSelect & " ]  Selected"
																																Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWeb","2",stepName,message)
																											Else
																																status="FAIL"
																																Flag=1
																																message="Radio Group Option [ " & optionToSelect & " ] Failed to Select."
																																blnObjectError=True
																																Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWeb","1",stepName,message)
																											End If
																						Else
																											status="FAIL"
																											Flag=1
																											message="<br> Unexpected Error Encountered while selecting Radio Button </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																											Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWeb","1",stepName,message)
												
																						End If
																			
															Else
																						status="FAIL"
																						Flag=1
																						message="[ " & optionToSelect & " ] is an Invalid Selection."
																						blnObjectError=True
																						Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWeb","1",stepName,message)
															End If
										Else
															status="FAIL"
															Flag=1
															message="[ " & radioGroupName & " ] is Disabled."
															blnObjectError=True
															Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWeb","1",stepName,message)
										End If
						Else
										status="FAIL"
										Flag=1
										message="Web Radio Group Missing/not Matching"
										 blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWeb","1",stepName,message)
						End If

				Set obj=Nothing
				Set childObj=Nothing
				 If  blnObjectError  Then
								Environment.Value("blnFatalError")=True
								'Call Error_Recovery ("CloseAllForms")
				End If
				If Flag =1  Then
							SelectRadioGroupWeb = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(radioObject,message)
				Else
							SelectRadioGroupWeb = True
				End If
				If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
 End If
End Function
'*******************************************************************************************************************************

'*******************************************************************************************************************************


'************************************************************************************
'Name of the Function : CaptureTextWebEdit_Disabled
'Author		     					:  TCS
'Date			 				    : 25-febMAR-2013
'Description		     :  Get the value from web text boxt
'Input Parameters	     :  browserName
'										  : textFieldName
'										  :textFieldIndex
'										  									   
'Output Parameters    : textField value
'**********************************************************************************************************************************************************************
'Function    CaptureTextWebEdit_Disabled(browserName,textFieldName,textFieldIndex)
'**********************************************************************************************************************************************************************
Public Function CaptureTextWebEdit_Disabled(browserName,textFieldName,textFieldIndex)
    If Not Environment.Value("blnFatalError") Then
	Dim blnObjectError
    blnObjectError=False
	startTime=Timer()
	stepName="Capture Text in WebEdit"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Text Field Name : </b>"& textFieldName &"<br><b>Text Field Index : </b>" & textFieldIndex

	On Error Resume Next
	Dim strCapturedText
	If browserName<>"" AND textFieldName<>"" AND textFieldIndex<>"" Then

		Set obj= Description.Create()
		obj("micclass").value="Page"
        Set childObj=Browser("name:="& browserName).ChildObjects(obj)
		pageTitle=childObj(0).getroproperty("title")

		If  Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).Exist(3) Then
			If Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("visible") Then
				If Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("readonly")=0 AND Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("disabled")=1  Then
					Set ObjText = Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex)
                    If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "captures Value  text field" & "[Name:="& textFieldName & "]" 
											ImagePath=CaptureScreenshot(objText,strStepDescription)
					End if
					strCapturedText = Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("value")
					blnExceptionFlag = Error_Listener ("CaptureTextWebEdit",objWebEdit)
																														'// end
						If Not blnExceptionFlag Then
						    status="DONE"
							message="Text field value captured : " &strCapturedText
							Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit_Disabled","2",stepName,message)
						Else
							status="FAIL"
							Flag=1
							message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
							Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit_Disabled","1",stepName,message)
			
						End If
								
'								outputParameter=strCapturedText
					Else
							status="FAIL"
							Flag=1
							message="Text box is read only or disabled."
							blnObjectError=True
							Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit_Disabled","1",stepName,message)
					End If
				
				Else
						status="FAIL"
						Flag=1
						message="Text box not visible"
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit_Disabled","1",stepName,message)
				End If
            
			Else
				status="FAIL"
				Flag=1
				message="text box not found"
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit_Disabled","1",stepName,message)
			End If
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				blnObjectError=True
				all ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit_Disabled","1",stepName,message)
	End If

	outputParameter=strCapturedText						'Setting Output Parameter
	

	'endTime = Timer()
	'ExeTime = FormatNumber(endTime - startTime,3)

  'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		 If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
							CaptureTextWebEdit_Disabled = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
			Else
							CaptureTextWebEdit_Disabled=strCapturedText	
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If	
End Function


'*******************************************************************************************************************************************************************
'Name of the Function   	: SelectTabbedHierarchyList
'Author                                	:TCS
'Date                                    	:26-09-2011
'Description                         : Selects a list value from oracle list in a tabbed region
'Modification  Details		:	Updated By Avisek on 21 Feb 2013 .Added Developer Name property for List Box in the If condition
'Input Parameters      :        	formShortTitle->Short title of the oracle form
													'tabbedRegionLableName->Label of the tabbed region
													'listPromptOrDescriptionOrDeveloperName->Prompt  or Description or Developer Name property of the oracle list  (any one of them )
													'valueToSelect  ->Value which needs to be selected from the list
													'listIndex-> Index for the oracle list
'Output Parameters    :		Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************

Public Function SelectTabbedHierarchyList(formShortTitle,TopLeveltabbedRegionLabel,TopLeveltabbedRegionIndex,LowerLeveltabbedRegionLabel,LowerLeveltabbedRegionIndex,listPromptOrDescriptionOrDeveloperName,valueToSelect,listIndex)
If Not Environment.Value("blnFatalError") Then
						Dim blnObjectError:blnObjectError=False
						jobDone=0
						'startTime=timer()
						stepName="Select from List"
						inputParameter="Form window short title:"& formShortTitle &"<br> Tab Label,: "& TopLeveltabbedRegionLabel &"<br> List Prompt: "&listPromptOrDescriptionOrDeveloperName&" <br>Value:"& valueToSelect
						strStepDescription= "Select the value : [ " & valueToSelect & " ] from the TabbedList [" & listPromptOrDescriptionOrDeveloperName & "]"
						'On error resume next
				
						If  OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleList("prompt:="& listPromptOrDescriptionOrDeveloperName,"index:=" & listIndex).exist(gObjectTimeoutLimit) Then
										Set listObject= OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleList("prompt:="& listPromptOrDescriptionOrDeveloperName,"index:=" & listIndex)
						elseIf OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleList("description:="& listPromptOrDescriptionOrDeveloperName,"index:=" & listIndex).exist(gObjectTimeoutLimit) Then
										Set listObject= OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleList("description:="& listPromptOrDescriptionOrDeveloperName,"index:=" & listIndex)
						elseif OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleList("developer name:=" & listPromptOrDescriptionOrDeveloperName,"index:=" & listIndex).exist(gObjectTimeoutLimit) then
										Set listObject= OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleList("developer name:=" & listPromptOrDescriptionOrDeveloperName,"index:=" & listIndex)
						End if 
				
						If  listObject.Exist(gObjectTimeoutLimit) Then
										If listObject.GetROProperty("enabled") Then
											If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																		ImagePath=CaptureScreenshot(listObject,strStepDescription)
																	End if	
														listObject.Select valueToSelect
														If listObject.GetROProperty("selected item")=valueToSelect Then
																	jobDone=1
																	
														Else
																	status="FAIL"
																	Flag=1
																	message=valueToSelect & "Value is not present in the List"
																	Call ReporterFunction(strLibraryFileName,"SelectTabbedHierarchyList","1",stepName,message)
														End If
									   Else
														status="FAIL"
														Flag=1
														message=listPromptOrDescription & "List not enabled"
														Call ReporterFunction(strLibraryFileName,"SelectTabbedHierarchyList","1",stepName,message)
									End If
					   Else
									status="FAIL"
									Flag=1
									message=listPromptOrDescription & "Doesn't exist"
									Call ReporterFunction(strLibraryFileName,"SelectTabbedHierarchyList","1",stepName,message)
					  End If
				
						If jobDone=1 Then
										blnExceptionFlag = Error_Listener ("SelectTabbedHierarchyList",listObject)
										If Not blnExceptionFlag Then
												status="DONE"
												message="[ " & dataColumnName & " ] value captured  "
												Call ReporterFunction(strLibraryFileName,"SelectTabbedHierarchyList","2",stepName,message)	
										Else
												status="FAIL"
												Flag=1
												message="<br> Unexpected Error Encountered while fetching the Run Time Data</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
												Call ReporterFunction(strLibraryFileName,"SelectTabbedHierarchyList","1",stepName,message)
										End If
						  End If
							
					 'Else
					'endTime=timer()
					'exeTime= FormatNumber(endTime - startTime,3) 
					'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
					If  blnObjectError  Then
								Environment.Value("blnFatalError")=True
								Call Error_Recovery ("CloseAllForms")
					End If
					If Flag =1  Then
							SelectTabbedHierarchyList = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(listObject,message)
					Else
							SelectTabbedHierarchyList = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
End if 
End Function



'******************************************************************************************************************************************************************************************************************************************************
'Name of the Function   : SelectCheckboxTabbedRegionHierarchy
'Author		     					  :TCS
'Date			 				     :28.07.2011
'Description		          : Select a checkbox for a oracle tabbed region checkbox 
'Input Parameters	     :formTitle:-short title of the form window
'                                              checkboxDescription:-description property of checkbox
'                                              labelName->Label property of oracle tabbed region
'												tabbedRegionIndex->Index of the Tabbed Region
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'*******************************************************************************************************************************************************************************************************************************************************

Function  SelectCheckboxTabbedRegionHierarchy(formShortTitle,TopLeveltabbedRegionLabel,TopLeveltabbedRegionIndex,LowerLeveltabbedRegionLabel,LowerLeveltabbedRegionIndex,checkboxDescription,checkboxIndex)
   If Not Environment.Value("blnFatalError") Then
					 Dim blnObjectError:     blnObjectError=False
					 'startTime=Timer()
					 stepName="Select " & checkboxDescription &" Checkbox"
					 strStepDescription= "Select the CheckBox [" & checkboxDescription & "]"
					 inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& TopLeveltabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & TopLeveltabbedRegionIndex & "<br> <b>Description property of the Checkbox:</b> "& checkboxDescription 
					 On error resume next
					   If  OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleCheckbox("description:=" & checkboxDescription,"index:=" & checkboxIndex).Exist(gObjectTimeoutLimit)Then
										temp=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleCheckbox("description:="& checkboxDescription,"index:=" & checkboxIndex).GetRoProperty("Selected") 
										If temp <> "True" Then
													OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleCheckbox("description:="& checkboxDescription,"index:=" & checkboxIndex).Select
													Set checkboxObject=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleCheckbox("description:="& checkboxDescription,"index:=" & checkboxIndex)
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																											ImagePath=CaptureScreenshot(checkboxObject,strStepDescription)
																										End if
																		blnExceptionFlag = Error_Listener ("SelectCheckboxTabbedRegionHierarchy",checkboxObject)
																		If  not blnExceptionFlag Then
																										status="DONE"
																										
																										message="Given "& checkboxDescription & ":  Checkbox  has been selected successfully"
																										Call ReporterFunction(strLibraryFileName,"SelectCheckboxTabbedRegionHierarchy","2",stepName,message)
																		Else
																										status="FAIL"
																										Flag=1
																										blnObjectError=True  '// added
																										message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																										Call ReporterFunction(strLibraryFileName,"SelectCheckboxTabbedRegionHierarchy","1",stepName,message)
																		End If
	
										Else
																		OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleCheckbox("description:=" & checkboxDescription,"index:=" & checkboxIndex).Clear
																		Set checkboxObject=OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleCheckbox("description:="& checkboxDescription,"index:=" & checkboxIndex)
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																											ImagePath=CaptureScreenshot(checkboxObject,strStepDescription)
																										End if
																		If  not blnExceptionFlag Then
																										status="DONE"
																										
																										message="Given " & checkboxDescription & ":  Checkbox  has been cleared successfully"
																									   Call ReporterFunction(strLibraryFileName,"SelectCheckboxTabbedRegionHierarchy","2",stepName,message)
																		Else
																									  status="FAIL"
																									  Flag=1
																									  blnObjectError=True  '// added
																									  message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																									  Call ReporterFunction(strLibraryFileName,"SelectCheckboxTabbedRegionHierarchy","1",stepName,message)
																		End If
			
											
									   End If
					Else
								  
								   status="FAIL"
								   Flag=1
								   blnObjectError=True
								  message="Given "& checkboxDescription & " Checkbox object  Not Found/missing"
								  Call ReporterFunction(strLibraryFileName,"SelectCheckboxTabbedRegionHierarchy","1",stepName,message)
					End If

					'endTime=Timer()
					'ExeTime = FormatNumber(endTime - startTime,3) 
					 Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
					 If  blnObjectError  Then
								Environment.Value("blnFatalError")=True
								Call Error_Recovery ("CloseAllForms")
					 End If
					If Flag =1  Then
							SelectCheckboxTabbedRegionHierarchy = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(checkboxObject,message)
					Else
							SelectCheckboxTabbedRegionHierarchy = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
	End If
End Function





'*********************************************************************************************************************************************************************
'Name of the Function		:	EnterTextWeb_BrowserTitle(browserTitle,textFieldName,textFieldIndex,valueToEnter)
'Author									:	Ansuman
'Date                             	:	26.07.2016
'Description					Entering some text in a Text Field in Web based Oracle 
'Input Parameters	  	:	browserTitle : Title Property of the Browser
'												textFieldName : Name Property of the WebEdit Field
'												textFieldIndex : Index of the WebEdit Field													(Normally set as 0. For more than one identical object need to change accordingly.)
'												valueToEnter : Value to Enter in the Text Field
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail											:
'**********************************************************************************************************************************************************************

Public Function EnterTextWeb_BrowserTitle(browserTitle,textFieldName,textFieldIndex,valueToEnter)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError, customMessage
		BalloonTooltip.Show "e-Swift Automation","Executing Now : EnterTextWeb" 
		blnObjectError=False
		startTime=Timer()
		stepName="Enter Text"
		inputParameter="<b>Browser Title :</b>" & browserTitle &"<br><b>Text Field Name : </b>"& textFieldName &"<br><b>Text Field Index : </b>" & textFieldIndex &"<br><b>Value to Enter : </b>" & valueToEnter
		strStepDescription= "Enter value [" & valueToEnter & "] in text-field [ " & textFieldName &" ]" 
		On Error Resume Next
		If browserTitle<>"" AND textFieldName<>"" AND textFieldIndex<>"" Then
'            Set obj= Description.Create()
'			obj("micclass").value="Page"
'            Set childObj=Browser("name:="& browserName).ChildObjects(obj)
'			pageTitle=childObj(0).getroproperty("title")

			If  Browser("title:="& browserTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).Exist(3) Then
				If Browser("title:="& browserTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("visible") Then
					If Browser("title:="& browserTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("readonly")=0 AND Browser("title:="& browserTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("disabled")=0  Then
						Browser("title:="& browserTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).Set valueToEnter						
						Set objWebEdit=Browser("title:="& browserTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex)
						status="DONE"
						message="[ " & valueToEnter &"] Entered Successfully in Textfield ["& textFieldName &"]"
						Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb_BrowserTitle","2",stepName,message)
					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
								ImagePath=CaptureScreenshot(objWebEdit,strStepDescription)
					End if 
																	

					Else
						status="FAIL"
						Flag=1
						message="[ " & textFieldName &"] is Disabled / Non Editable."
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb_BrowserTitle","1",stepName,message)
					End If
				Else
					status="FAIL"
					Flag=1
					message="[ " & textFieldName &" ] is not Visible."
					blnObjectError=True
					Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb_BrowserTitle","1",stepName,message)
				End If
			Else
				status="FAIL"
				Flag=1
				message="[ " & textFieldName &"] Field does not Exist."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb_BrowserTitle","1",stepName,message)
			End If
			Set objWebEdit=Nothing
			Set obj=nothing
			Set childObj=nothing

		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb_BrowserTitle","1",stepName,message)
		End If

		endTime = Timer()
		ExeTime = FormatNumber(endTime - startTime,3)

  		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			'Call Error_Recovery ("CloseAllForms")
			'Call Error_Recovery ("CONTINUE")
		End If
		
		If Flag =1  Then
							EnterTextWeb_BrowserTitle = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebEdit,message)
		Else
							EnterTextWeb_BrowserTitle = True
		End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If	
End Function



'*********************************************************************************************************************************************************************
'Name of the Function		:	ClickButtonWeb_BrowserTitle(browserTitle,buttonName,buttonIndex)
'Author									:	Ansuman
'											:	26.07.2016
'Description                    :	Click  a button in Web based Oracle Forms
'Input Parameters        :	browserTitle : Title Property of the Browser
'											buttonName: Name Property of the WebButton
'											buttonIndex: Index of the WebButton(Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function ClickButtonWeb_BrowserTitle(browserTitle,buttonName,buttonIndex)
    BalloonTooltip.Show "e-Swift Automation","Executing Now : ClickButtonWeb"
	If Not Environment.Value("blnFatalError") Then
'		Dim blnObjectError
		blnObjectError=False
		startTime=Timer()
		stepName="Click Button"
		inputParameter="<b>Browser Title :</b>" & browserTitle &"<br><b>Button Name : </b>"& buttonName &"<br><b>Button Index : </b>" & buttonIndex
		strStepDescription= "Click the button [" & buttonName & "]"
		On Error Resume Next
		If browserTitle <>"" AND buttonName <>"" AND  buttonIndex <>"" Then
'			Set obj= Description.Create()
'			obj("micclass").value="Page"
'
'			Set childObj=Browser("name:="& browserName).ChildObjects(obj)
'			pageTitle=childObj(0).getroproperty("title")
			Set objWebButton=Browser("title:="& browserTitle).WebButton("name:="& buttonName,"index:=" & buttonIndex)
			If objWebButton.Exist(3) Then
				If objWebButton.GetROProperty("disabled")=0  Then
				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
								ImagePath=CaptureScreenshot(objWebButton,strStepDescription)
				End if
				
								
					objWebButton.Click
	
'					blnExceptionFlag = Error_Listener ("ClickButtonWeb",objWebButton)
					If  Not blnExceptionFlag Then
						status="DONE"
						message="Web Button [ "& buttonName &" ]  has been Clicked Successfully."
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWeb_BrowserTitle","2",stepName,message)

					else
						Flag=1
						status="FAIL"
						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWeb_BrowserTitle","1",stepName,message)																	
					End If     
				Else
					status="FAIL"
					Flag=1
					message="Web Button [ "& buttonName &" ]  is Disabled."
					blnObjectError=True
				  Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWeb_BrowserTitle","1",stepName,message)
				End If

			Else
				status="FAIL"
				Flag=1
				message="Web Button [ "& buttonName &" ]  not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWeb_BrowserTitle","1",stepName,message)
			End If
			
		Set objWebButton=Nothing
		Set obj=nothing
		Set childObj=nothing
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWeb_BrowserTitle","1",stepName,message)
		End If

		endTime = Timer()
		ExeTime = FormatNumber(endTime - startTime,3)

		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
'			Call Error_Recovery ("CloseAllForms")
		End If

			If Flag =1  Then
							ClickButtonWeb_BrowserTitle = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebButton,message)
			Else
							ClickButtonWeb_BrowserTitle = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If
End Function



'*********************************************************************************************************************************************************************
'Name of the Function		:	SelectListWeb_BrowserTitle(browserTitle,listNameOrHtmlId,listIndex,valueToSelect)
'Author									:	TCS
'Date									:	27.07.2016
'Description					:	Selecting an item from a List  in Web Forms
'Input Parameters		:	browserTitle : Title Property of the Browser
'												listNameOrHtmlId : Name Or Html Id Property of the WebList Field(Provide which one is available. Can provide either if both are present.)
'												listIndex : Index Property of the List	(Normally set as 0. For more than one identical object need to change accordingly.)
'												valueToSelect : Value to be Selected
'Output Parameters      Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function SelectListWeb_BrowserTitle(browserTitle,listNameOrHtmlId,listIndex,valueToSelect)
     If Not Environment.Value("blnFatalError") Then
							Dim blnObjectError:    blnObjectError=False
							'startTime=Timer()
							stepName="Select from List"
							strStepDescription= "Select [ " & valueToSelect & " ] from WebList [ " & listNameOrHtmlId & " ]"
							inputParameter="<b>Browser Title :</b>" & browserTitle &"<br><b>List Name or Html Id : </b>"& listNameOrHtmlId &"<br><b>Value to Select : </b>" & valueToSelect
							intSetFlag=1
							 On Error Resume Next
							'pageTitle= browserName
							 If Browser("title:="& browserTitle).WebList("html id:="& listNameOrHtmlId,"index:=" & listIndex).Exist(gObjectTimeoutLimit+5) Then	'Check Field for Description
										Set objWebList=Browser("title:="& browserTitle).WebList("html id:="& listNameOrHtmlId,"index:=" & listIndex)
										intSetFlag=0
							 ElseIf Browser("title:="& browserTitle).WebList("name:="& listNameOrHtmlId,"index:=" & listIndex).Exist(gObjectTimeoutLimit+4)  Then	'Check Field for Prompt
										Set objWebList=Browser("title:="& browserTitle).WebList("name:="& listNameOrHtmlId,"index:=" & listIndex)
										intSetFlag=0
							 Else
										status="FAIL"
										Flag=1
										message="Web List Missing/not Matching"
										blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"SelectListWeb_BrowserTitle","1",stepName,message)
							 End If

							If intSetFlag=0 Then
												If objWebList.GetROProperty("disabled")=0 Then
																strListContent=objWebList.GetROProperty("all items")
																If InStr(1,strListContent,valueToSelect)<>0 Then		' Check in List if the value exists
																				
																				objWebList.Select valueToSelect
																				
																				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																					ImagePath=CaptureScreenshot(objWebList,strStepDescription)
																				End if
																				blnExceptionFlag = Error_Listener ("SelectListWeb_BrowserTitle",objWebList)
							
																				If  Not blnExceptionFlag Then
																									status="DONE"
																									message="Value [ " & valueToSelect & " ] Selected from the List"
																									Call ReporterFunction(strLibraryFileName,"SelectListWeb_BrowserTitle","2",stepName,message)
																				else
																								Flag=1
																								status="FAIL"
																								message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																								Call ReporterFunction(strLibraryFileName,"SelectListWeb_BrowserTitle","1",stepName,message)																	
																				End If															
																Else
																				status="FAIL"
																				Flag=1
																				message="[ " & valueToSelect & " ] is an Invalid Selection."
																				blnObjectError=True
																				Call ReporterFunction(strLibraryFileName,"SelectListWeb_BrowserTitle","1",stepName,message)
																End If
												Else
																	status="FAIL"
																	Flag=1
																	message="[ " & listNameOrHtmlId & " ] is Disabled."
																	Call ReporterFunction(strLibraryFileName,"SelectListWeb_BrowserTitle","1",stepName,message)
												End If
								End If
								Set objWebList=Nothing
								Set obj=Nothing
								Set childObj=Nothing

								If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										'Call Error_Recovery ("CloseAllForms")
								End If
								If Flag =1  Then
										SelectListWeb_BrowserTitle = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objWebList,message)
								Else
										SelectListWeb_BrowserTitle = True
								End If
								If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
								End If

	End If
End Function



'*********************************************************************************************************************************************************************
'Name of the Function		:	UpdateTextWeb(browserName,textFieldName,textFieldIndex,valueToEnter)
'Author									:	Arnab
'Date                             	:	26.09.2011
'Description					Updating some text in a Text Field in Web based Oracle 
'Input Parameters	  	:	browserName : Name Property of the Browser
'												textFieldName : Name Property of the WebEdit Field
'												textFieldIndex : Index of the WebEdit Field													(Normally set as 0. For more than one identical object need to change accordingly.)
'												valueToEnter : Value to Enter in the Text Field
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail											:
'**********************************************************************************************************************************************************************

Public Function UpdateTextWeb(browserName,textFieldName,textFieldIndex,valueToEnter)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError, customMessage
		BalloonTooltip.Show "e-Swift Automation","Executing Now : UpdateTextWeb" 
		blnObjectError=False
		startTime=Timer()
		stepName="Update Text"
		inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Text Field Name : </b>"& textFieldName &"<br><b>Text Field Index : </b>" & textFieldIndex &"<br><b>Value to Enter : </b>" & valueToEnter
		strStepDescription= "Update value [" & valueToEnter & "] in text-field [ " & textFieldName &" ]" 
		On Error Resume Next
		
		' Deleting the existing value of the textbox if valueToEnter = "$"
		If valueToEnter = "$" Then
			Call EnterTextWeb(browserName,textFieldName,textFieldIndex,"")
			
		ElseIf valueToEnter <> "" Then
			Call EnterTextWeb(browserName,textFieldName,textFieldIndex,valueToEnter)
'			If instr(textFieldName,"LOV") <> 0 Then
				If Browser("name:=Search and Select List of Values").Exist(10) Then
	 				Call ClickImageWeb("Search and Select List of Values","Quick Select",0)
	 			End If
'			End If
			
		' Not updating the existing value of the Textbox if valueToEnter is NULL
		ElseIf cstr(valueToEnter) = "" Then
			
			
		Else 
			status="FAIL"
			Flag=1
			message="[" & valueToEnter &"] is Invalid."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","UpdateTextWeb","1",stepName,message)
		End If
		
		If Flag =1  Then
			UpdateTextWeb = message
			blnMainFailFlag = True
		End If
	End if
		
	
End Function


'*********************************************************************************************************************************************************************
'Name of the Function		:	UpdateListWeb(browserName,listNameOrHtmlId,listIndex,valueToSelect)
'Author									:	Arnab
'Date                             	:	26.09.2011
'Description			:		Updating some text in a Text Field in Web based Oracle 
'Input Parameters	  	:	browserName : Name Property of the Browser
'												listNameOrHtmlId : Name Property of the WebList
'												listIndex : Index of the WebList												(Normally set as 0. For more than one identical object need to change accordingly.)
'												valueToSelect : Value to select in list
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail											:
'**********************************************************************************************************************************************************************

Public Function UpdateListWeb(browserName,listNameOrHtmlId,listIndex,valueToSelect)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError, customMessage
		BalloonTooltip.Show "e-Swift Automation","Executing Now : UpdateListWeb" 
		blnObjectError=False
		startTime=Timer()
		stepName="Update List"
		inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>List Name or Html Id : </b>"& listNameOrHtmlId &"<br><b>Value to Select : </b>" & valueToSelect
		strStepDescription= "Update value [" & valueToSelect & "] in List [ " & listNameOrHtmlId &" ]"
		On Error Resume Next
		
		' Deleting the existing value of the list if valueToSelect = "$"
		If valueToSelect = "$" Then
			Call SelectListWeb(browserName,listNameOrHtmlId,listIndex,"")
			
		ElseIf valueToSelect <> "" Then
			Call SelectListWeb(browserName,listNameOrHtmlId,listIndex,valueToSelect)
			
		' Not updating the existing value of the list if valueToSelect is NULL
		ElseIf cstr(valueToSelect) = "" Then
		
			
		Else 
			status="FAIL"
			Flag=1
			message="[" & valueToSelect &"] is Invalid."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","UpdateListWeb","1",stepName,message)
		End If
		
		If Flag =1  Then
			UpdateListWeb = message
			blnMainFailFlag = True
		End If
	End if
		
	
End Function



'*********************************************************************************************************************************************************************
'Name of the Function	:	UpdateCheckBoxWeb(browserName,checkBoxName,checkBoxOption)
'Author								:TCS
'Date			   				  	:	27.09.2011
'Description					:	Checking / Unchecking Checkbox in Web Forms
'Input Parameters	     :	browserName : Name Property of the Browser
'											checkBoxName : Name Property of the WebCheckBox Field
'											checkBoxOption : Checking : ON/True
'											Unchecking : OFF/FALSE
'Output Parameters      "Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function UpdateCheckBoxWeb(browserName,checkBoxName,checkBoxOption)
    If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError:   blnObjectError=False
				'startTime=Timer()
				stepName="Select CheckBox"
				strStepDescription= "Select the CheckBox [" & checkBoxName & "]"
				inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Check Box Name : </b>"& checkBoxName &"<br><b>Check Box Option : </b>" & checkBoxOption
				On Error Resume Next
				
				If checkBoxOption <> "" Then
					Call SelectCheckBoxWeb(browserName,checkBoxName,checkBoxOption)
					
				' Not updating the existing selection of the checkbox if checkBoxOption is NULL
				Else 
					wait 2
				End If
				
	End If
End function


'*********************************************************************************************************************************************************************



Public Function GetEmptyRowNumber(browserName,textboxNameOrHtmlId)

For indexNumber = 0 To 10
	If Browser("name:=" & browserName).Page("title:=" & browserName).WebEdit("name:=" & textboxNameOrHtmlId, "index:=" & indexNumber).Exist(5) Then
		textboxValue = Browser("name:=" & browserName).Page("title:=" & browserName).WebEdit("name:=" & textboxNameOrHtmlId, "index:=" & indexNumber).GetROProperty("value")
		If cstr(textboxValue) = "" Then
			GetEmptyRowNumber = indexNumber
			Exit for 
		End If
	ElseIf Browser("name:=" & browserName).Page("title:=" & browserName).WebEdit("html id:=" & textboxNameOrHtmlId, "index:=" & indexNumber).Exist(5) Then 
		textboxValue = Browser("name:=" & browserName).Page("title:=" & browserName).WebEdit("html id:=" & textboxNameOrHtmlId, "index:=" & indexNumber).GetROProperty("value")
		If cstr(textboxValue) = "" Then
			GetEmptyRowNumber = indexNumber
			Exit for 
		End If
	End If
Next

End Function 

'*********************************************************************************************************************************************************************


Public Function ValidateWebelementTable(browserName,tableName,tableFieldName,tableFieldValue)
If Not Environment.Value("blnFatalError") Then

'	startTime=Timer()
	stepName="Validate Text WebElement in Table"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Table Name : </b>"& tableName &"<br><b>Field Name : </b>" & tableFieldName &"<br><b>Value : </b>" & tableFieldValue
	On Error Resume Next
	If browserName <>"" AND tableName <>""  AND tableFieldName <>"" Then 
			Set obj= Description.Create()
			obj("micclass").value="Page"
					Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).GetROProperty("title")
			If Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("column names:="& tableName,"index:=0").Exist(5) Then
				Set objElement = Browser("name:="& browserName).Page("title:="& pageTitle).WebTable("column names:="& tableName,"index:=0")
				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
					strStepDescription = "validating webelement in table" & "[TableName:="& tableName & ",FieldName:=" & tableFieldName & "]" 
					ImagePath=CaptureScreenshot(objElement,strStepDescription)
				End if
				stringToValidate= trim(tableFieldName) & trim(tableFieldValue)
				if instr(objElement.GetROProperty("innertext"),stringToValidate) <> 0 Then
					status="PASS"
					message="The field value '"&tableFieldValue&"' exists"
					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebelementTable","2",stepName,message)
				Else
					status="FAIL"
					Flag=1
					message="The field value '"&tableFieldValue&"'does not  exist"
					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebelementTable","1",stepName,message)
				End If
			Else 
				status="FAIL"
				Flag=1
				message="Table Name '"& tableName &"' doesnt exist."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebelementTable","1",stepName,message)
			End If
	Else 
		status="FAIL"
		Flag=1
		message="Insufficient Data Provided."
		blnObjectError=True
		Call ReporterFunction("e-Swift_FunctionLibrary","ValidateWebelementTable","1",stepName,message)
	End if
	Set objElement=Nothing
	'endTime = Timer()
	'ExeTime = FormatNumber(endTime - startTime,3)
	'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
	
	If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
	End If

	If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
	End If
	If Flag =1  Then
		ValidateWebelementTable = message
		blnMainFailFlag = True
		'ImagePath=CaptureScreenshot(imgObject,message)
	Else
		ValidateWebelementTable = true

	End If
End if  
							
End Function


'*********************************************************************************************************************************************************************



Public Function ValidateSuccessTextWeb(browserName,webEditHTMLId,webEditIndex)
	startTime=Timer()
	stepName="Validate Success message Text in WebEdit"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Web Edit HTML Id : </b>" & webEditHTMLId 
	On Error Resume Next
	If browserName <>"" AND webEditHTMLId <>"" Then
					Set obj= Description.Create()
					obj("micclass").value="Page"
            		Set childObj=Browser("name:="& browserName).ChildObjects(obj)
					pageTitle=childObj(0).GetROProperty("title")

				If  Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("html id:="& webEditHTMLId,"index:="& webEditIndex).Exist(3) Then
					Set objText=Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("html id:="& webEditHTMLId,"index:="& webEditIndex)
                    If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "Validating success message in text field"
											ImagePath=CaptureScreenshot(objText,strStepDescription)
										End if

					capturedMessage = UCase(Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("html id:="& webEditHTMLId,"index:="& webEditIndex).getROProperty("value"))
					If instr(capturedMessage,"ERROR") <> 0 Then
							status="FAIL"
							Flag=1
							message="Validation not successful."
							Call ReporterFunction("e-Swift_FunctionLibrary","ValidateSuccessTextWeb","1",stepName,message)

					Else
							status="DONE"
							message="Validation Successful."
							Call ReporterFunction("e-Swift_FunctionLibrary","ValidateSuccessTextWeb","2",stepName,message)
					End If
				Else
					status="FAIL"
					Flag=1
					message="The text field does not exist."
					Call ReporterFunction("e-Swift_FunctionLibrary","ValidateSuccessTextWeb","1",stepName,message)
				End If

	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ValidateSuccessTextWeb","1",stepName,message)
	End If
	'ValidateTextWebElement=strCapturedText			'Returning the Value
	'outputParameter=strCapturedText						'Setting Output Parameter

	Set objText=Nothing
	'endTime = Timer()
	'ExeTime = FormatNumber(endTime - startTime,3)

  'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
				If  blnObjectError  Then 
                        Environment.Value("blnFatalError")=True 
                        Call Error_Recovery ("CloseAllForms") 
                End If
				If Flag =1  Then
							ValidateSuccessTextWeb = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
				Else
							ValidateSuccessTextWeb = True
				End If
				If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
End Function

'*********************************************************************************************************************************************************************




'*********************************************************************************************************************************************************************
'Name of the Function		:	UpdateDataToMSExcel(Workbookname,FieldName,IterationIndex,ColumnIndex,valueToEnter)
'Author									:	TCS
'Date                             	:	26.09.2016
'Description					Updating some text in a Text Field in Web based Oracle 
'Input Parameters	  	:	Workbookname : Name of the MSExcel
'												FieldName : Name the coloumn where value to be entered
'												IterationIndex : Row number in which value to be entered												(Normally set as 0. For more than one identical object need to change accordingly.)
'												ColumnIndex : Coloumn number in which value to be entered
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail											:
'**********************************************************************************************************************************************************************

Public Function UpdateDataToMSExcel(Workbookname,FieldName,IterationIndex,ColumnIndex,valueToEnter)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError, customMessage
		BalloonTooltip.Show "e-Swift Automation","Executing Now : UpdateDataToMSExcel" 
		blnObjectError=False
		startTime=Timer()
		stepName="Update Data in MSExcel cell"
		inputParameter="<br><b>Row Number : </b>"& IterationIndex&"<br><b>Column Number : </b>"& ColumnIndex&"<br><b>Value to Enter : </b>"& valueToEnter
		strStepDescription= "Update value [" & valueToEnter & "] in MSExcel-field [ " & FieldName &" ]" 
		On Error Resume Next

		' Deleting the existing value of the textbox if valueToEnter = "$"
		If valueToEnter = "$" Then
			Call WriteDataToMSExcel(Workbookname,FieldName,IterationIndex,ColumnIndex,"")

		ElseIf valueToEnter <> "" Then
			Call WriteDataToMSExcel(Workbookname,FieldName,IterationIndex,ColumnIndex,valueToEnter)

		' Not updating the existing value of the Textbox if valueToEnter is NULL
		ElseIf cstr(valueToEnter) = "" Then
			

		Else 
			status="FAIL"
			Flag=1
			message="[" & valueToEnter &"] is Invalid."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","UpdateDataToMSExcel","1",stepName,message)
		End If

		If Flag =1  Then
			UpdateDataToMSExcel = message
			blnMainFailFlag = True
		End If
	End if


End Function 


'************************************************************************************
'Name of the Function : CaptureWebListSelection
'Author		     					:  TCS
'Date			 				    : 27-Sep-2016
'Description		     :  Get the value from web list
'Input Parameters	     :  browserName
'										  : listName
'										  :listIndex
'										  									   
'Output Parameters    : List selected value
'**********************************************************************************************************************************************************************
'Function    CaptureWebListSelection(browserName,listName,listIndex)
'**********************************************************************************************************************************************************************
Public Function CaptureWebListSelection(browserName,listName,listIndex)
    If Not Environment.Value("blnFatalError") Then
	Dim blnObjectError
    blnObjectError=False
	startTime=Timer()
	stepName="Capture selection in WebList"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>list Name : </b>"& listName &"<br><b>list Index : </b>" & listIndex

	On Error Resume Next
	Dim strCapturedText
	If browserName<>"" AND listName<>"" AND listIndex<>"" Then

		Set obj= Description.Create()
		obj("micclass").value="Page"
        Set childObj=Browser("name:="& browserName).ChildObjects(obj)
		pageTitle=childObj(0).getroproperty("title")

		If  Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listName,"index:=" & listIndex).Exist(3) Then
			If Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listName,"index:=" & listIndex).GetROProperty("visible") Then
				Set ObjList = Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listName,"index:=" & listIndex)
				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
					strStepDescription = "capture Value web list" & "[Name:="& listName & "]" 
					ImagePath=CaptureScreenshot(objText,strStepDescription)
				End if
					strCapturedSelection = Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listName,"index:=" & listIndex).GetROProperty("value")
					blnExceptionFlag = Error_Listener ("CaptureWebListSelection",objWebList)
				If Not blnExceptionFlag Then
				    status="DONE"
					message="List selection captured : " &strCapturedSelection
					Call ReporterFunction("e-Swift_FunctionLibrary","CaptureWebListSelection","2",stepName,message)
				Else
					status="FAIL"
					Flag=1
					message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
					Call ReporterFunction("e-Swift_FunctionLibrary","CaptureWebListSelection","1",stepName,message)
				End If
				outputParameter=strCapturedSelection
			Else
				status="FAIL"
				Flag=1
				message="Web List not visible"
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","CaptureWebListSelection","1",stepName,message)
			End If

			Else
				status="FAIL"
				Flag=1
				message="Web list not found"
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","CaptureWebListSelection","1",stepName,message)
			End If
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				blnObjectError=True
				all ReporterFunction("e-Swift_FunctionLibrary","CaptureWebListSelection","1",stepName,message)
	End If

	outputParameter=strCapturedText						'Setting Output Parameter

	If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
							CaptureWebListSelection = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
			Else
							CaptureWebListSelection=strCapturedSelection	
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If	
End Function 



'**********************************************************************************************************************************************************************

Function CloseWebAdiWindowMS2016()
   On Error Resume Next
   If  Window("nativeclass:=.*ThunderDFrame.*").Exist(5)Then
'		Window("nativeclass:=.*ThunderDFrame.*").Close
'	   	Dim objShell
'		Set objShell = CreateObject("WScript.Shell")
'		wait(2)
'		Window("nativeclass:=ThunderDFrame").Activate
'		wait(2)
'		objShell.SendKeys "%C"

	set parentexcelwindow = Window("text:=Excel.*","regexpwndtitle:=Excel","regexpwndclass:=XLMAIN").Window("regexpwndtitle:=Download","regexpwndclass:=ThunderDFrame","is owned window:=True")
	parentexcelwindow.Page("title:=Download").WebButton("type:=button","name:=Close","html tag:=BUTTON","index:=0").click


   End If

End Function


'**********************************************************************************************************************************************************************
'Name of the Function  : ValidateDataInTableColumn
'Author		    :  TCS
'Date			    :   1 Sep 2011
'Description	     :  Function to Verify if any value is present in a Oracle Table Column
'Input Parameters	      :  formShortTitle,tableBlockName,tableColumnName,ExpectedData
'Output Parameters     :  True/ False
'**********************************************************************************************************************************************************************

Function ValidateDataInTableColumn(formShortTitle,tableBlockName,tableColumnName,ExpectedData)
	 If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError:   blnObjectError=False
				Dim blnFlagFound,blnNoRowGivenFlag  
				blnFlagFound = False
				blnNoRowGivenFlag = False
				blnCaptureFlag = True
				'startTime=timer()
				stepName="Search a value in Table Column populated with Values "
				inputParameter="Short Title of the Form:"& formShortTitle&" "&" Block Name of the Oracle table: "& tableBlockName & "Name of the column :"& tableColumnName
				strStepDescription= "Validate the data [ " & ExpectedData & " in the table [ " & buttonLabelOrDescription & " ]"
				On error resume next
				If OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit) Then
				   Set objData= OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName)
				   If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
						ImagePath=CaptureScreenshot(objData,strStepDescription)
					End if
					numberOfRows = objData.GetROProperty("total rows")
					For rowNumber = 1 To numberOfRows
						OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).SetFocus rowNumber,tableColumnName
						currentRowData=OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).GetFieldValue(rowNumber,tableColumnName)
						If currentRowData = ExpectedData Then
							sActualValue = currentRowData
							blnFlagFound = True
							Exit For	
						End If
					Next

					If blnFlagFound  Then
						Call ReporterFunction(strLibraryFileName,"ValidateDataInTableColumn","2"," Validation in Oracel Table ", ExpectedData &  ": has been successfully Validated in the ["& tableBlockName &"  ] Oracle Table ")
						status="PASS"
						message="Expected Value:  [ "&  ExpectedData  & " ] : Matches with Actual Data [ " & sActualValue &" ] "
                        ValidateDataInTableColumn = True
					Else
						Call ReporterFunction(strLibraryFileName,"ValidateDataInTableColumn","1","Validation in Oracel Table  ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
						status="FAIL"
						Flag=1
						message= " Expected Value  :[ " & ExpectedData  &" ] NOT  Found in Any Row of Oracle Table : [ " &  tableBlockName &" ] "
						ValidateDataInTableColumn = False

					End If
				Else
					Call ReporterFunction(strLibraryFileName,"ValidateDataInTableColumn","1","Table Name "& tableBlockName,"Table in  " & formShortTitle & " Not Found")
					status="FAIL"
					Flag=1
					message="Given Table Name [ "& tableBlockName &" ] Not Found"
					blnObjectError=True
					ValidateDataInTable = False
				End if 

		Set objData= Nothing
		'endTime=timer()
		'exeTime=FormatNumber(endTime - startTime,3) 
		'Call  UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
		 If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If

		If Flag =1  Then
			ValidateDataInTableColumn = message
			blnMainFailFlag = True
			ImagePath=CaptureScreenshot(objData,message)
		Else
			ValidateDataInTableColumn = True
		End If
		If blnDefault_eSwiftReporting Then  
				Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

	End If


End Function

'************************************************************************************
'Name of the Function : CaptureTextWebEdit_DisabledNotVisible
'Author		     					:  TCS
'Date			 				    : 25-febMAR-2013
'Description		     :  Get the value from web text boxt
'Input Parameters	     :  browserName
'										  : textFieldName
'										  :textFieldIndex
'										  									   
'Output Parameters    : textField value
'**********************************************************************************************************************************************************************
'Function    CaptureTextWebEdit_Disabled(browserName,textFieldName,textFieldIndex)
'**********************************************************************************************************************************************************************
Public Function CaptureTextWebEdit_DisabledNotVisible(browserName,textFieldName,textFieldIndex)
    If Not Environment.Value("blnFatalError") Then
	Dim blnObjectError
    blnObjectError=False
	startTime=Timer()
	stepName="Capture Text in WebEdit"
	inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Text Field Name : </b>"& textFieldName &"<br><b>Text Field Index : </b>" & textFieldIndex

	On Error Resume Next
	Dim strCapturedText
	If browserName<>"" AND textFieldName<>"" AND textFieldIndex<>"" Then

		Set obj= Description.Create()
		obj("micclass").value="Page"
        Set childObj=Browser("name:="& browserName).ChildObjects(obj)
		pageTitle=childObj(0).getroproperty("title")

		If  Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).Exist(3) Then
			If Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("visible")=False  Then
				If Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("readonly")=0 AND Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("disabled")=1  Then
					Set ObjText = Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex)
                    If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											strStepDescription = "captures Value  text field" & "[Name:="& textFieldName & "]" 
											ImagePath=CaptureScreenshot(objText,strStepDescription)
					End if
					strCapturedText = Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("value")
					blnExceptionFlag = Error_Listener ("CaptureTextWebEdit",objWebEdit)
																														'// end
						If Not blnExceptionFlag Then
						    status="DONE"
							message="Text field value captured : " &strCapturedText
							Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit_DisabledNotVisible","2",stepName,message)
						Else
							status="FAIL"
							Flag=1
							message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
							Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit_DisabledNotVisible","1",stepName,message)
			
						End If
								
'								outputParameter=strCapturedText
					Else
							status="FAIL"
							Flag=1
							message="Text box is not disabled or not read only."
							blnObjectError=True
							Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit_DisabledNotVisible","1",stepName,message)
					End If
				
				Else
						status="FAIL"
						Flag=1
						message="Text box is visible"
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit_DisabledNotVisible","1",stepName,message)
				End If
            
			Else
				status="FAIL"
				Flag=1
				message="text box not found"
				 blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit_DisabledNotVisible","1",stepName,message)
			End If
	Else
				status="FAIL"
				Flag=1
				message="Insufficient Data Provided."
				blnObjectError=True
				all ReporterFunction("e-Swift_FunctionLibrary","CaptureTextWebEdit_DisabledNotVisible","1",stepName,message)
	End If

	outputParameter=strCapturedText						'Setting Output Parameter
	

	'endTime = Timer()
	'ExeTime = FormatNumber(endTime - startTime,3)

  'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
		 If  blnObjectError  Then
		Environment.Value("blnFatalError")=True
		Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
							CaptureTextWebEdit_DisabledNotVisible = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
			Else
							CaptureTextWebEdit_DisabledNotVisible=strCapturedText	
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If	
End Function


'**********************************************************************************************************************************************************************

'**********************************************************************************
'Name of the Function   : VerifyTextBoxEditableOrNot
'Author		     					  :TCS
'Date			 				     :26/08/2014
'Description		          : Check whether the textbox is enable or disable
'			        
'			        
'Input Parameters	     :formShortTitle->ShortTitle of the form.'
							'textBoxDescription->description property of textbox
							'textBoxIndex-> index of the textbox
'                                            
'Output Parameters        :	None

'**********************************************************************************************************************************************************************
'Function    VerifyTextBoxEditableOrNot(formShortTitle,textBoxDescription,textBoxIndex)
'**********************************************************************************************************************************************************************Function VerifyCheckBOx(formShortTitle,checkBoxDescription,checkBoxOption)
Public Function VerifyTextBoxEditableOrNot(formShortTitle,textBoxDescription,textBoxIndex)
    If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		stepName="Check whether textbox is editable or not"
		inputParameter="Short Title of  Form:"& formShortTitle &"<br>Text Box : "& textBoxDescription & "<br> index: " & textBoxIndex 
		strStepDescription = "Verifies the Text box " & textBoxDescription &" is editable or not"
		On Error Resume Next

		If 	formShortTitle<>" " and textBoxDescription<> " " and textBoxIndex<>" " Then
			If  OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textBoxDescription,"index:="& textBoxIndex).Exist(3) Then
		   		Set objTextBox=OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textBoxDescription,"index:="& textBoxIndex)
				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
					ImagePath=CaptureScreenshot(objTextBox,strStepDescription)
				End if
				If objTextBox.GetRoProperty("editable") = "True" Then
					message="Textbox" & textBoxDescription &" is editable"
		    	Else
					message="Textbox" & textBoxDescription &" is not editable"
				End If
            
				blnExceptionFlag = Error_Listener ("VerifyTextBoxEditableOrNot",objTextBox)
				If  Not blnExceptionFlag Then
					status="DONE"
					Call ReporterFunction("e-Swift_FunctionLibrary","VerifyTextBoxEditableOrNot","2",stepName,message)
				Else
					Flag=1
					status="FAIL"
					message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
					Call ReporterFunction("e-Swift_FunctionLibrary","VerifyTextBoxEditableOrNot","1",stepName,message)
                End If
            Else
				status="FAIL"
				Flag=1
				message= textBoxDescription & " : Textbox not found"
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","VerifyTextBoxEditableOrNot","1",stepName,message)
			End If
		Else
			status="FAIL"
			Flag=1
			message="One or More Missing parameter"
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","VerifyTextBoxEditableOrNot","1",stepName,message)
		End If

        If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
			If Flag =1  Then
										VerifyTextBoxEditableOrNot = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objTextBox,message)
				Else
										VerifyTextBoxEditableOrNot = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objTextBox=Nothing
	End If 
End Function



'**********************************************************************************************************************************************************************

'**********************************************************************************
'Name of the Function   : VerifyCheckBoxEnabledOrDisabled
'Author		     					  :TCS
'Date			 				     :26/08/2014
'Description		          : Check whether the checkbox is enable or disable
'			        
'			        
'Input Parameters	     :formShortTitle->ShortTitle of the form.'
							'checkBoxDescription->description property of checkbox
							'checkBoxIndex-> index of the checkbox
'                                            
'Output Parameters        :	None

'**********************************************************************************************************************************************************************
'Function    VerifyCheckBoxEnabledOrDisabled(formShortTitle,checkBoxDescription,checkBoxOption)
'**********************************************************************************************************************************************************************Function VerifyCheckBOx(formShortTitle,checkBoxDescription,checkBoxOption)
Public Function VerifyCheckBoxEnabledOrDisabled(formShortTitle,checkBoxDescription,checkBoxIndex)
    If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		stepName="Check whether checkbox is enabled or disabled"
		inputParameter="Short Title of  Form:"& formShortTitle &"<br>Check Box : "& checkBoxDescription & "<br> index: " & checkBoxIndex 
	strStepDescription = "Verifies the Check box " & checkBoxDescription &" is enabled or disabled"
		On Error Resume Next

		If 	formShortTitle<>" " and checkBoxDescription<> " " and checkBoxIndex<>" " Then
			If  OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("description:="& checkBoxDescription,"index:="& checkBoxIndex).Exist(3) Then
		   		Set objCheckBox=OracleFormWindow("short title:="& formShortTitle).OracleCheckbox("description:="& checkBoxDescription,"index:="& checkBoxIndex)
				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
					ImagePath=CaptureScreenshot(objCheckBox,strStepDescription)
				End if
				If objCheckBox.GetRoProperty("enabled") = "True" Then
					message="Checkbox" & checkBoxDescription &" is enabled"
		    	Else
					message="Checkbox" & checkBoxDescription &" is disabled"
				End If
            
				blnExceptionFlag = Error_Listener ("VerifyCheckBoxEnabledOrDisabled",objCheckBox)
				If  Not blnExceptionFlag Then
					status="DONE"
					Call ReporterFunction("e-Swift_FunctionLibrary","VerifyCheckBoxEnabledOrDisabled","2",stepName,message)
				Else
					Flag=1
					status="FAIL"
					message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
					Call ReporterFunction("e-Swift_FunctionLibrary","VerifyCheckBoxEnabledOrDisabled","1",stepName,message)
                End If
            Else
				status="FAIL"
				Flag=1
				message=checkBoxDescription & " : CheckBox not found"
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","VerifyCheckBoxEnabledOrDisabled","1",stepName,message)
			End If
		Else
			status="FAIL"
			Flag=1
			message="One or More Missing parameter"
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","VerifyCheckBoxEnabledOrDisabled","1",stepName,message)
		End If

        If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
			If Flag =1  Then
										VerifyCheckBoxEnabledOrDisabled = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objCheckBox,message)
				Else
										VerifyCheckBoxEnabledOrDisabled = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objCheckBox=Nothing
	End If 
End Function




'******************************************************************************************************************************************************************
'Name of the Function		   ->SelectRadioButtonTabbedRegionWithIndexWithoutDevName
'Author									      ->TCS
'Date			     					       ->07/11/2011
'Description		    		         ->Select a radio Button in a tabbed Region
'Input Parameters	               ->formShortTitle->Short Title property value of the Form,
'														'tabbedRegionLableName->Label of the Tabbed Region
'														',tabbedRegionIndex -> Index Value of the Tabbed Region
'														',selecteditem -> Item already selected in radiobutton group
'														,IndexToBeSelected-Index of the radio button to be selected
'Output Parameters              ->None
'********************************************************************************************************************************************************************
'Function SelectRadioButtonTabbedRegionWithIndexWithoutDevName(formShortTitle,tabbedRegionLableName,tabbedRegionIndex,selecteditem,IndexToBeSelected)
'********************************************************************************************************************************************************************
 Public Function SelectRadioButtonTabbedRegionWithIndexWithoutDevName(formShortTitle,tabbedRegionLableName,tabbedRegionIndex,selecteditem,IndexToBeSelected)

	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		'startTime=Timer()
		stepName="Select Tabbed Region Radio Button"
		inputParameter="<b>Form short Title:</b>"& formShortTitle &"<br><b>Developer Name of  Radio Group : </b>"& selecteditem & "<br><b>Index of the radio button to be selected: </b>" & IndexToBeSelected 
		On error resume next
		If formShortTitle <>"" And tabbedRegionLableName<>"" And selecteditem<>""  And IndexToBeSelected <>"" Then
			If OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("Label:="&tabbedRegionLableName,"index:=" & tabbedRegionIndex).OracleRadioGroup("selected item:=" & selecteditem).Exist  Then
				Set radioObject=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("Label:="&tabbedRegionLableName,"index:=" & tabbedRegionIndex).OracleRadioGroup("selected item:=" & selecteditem)
				If  radioObject.GetRoProperty("enabled")  Then		 
					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
						strStepDescription = "Selects Radio button with properties " & "[Item already selected in Radio Group := "& selecteditem & "Index to be selected in radio button :=" & IndexToBeSelected  & "]" 
						ImagePath=CaptureScreenshot(radioObject,strStepDescription)
					End if
					radioObject.Select IndexToBeSelected
					selectedRadioButtonIndex= radioObject.GetROProperty("selected index")
					blnExceptionFlag = Error_Listener ("Select Radio Button",radioObject)
                    'If Not blnExceptionFlag and  radioObject.VerifySelected(buttonName)  Then
                  	If  radioObject.VerifySelected(IndexToBeSelected.Int) and  Not blnExceptionFlag Then
						status="DONE"
						message="[ " & IndexToBeSelected & " ] index of radio Button is selected "
						Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioButtonTabbedRegionWithIndexWithoutDevName","2",stepName,message)
					Else
						status="DONE"
						Flag=1
						
					End If
                Else
					status="FAIL"
					Flag=1
					message="[ " & IndexToBeSelected & " ] index of radio Button Not Enabled"
					Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioButtonTabbedRegionWithIndexWithoutDevName","1",stepName,message)
				End If
			Else	
				status="FAIL"
				Flag=1
				message="Radio Group Object not exist"
				Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioButtonTabbedRegionWithIndexWithoutDevName","1",stepName,message)
			End If
		Else
			Flag=1
			status="FAIL"
			message="Input Parameter Missing"
			Call ReporterFunction("e-Swift_FunctionLibrary","SelectRadioButtonTabbedRegionWithIndexWithoutDevName","1",stepName,message)
		End If
		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3) 
		'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
        If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If
        
			If Flag =1  Then
							SelectRadioButtonTabbedRegionWithIndexWithoutDevName = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(radioObject,message)
			Else
							SelectRadioButtonTabbedRegionWithIndexWithoutDevName = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If
End Function
'***********************************************************************************
'Function SelectRadioButtonTabbedRegionWithIndexWithoutDevName END
'**************************************************************************************



'**********************************************************************************************************************************************************************
'Name of the Function  : ValidateDataInTabbedRegionTableColumn
'Author		    :  TCS
'Date			    :   1 Sep 2011
'Description	     :  Function to Verify if any value is present in a Oracle Table Column
'Input Parameters	      :  formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,tableColumnName,ExpectedData
'Output Parameters     :  True/ False
'**********************************************************************************************************************************************************************

Function ValidateDataInTabbedRegionTableColumn(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,tableColumnName,ExpectedData)
	 If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError:   blnObjectError=False
				Dim blnFlagFound,blnNoRowGivenFlag  
				blnFlagFound = False
				blnNoRowGivenFlag = False
				blnCaptureFlag = True
				'startTime=timer()
				stepName="Search a value in Table Column populated with Values "
				inputParameter="Short Title of the Form:"& formShortTitle&" "&"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b> Block Name of the Oracle table: </b>"& tableBlockName & "<br><b> Name of the column :  </b>"& tableColumnName
				strStepDescription= "Validate the data [" & ExpectedData & "] in the table [ " & tableBlockName & " ]"
				On error resume next
				If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit) Then
				   Set objData= OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTable("block name:="& tableBlockName)
				   If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
						ImagePath=CaptureScreenshot(objData,strStepDescription)
					End if
					numberOfRows = objData.GetROProperty("total rows")
					For rowNumber = 1 To numberOfRows
						OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTable("block name:="& tableBlockName).SetFocus rowNumber,tableColumnName
						currentRowData=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTable("block name:="& tableBlockName).GetFieldValue(rowNumber,tableColumnName)
						If currentRowData = ExpectedData Then
							sActualValue = currentRowData
							blnFlagFound = True
							Exit For	
						End If
					Next

					If blnFlagFound  Then
						Call ReporterFunction(strLibraryFileName,"ValidateDataInTabbedRegionTableColumn","2"," Validation in Oracel Table ", ExpectedData &  ": has been successfully Validated in the ["& tableBlockName &"  ] Oracle Table ")
						status="PASS"
						message="Expected Value:  [ "&  ExpectedData  & " ] : Matches with Actual Data [ " & sActualValue &" ] "
                        ValidateDataInTabbedRegionTableColumn = True
					Else
						Call ReporterFunction(strLibraryFileName,"ValidateDataInTabbedRegionTableColumn","1","Validation in Oracel Table  ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
						status="FAIL"
						Flag=1
						message= " Expected Value  :[ " & ExpectedData  &" ] NOT  Found in Any Row of Oracle Table : [ " &  tableBlockName &" ] "
						ValidateDataInTabbedRegionTableColumn = False

					End If
				Else
					Call ReporterFunction(strLibraryFileName,"ValidateDataInTabbedRegionTableColumn","1","Table Name "& tableBlockName,"Table in  " & formShortTitle & " Not Found")
					status="FAIL"
					Flag=1
					message="Given Table Name [ "& tableBlockName &" ] Not Found"
					blnObjectError=True
					ValidateDataInTable = False
				End if 

		Set objData= Nothing
		'endTime=timer()
		'exeTime=FormatNumber(endTime - startTime,3) 
		'Call  UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
		 If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			Call Error_Recovery ("CloseAllForms")
		End If

		If Flag =1  Then
			ValidateDataInTabbedRegionTableColumn = message
			blnMainFailFlag = True
			ImagePath=CaptureScreenshot(objData,message)
		Else
			ValidateDataInTabbedRegionTableColumn = True
		End If
		If blnDefault_eSwiftReporting Then  
				Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If

	End If


End Function

'**********************************************************************************************************************************************************************


'********************************************************************************************************************************************************************
'Name of the Function : ValidateDatabaseTableValueNull(serverName,port,serviceName,userID,password,tableColumn,SQLQuery)
'Author                    			 : TCS
'Date                                 : 09/12/2016
'Description          		    : Function to verify a column in database table doesnt contain any value
'Input Parameters         : serverName = Host name  
'                                             port	: Port Number
'                                             serviceName : Instance name (eg orq1,orq2 etc)
'                                             userID = Database userid
'                                             password	: Database password
'                                             tableColumn : Column name which the user need to validate
'                                             SQLQuery = Query 
'                                            

'Output Parameters    : True or False 
'**********************************************************************************************************************************************************************
'Function ValidateDatabaseTableValueNull(serverName,port,serviceName,userID,password,tableColumn,SQLQuery)
'**********************************************************************************************************************************************************************
Function ValidateDatabaseTableValueNull(serverName,port,serviceName,userID,password,tableColumn,SQLQuery)
	On Error Resume Next
	stepName="Validate No Value in Database Table"
	inputParameter="<b>Server Name : </b>"& serverName &"<br><b>Port : </b>"& port & "<br><b>Service Name : </b>" & serviceName & "<br><b>Table Column : </b>" & tableColumn
    Dim connectionString: connectionString = "DRIVER={Microsoft ODBC for Oracle}; SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST="&serverName&")(PORT="&port&"))(CONNECT_DATA=(SERVICE_NAME="&serviceName&")));Uid="&userID&";Pwd="&password&";"
	Dim connection : Set connection = CreateObject("ADODB.Connection")
	Dim ErrorFlag : ErrorFlag="False"
	Dim QueryResultSet: Set QueryResultSet = CreateObject("ADODB.Recordset") 
	QueryResultSet.CursorType = 3
	QueryResultSet.open SQLQuery,connectionString

	If Err.Number <> 0  Then
		message="An error has occured : "&Err.Description
		Err.Clear
		status="FAIL"
		Flag=1
		Call ReporterFunction("e-Swift_FunctionLibrary","ValidateDatabaseTableValueNull","1",stepName,message)
		If Flag =1  Then
								ValidateDatabaseTableValueNull = message
								blnMainFailFlag = True
								'ImagePath=CaptureScreenshot(objCheckBox,message)
	    End If
		If blnDefault_eSwiftReporting Then  
				Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
		connection.Close
		Set QueryResultSet = Nothing
		Set connection = Nothing
		Exit Function
	End If

    rowCount = QueryResultSet.RecordCount
	If rowCount = 0 Then
		message = "No Records were retrieved."
        status="DONE"
		Call ReporterFunction("e-Swift_FunctionLibrary","ValidateDatabaseTableValueNull","0",stepName,message)
	Else
			message = "Value present in Database."
            status="FAIL"
			Flag=1
			If Flag =1  Then
								ValidateDatabaseTableValueNull = message
								blnMainFailFlag = True
								'ImagePath=CaptureScreenshot(objCheckBox,message)
	    	End If
			Call ReporterFunction("e-Swift_FunctionLibrary","ValidateDatabaseTableValueNull","1",stepName,message)
			connection.Close
			Set QueryResultSet = Nothing
			Set connection = Nothing
			Exit Function
	End If	
	If Flag =1  Then
							ValidateDatabaseTableValueNull = message
							blnMainFailFlag = True
							'ImagePath=CaptureScreenshot(objCheckBox,message)
	Else
							ValidateDatabaseTableValueNull = True
	End If
	If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
	End If
		 
	connection.Close
	Set QueryResultSet = Nothing
	Set connection = Nothing
End Function
'**********************************************************************************************************************************************************************
'End Function ValidateDatabaseTableValueNull(serverName,port,serviceName,userID,password,tableColumn,SQLQuery)
'***********************************************************************************'***********************************************************************************
