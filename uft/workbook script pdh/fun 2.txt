'####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----
'####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----

'																														IP Name					: e-Swift Framework									
'																														Copyright © 2011 TCSL. All Rights Reserved       
'																														Framework Owner	: TCS ASU-ERP & Niche Testing COE			   
'																														Summary : 	e-Swift framework is an intellectual Property of TCSL Which works as	an accelerator for Automation Testing of ERP Solutions.	
'																														No part of this work may be reproduced, stored in a retrieval system,adapted or transmitted 		in any form or by any means electronic,	mechanical,photographic, 
'																														optic recording or otherwise without the prior written permission of TCSL. 			       	    

'####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----
'####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----####-----





Public Function OpenDialogTabbedRegionHierarchy(formShortTitle,TopLeveltabbedRegionLabel,TopLeveltabbedRegionIndex,LowerLeveltabbedRegionLabel,LowerLeveltabbedRegionIndex,textFieldDescription,textFieldIndex)
    On Error Resume Next
    If Not Environment.Value("blnFatalError") Then
        Dim blnObjectError
        blnObjectError=False
        'startTime=Timer()
        stepName="Open Dialog Box"
        inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& TopLeveltabbedRegionLabel & "<br><b>Prompt Or Description of the TextField : </b>" & textFieldDescription & "<br><b>Index of the Tabbed Region : </b>" & TopLeveltabbedRegionIndex & "<br><b>Index of the Text Field : </b>" & textFieldIndex

     
        On Error Resume Next
        Dim intSetFlag,objText
        intSetFlag=1

        If formShortTitle<>"" AND TopLeveltabbedRegionLabel<>"" AND TopLeveltabbedRegionIndex<>"" AND LowerLeveltabbedRegionLabel<>"" AND LowerLeveltabbedRegionIndex<>"" AND textFieldDescription<>"" Then
        'OracleFormWindow("short title:=Sales Orders").OracleTabbedRegion("label:=Order Information","index:=0").OracleTabbedRegion("label:=Main","index:=1").OracleTextField("description:=Customer PO").Enter "123456"
                If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTextField("description:="& textFieldDescription,"index:=textFieldIndex").Exist(3) Then
                        Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTextField("description:="& textFieldDescription,"index:=textFieldIndex")
                        intSetFlag = 0
                ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTextField("developer name:="& textFieldDescription,"index:=textFieldIndex").Exist(3) Then
                        Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTextField("developer name:="& textFieldDescription,"index:=textFieldIndex") 
                        intSetFlag = 0
                Else
                        status="FAIL"
                        Flag=1
                        message="Given Object Not Found." 
                        blnObjectError=True
                        Call ReporterFunction("e-Swift_FunctionLibrary","OpenDialogTabbedRegionHierarchy","1",stepName,message)
                End If

                If intSetFlag = 0 Then
                        If objText.exist(2) Then
                                If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
                                            strStepDescription = "Enter ["& valueToEnter &"] in hierarchial tabbed region text field " & "[description:="& textFieldDescription & "]" 
                                            ImagePath=CaptureScreenshot(objText,strStepDescription)
                                        End if

                                objText.OpenDialog
                                          '// Calling Error_Listener
                                blnExceptionFlag = Error_Listener ("OpenDialogTabbedRegionHierarchy",objText)
                                If Not blnExceptionFlag Then
                                            status="DONE"
                                            message=textFieldDescription & "'s dialog has been opened."
                                            Call ReporterFunction("e-Swift_FunctionLibrary","OpenDialogTabbedRegionHierarchy","2",stepName,message)
                                Else
                                            status="FAIL"
                                            Flag=1
                                             message="<br> Unexpected Error Encountered </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
                                            Call ReporterFunction("e-Swift_FunctionLibrary","OpenDialogTabbedRegionHierarchy","1",stepName,message)    
                                End If
                        Else
                                status="FAIL"
                                Flag=1
                                message="The object is disabled."
                                blnObjectError=True
                                Call ReporterFunction("e-Swift_FunctionLibrary","OpenDialogTabbedRegionHierarchy","1",stepName,message)
                        End If
                End If
        Else
                status="FAIL"
                Flag=1
                message="Insufficient Data Provided."
                blnObjectError=True
                Call ReporterFunction("e-Swift_FunctionLibrary","OpenDialogTabbedRegionHierarchy","1",stepName,message)
        End If

        'endTime=Timer()
        'ExeTime = FormatNumber(endTime - startTime,3) 

        'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

    If  blnObjectError  Then
         Environment.Value("blnFatalError")=True
        Call Error_Recovery ("CloseAllForms")
    End If
    If Flag =1  Then
                            OpenDialogTabbedRegionHierarchy= message
                            blnMainFailFlag = True
                            ImagePath=CaptureScreenshot(objText,message)
            Else
                            OpenDialogTabbedRegionHierarchy= True
            End If
        If blnDefault_eSwiftReporting Then  
        Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
        End If
    End If    
End Function



Function MaximizeBrowser(strBrowserName)
			Dim blnBrowserFound : blnBrowserFound= False
			'   Dim hWnd
			'   If Browser("name:="&strBrowserName&".*").Exist(1) Then
			'				   Set Object= Browser("name:="&strBrowserName) 
			'				   hWnd = Object.GetROProperty("hwnd")
			'				   On Error Resume Next
			'				    Window("hwnd:=" & hWnd).Maximize
			'					If Err.Number <> 0 Then
			'						   Window("hwnd:=" & Browser("hwnd:=" & hWnd).Object.hWnd).Maximize
			'						   Err.Clear
			'					 End If
			'				   On Error Goto 0
			'	else
			'				  Call MaximiseBrowserAlternate(strBrowserName)
			'   End If


				Dim hWnd,objBrowser1,objBrowser2
		
				set objBrowser1=Browser("name:=.*"&strBrowserName&".*")
				set objBrowser2=Browser("title:=.*"&strBrowserName&".*")
			
			   If objBrowser1.Exist(1) then
					strBrowserURL = objBrowser1.GetROProperty("title")
					blnBrowserFound= True
				elseIf objBrowser2.Exist(1) Then
					'set Object = objBrowser2
					strBrowserURL = objBrowser2.GetROProperty("title")
					blnBrowserFound= True
				End if 

				If  blnBrowserFound= True Then
					Set oShell = CreateObject("WScript.Shell")
					bResult = oShell.AppActivate(strBrowserURL) 
				   If bResult = True Then 
							oShell.SendKeys "% "
							wait 2
							oShell.SendKeys "x"
					End if 
					set oShell= Nothing
				End If
End Function


Public Function SetFocusTabbedRegionHierarchy(formShortTitle,TopLeveltabbedRegionLabel,TopLeveltabbedRegionIndex,LowerLeveltabbedRegionLabel,LowerLeveltabbedRegionIndex,textFieldDescription,textFieldIndex)
    On Error Resume Next
    If Not Environment.Value("blnFatalError") Then
        Dim blnObjectError
        blnObjectError=False
        'startTime=Timer()
        stepName="Set Focus"
        inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& TopLeveltabbedRegionLabel & "<br><b>Prompt Or Description of the TextField : </b>" & textFieldDescription & "<br><b>Index of the Tabbed Region : </b>" & TopLeveltabbedRegionIndex & "<br><b>Index of the Text Field : </b>" & textFieldIndex

     
        On Error Resume Next
        Dim intSetFlag,objText
        intSetFlag=1

        If formShortTitle<>"" AND TopLeveltabbedRegionLabel<>"" AND TopLeveltabbedRegionIndex<>"" AND LowerLeveltabbedRegionLabel<>"" AND LowerLeveltabbedRegionIndex<>"" AND textFieldDescription<>"" Then
        'OracleFormWindow("short title:=Sales Orders").OracleTabbedRegion("label:=Order Information","index:=0").OracleTabbedRegion("label:=Main","index:=1").OracleTextField("description:=Customer PO").Enter "123456"
                If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTextField("description:="& textFieldDescription,"index:=textFieldIndex").Exist(3) Then
                        Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTextField("description:="& textFieldDescription,"index:=textFieldIndex")
                        intSetFlag = 0
                ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTextField("developer name:="& textFieldDescription,"index:=textFieldIndex").Exist(3) Then
                        Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTextField("developer name:="& textFieldDescription,"index:=textFieldIndex") 
                        intSetFlag = 0
                Else
                        status="FAIL"
                        Flag=1
                        message="Given Object Not Found." 
                        blnObjectError=True
                        Call ReporterFunction("e-Swift_FunctionLibrary","SetFocusTabbedRegionHierarchy","1",stepName,message)
                End If

                If intSetFlag = 0 Then
                        If objText.exist(2) Then
                                If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
                                            strStepDescription = "Enter ["& valueToEnter &"] in hierarchial tabbed region text field " & "[description:="& textFieldDescription & "]" 
                                            ImagePath=CaptureScreenshot(objText,strStepDescription)
                                        End if

                                objText.Click
                                          '// Calling Error_Listener
                                blnExceptionFlag = Error_Listener ("SetFocusTabbedRegionHierarchy",objText)
                                If Not blnExceptionFlag Then
                                            status="DONE"
                                            message=textFieldDescription & " has been clicked."
                                            Call ReporterFunction("e-Swift_FunctionLibrary","SetFocusTabbedRegionHierarchy","2",stepName,message)
                                Else
                                            status="FAIL"
                                            Flag=1
                                             message="<br> Unexpected Error Encountered </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
                                            Call ReporterFunction("e-Swift_FunctionLibrary","SetFocusTabbedRegionHierarchy","1",stepName,message)    
                                End If
                        Else
                                status="FAIL"
                                Flag=1
                                message="The object is disabled."
                                blnObjectError=True
                                Call ReporterFunction("e-Swift_FunctionLibrary","SetFocusTabbedRegionHierarchy","1",stepName,message)
                        End If
                End If
        Else
                status="FAIL"
                Flag=1
                message="Insufficient Data Provided."
                blnObjectError=True
                Call ReporterFunction("e-Swift_FunctionLibrary","SetFocusTabbedRegionHierarchy","1",stepName,message)
        End If

        'endTime=Timer()
        'ExeTime = FormatNumber(endTime - startTime,3) 

        'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

    If  blnObjectError  Then
         Environment.Value("blnFatalError")=True
        Call Error_Recovery ("CloseAllForms")
    End If
    If Flag =1  Then
                            SetFocusTabbedRegionHierarchy = message
                            blnMainFailFlag = True
                            ImagePath=CaptureScreenshot(objText,message)
            Else
                            SetFocusTabbedRegionHierarchy = True
            End If
        If blnDefault_eSwiftReporting Then  
        Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
        End If
    End If    
End Function




Function ClickOracleAdminLink(obBrowserPage)
	If obBrowserPage.Exist(1) Then
					Set objAdminLink= Description.Create()
					objAdminLink("micclass").value= "Link"
					objAdminLink("html id").value= "AppsNavLink"
					objAdminLink("innertext").value= ".*System Administrator.*"
					Set objChildrenLink= obBrowserPage.ChildObjects(objAdminLink)
					iCount= objChildrenLink.count
					If iCount>0  Then
							objChildrenLink(0).Click
							ClickOracleAdminLink= True
					Else
							ClickOracleAdminLink= "System Administrator Link Not Found on Page"
					End If
	End If
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Name of the Function			:	CaptureTextFlexValue(formShortTitle,textFieldPromptOrDescription,textFieldIndex)
'Author										:	TCS
'Date										:	28.10.2013
'Description                    	:	Capture Run time value from a Oracle Text Flex Field 
'Input Parameters        		:	formShortTitle : Short Title Property of the Oracle Form
'												textFieldPromptOrDescription : Description / Prompt Property of the Text Field (Choose which one is available. Can choose either  in case both are present.)
'												textFieldIndex : Index of the Text Field(Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      :	Value of the Text Field on Success;On Fialure = "" (Blank) string  is returned
'*********************************************************************************************************************************************************************

Public Function CaptureTextFlexValue(flexShortTitle,textFieldPromptOrDescription,textFieldIndex)
  If Not Environment.Value("blnFatalError") Then
				Dim strFieldValue,intSetFlag,objText
			    blnObjectError=False
				stepName="Capture Runtime Value from Text Field"
				inputParameter="<b>Short Title of the Flex : </b> "& flexShortTitle &"<br><b>Description Or Prompt of the Text Field : </b> " & textFieldPromptOrDescription & "<br><b>Index of the text field : </b> " & textFieldIndex

				intSetFlag=1
			
				On Error Resume Next
				If OracleFlexWindow("title:="& flexShortTitle).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Description
										Set objText=OracleFlexWindow("title:="& flexShortTitle).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
										intSetFlag=0
				ElseIf OracleFlexWindow("title:="& flexShortTitle).OracleTextField("prompt:="& textFieldPromptOrDescription,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Prompt
										Set objText=OracleFlexWindow("title:="& flexShortTitle).OracleTextField("prompt:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
										intSetFlag=0
				Else
										status="FAIL"
										Flag=1
										message=" Oracle Text Flex Field [ "& textFieldPromptOrDescription & " ] does not Exist."
										blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"CaptureTextFlexValue","1",stepName,message)
				End If

				If intSetFlag=0 Then
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																		ImagePath=CaptureScreenshot(objText,message)
															End if
										strFieldValue=objText.GetROProperty("value")
										outputParameter= strFieldValue
										blnExceptionFlag = Error_Listener ("CaptureTextFlexValue",objText)

										If Not blnExceptionFlag Then
															status="DONE"
															message="[ " & textFieldPromptOrDescription & " ] value Captured during run time."
															Call ReporterFunction(strLibraryFileName,"CaptureTextFlexValue","2",stepName,message)
															
                                        Else
															status="FAIL"
															Flag=1
															message="<br> Unexpected Error Encountered while fetching the Run Time Data</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
															Call ReporterFunction(strLibraryFileName,"CaptureTextFlexValue","1",stepName,message)
										End If
										
				End If
				If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										Call Error_Recovery ("CONTINUE")
				End If
				If Flag =1  Then
										CaptureTextFlexValue = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objText,message)
				Else
										CaptureTextFlexValue = True
				End If
				If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				Set objText=Nothing
	End If	
End Function


'**********************************************************************************'***********************************************************************************
'Name of the Function   : ApproveFlex
'Author		     					  :TCS
'Date			 				     :22.09.2010
'Description		          : Approve Flex  window
'Input Parameters	     : titleOfTheWindow:-title of the window         
'Output Parameters        :True on Success ; Failure 'messsage' on Fail
'***********************************************************************************'***********************************************************************************
 
 Function ApproveFlex(titleOfFlexField)
	  If Not Environment.Value("blnFatalError") Then
								Dim blnObjectError
								blnObjectError=False		
								'startTime=Timer()
								stepName="Approve " & titleOfFlexField &" Flex window"
								strStepDescription = stepName
								inputParameter="Title of the Oracle Flex Window:"& titleOfFlexField
								On error resume next
									 If   OracleFlexWindow("title:="&titleOfFlexField).Exist(gObjectTimeoutLimit) Then
													 Set flexObject=OracleFlexWindow("title:="&titleOfFlexField)
													  If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(flexObject,strStepDescription)
													End if
													 OracleFlexWindow("title:="&titleOfFlexField).Approve
													 blnExceptionFlag = Error_Listener ("ApproveFlex",flexObject)
								

													 If  Not blnExceptionFlag Then
																	Call ReporterFunction("2",titleOfFlexField&" Flex  Window ",titleOfFlexField & ": Flex window has been approved successfully")
																	status="DONE"
																	message="["& titleOfFlexField & "]  Flex window approved successfully"
													 Else
																	Flag=1
																	status="FAIL"
																	blnObjectError=True
																	message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																	Call ReporterFunction(strLibraryFileName,"ApproveFlex","1",stepName,message)																	
													End If     
					
									 Else
													
													status="FAIL"
													Flag=1
													blnObjectError=True
													message="Given [" &titleOfFlexField& " ] Flex window  Not Found"
													Call ReporterFunction(strLibraryFileName,"ApproveFlex","1",stepName,message)
									End If
									If  blnObjectError  Then
													Environment.Value("blnFatalError")=True
													Call Error_Recovery ("CloseAllForms")
									End If 
									If Flag =1  Then
													ApproveFlex = message
													blnMainFailFlag = True
													ImagePath=CaptureScreenshot(flexObject,strStepDescription)
									Else
													ApproveFlex = True
									End If								
									Set flexObject = Nothing
		End If
 End Function



'***********************************************************************************'***********************************************************************************
'Name of the Function  : CaptureAllValuesFromTableColumn
'Author					    :  TCS
'Date			    		:  1 Sep 2011
'Description	     : Function to copy all data from a column in Oracle Table 
'Input Parameters	     :  formShortTitle,tableBlockName,tableColumnName
'Output Parameters     :array containing the table column values  on success.; "" (Blank )Value on Failure
'**************************************************************************************'***********************************************************************************


Function CaptureAllValuesFromTableColumn(formShortTitle,tableBlockName,tableColumnName,ByRef aOracleTableData)
	  If Not Environment.Value("blnFatalError") Then
								On Error Resume Next
								Dim aTempArray(50),aCleanedArray
								Dim blnObjectError
							   blnObjectError=False
								stepName="Extract run time  values from given Column  in a Table "
								inputParameter=" Short Title of the Form:"& formShortTitle&" "& chr(13) &""& chr(13)  &" Block Name of the Oracle table: "& tableBlockName & chr(13) & "Name of the column :"& tableColumnName
								strStepDescription= "Capture all values from column [ " & tableColumnName & " ] of the Table [ " & tableBlockName & " ]"
								If formShortTitle<>" " and tableBlockName<>"" and tableColumnName<> ""  Then
															If OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit) then 
																			Set objTable= OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName)
																			If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																					ImagePath=CaptureScreenshot(objTable,strStepDescription)
																			End if
																			iRowCount = OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).GetROPRoperty("visible rows")
																			For iCnt = 1 to iRowCount
																						aTempArray(iCnt-1) =OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).GetFieldValue(iCnt,tableColumnName)
																			Next


																
'																			Set Ws = CreateObject("WScript.Shell")
'																			intRow=1
'																			Do
'																										
'																										currentRowData=OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).GetFieldValue(intRow,tableColumnName)
'																										aTempArray(intRow-1) = currentRowData
'																										OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).SetFocus intRow,tableColumnName
'																										wait(2)
'																										Ws.SendKeys "{Down}"
'																										intRow=intRow+1
'																										nextRowdata=OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).GetFieldValue(intRow,tableColumnName)
'																	
'																			Loop Until (currentRowData=nextRowdata) Or (Not err.number =0)  
'																			err.number =0
																
																			aCleanedArray = RemoveEmptyValuesInArray(aTempArray)
																			aOracleTableData=aCleanedArray
																			outputParameter= ConvertArrayToString(aOracleTableData)
																			status="DONE"
																			
																			message = " Values Retrieved from Table Column => [  "&chr(13) & ConvertArraytoString(aCleanedArray ) &"  ] "
																			strFieldValue= chr(13) & ConvertArraytoString(aCleanedArray)
																			outputParameter= strFieldValue
																			Call ReporterFunction(strLibraryFileName,"CaptureAllValuesFromTableColumn","2","Retrieve  All Values From Column in Oracle Table  ","Done")
															Else
																			status="FAIL"
																			Flag=1
																			message="Table " & tableBlockName &" not Found in Form " & formShortTitle
																			 blnObjectError=True
																			Call ReporterFunction(strLibraryFileName,"CaptureAllValuesFromTableColumn","1","Retrieve  All Values From Column in Oracle Table  ","Done")
																
															End if 
								else
															status="FAIL"
															Flag=1
															message="Insufficient Data Provided."
															blnObjectError=True
															Call ReporterFunction(strLibraryFileName,"CaptureAllValuesFromTableColumn","1",stepName,message)
				
								End if 
								Set Ws = Nothing
								Set objTable= Nothing
								If Flag =1  Then
															CaptureAllValuesFromTableColumn = message
															blnMainFailFlag = True
															ImagePath=CaptureScreenshot(objTable,message)
								Else
															CaptureAllValuesFromTableColumn = aOracleTableData
								End If
								If blnDefault_eSwiftReporting Then  
															Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
								End If
	

End If

End Function




'***********************************************************************************'***********************************************************************************
'Name of the Function   :  CaptureRequestNumberFromDecisionPopUp
'Author           				 	:  TCS
'Date           					 : 30 May 2011
'Modified By                 :Debabrata
'Modified  Date           :03 Sep 2012
'Description      		 :  Extract Request number from a OracleNotification Decision  window  of type Decision
'Input Parameters      :  None
'Output Parameters        : requestNumber 'Request Number on Success ; "" (Blank) value on Failure
'***********************************************************************************'***********************************************************************************
Function CaptureRequestNumberFromDecisionPopUp()'Byref aReturnArray)
 If Not Environment.Value("blnFatalError") Then
         Dim blnObjectError
         blnObjectError=False
         Dim requestNumber 
         blnFound = ""
         'startTime=Timer()
         stepName="Capture the Request Number , if any"
         inputParameter=""
		 Set objOracleNotification=OracleNotification("title:=Decision")
         If objOracleNotification.Exist(gObjectTimeoutLimit)     Then
			 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																						ImagePath=CaptureScreenshot(objOracleNotification,stepName)
																	End if
                                            strValueMessage = objOracleNotification.GetROProperty("message")
                                            strReturn = ExtractNumberFromString(strValueMessage ,aReturnArray)
											If blnExceptionFlag Then
																	status="FAIL"
																	Flag=1
																	message="<br> Unexpected Error Encountered while fetching the Run Time Data</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																	Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromDecisionPopUp","1",stepName,message)
											End If
											If  strReturn = True Then
																	

																	status="DONE"
																	
																	Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromDecisionPopUp","2",stepName,message)
																	outputParameter= ConvertArrayToString(aReturnArray)
																	message=" Concurrent Request Number  [" & outputParameter & "] Successfully Extracted: "
											else
																	status="FAIL"
																	Flag=1
																	message="<br> No Number Found in Note Message </br > ' " & strValueMessage & "'"
																	Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromDecisionPopUp","1",stepName,message)
											End If
        Else           
											 status="FAIL"
											 message=" Oracle Note Pop-up not Found" 
											 blnObjectError=True
											 Flag=1
											 Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromDecisionPopUp","1",stepName,message)
        End If
		Set objOracleNotification=Nothing
       If  blnObjectError  Then
											 Environment.Value("blnFatalError")=True
											Call Error_Recovery ("CONTINUE")
        End If

       If strReturn = True Then
'											CaptureRequestNumberFromDecisionPopUp = True
                                               '////// Changes Made .
											CaptureRequestNumberFromDecisionPopUp = outputParameter
       Else
											 CaptureRequestNumberFromDecisionPopUp = message
											 blnMainFailFlag = True
											 ImagePath=CaptureScreenshot(objOracleNotification,message)
		End If 
		If blnDefault_eSwiftReporting Then  
											Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
		
End If

End Function


'**********************************************************************************'***********************************************************************************
'Name of the Function	 ->CaptureSelectionTableDataWeb
'Author									->TCS
'Date			 						->27 /09/2011
'Description		  ->Fetches the data from the WebElement from the selection Table 
'Input Parameters		 ->browserName--> Name of the browser ; 
										'dataRowNumber-> Row number of the data to be fetched  ; 
									'dataColumnNumber--> Column Number of the data to be fetched
'Output Parameters		 ->Fetched value as webElementData On Success ; On FAIlure retunr Blank i.e. ""
'***********************************************************************************'***********************************************************************************
Function CaptureSelectionTableDataWeb(browserName,dataRowNumber,dataColumnNumber)
 If Not Environment.Value("blnFatalError") Then
					Dim blnObjectError
					blnObjectError=False
					'startTime=Timer()
					stepName="Capture value from webElement"
					inputParameter="Browser Name [ " & browserName  & " ]  <br> Row Number  [ " & dataRowNumber  & " <br> Column Name [ " & dataColumnNumber & " ]"
					strStepDescription= "Capture Data from Selection table Row Number [ " & dataRowNumber & " ] and Column Number [ " & dataColumnNumber & " ] on Page ["& browserName& "]" 
					On error resume next
					Set objWebTable=Browser("name:="&browserName).WebTable("class:=x1h")
					If objWebTable.exist(gObjectTimeoutLimit+5) Then			
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																ImagePath=CaptureScreenshot(objWebTable,strStepDescription)
												End if
								webElementData=objWebTable.GetCellData(dataRowNumber,dataColumnNumber)														
								outputParameter= webElementData								
								blnExceptionFlag = Error_Listener ("GetDataFromSelectionTable",objWebTable)
								If Not blnExceptionFlag Then
												status="DONE"
												message="Captured value : [ "& webElementData & " ]"
												
											   Call ReporterFunction(strLibraryFileName,"CaptureSelectionTableDataWeb","2",stepName,message)
								else			          	
												  status="FAIL"
												  Flag=1
												  message="<br> Unexpected Error Encountered while fetching the Run Time Data </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
												  Call ReporterFunction(strLibraryFileName,"CaptureSelectionTableDataWeb","1",stepName,message)
				
								End If
					Else
												status="FAIL"
												Flag=1
												message="Unable to fetch Data from Web selection.  Expected Table not found. Selection Table property might have changed"	
												blnObjectError=True
												Call ReporterFunction(strLibraryFileName,"CaptureSelectionTableDataWeb","1",stepName,message)
					End If
					Set objWebTable=Nothing
					If Flag =1  Then
											CaptureSelectionTableDataWeb = message
											blnMainFailFlag = True
											ImagePath=CaptureScreenshot(objWebTable,message)
					Else
											CaptureSelectionTableDataWeb = webElementData
					End If
					If blnDefault_eSwiftReporting Then  
											Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
					
	End If

End Function


'****************************************************************************************************************************************************************
'Name of the Function   :CaptureTableFieldValueTabbedRegion
'Author		     					  :TCS
'Date			 				     :27-Sep-2011
'Description		          : Capture a value during run time from a tabbed region table
'Input Parameters	     : formShortTitle->Short Title property value of the Form,
'											tabbedRegionLabel->Label peroperty value of the tabbed region
'                                            tabbedRegionIndex->Index of the tabbed region
'											tableBlockName->Block Name property value of the Oracle table
'											dataRowNo->Row Number
'										    dataColumnName->Name of the column                                     
'Output Parameters        :Field value from Table on Success . Blank value on Failure
'********************************************************************************************************************************************************************
Function CaptureTableFieldValueTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,dataRowNo,dataColumnName)
  If Not Environment.Value("blnFatalError") Then
					Dim blnObjectError,strTableFieldValue
					blnObjectError=False
					stepName="Capture Runtime Value from Table Field in Tabbed Region"
					inputParameter = "<b>Short Title of the Form : </b>" & formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b> Block Name of the Oracle table : </b> " & tableBlockName  & "<br><b> Row Number : </b>" & dataRowNo & "<br><b>Name of the column : </b>" & dataColumnName
					strStepDescription= "Capture Value from table [ " & tableBlockName & " ] at Row Number [ " & dataRowNo & " ] and Column Name [ " & dataColumnName & " ] on window [" & formShortTitle & "]"
					On Error Resume Next   
					 Set objOracleTable=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTable("block name:=" & tableBlockName)
					If objOracleTable.Exist(gObjectTimeoutLimit) Then 
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																						ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
																		End if
											strTableFieldValue =objOracleTable.GetFieldValue (dataRowNo,dataColumnName)
											outputParameter= strTableFieldValue		
											blnExceptionFlag = Error_Listener ("CaptureTableFieldValueTabbedRegion",objOracleTable)																														'// end
											If Not blnExceptionFlag Then
																		status="DONE"																		
																		
																		message="[ " & dataColumnName & " ] value Captured during run time."
																		Call ReporterFunction("eSwift_FunctionLibrary","CaptureTableFieldValueTabbedRegion","2",stepName,message)		
											Else
																	    status="FAIL"
																		Flag=1
																		message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																		Call ReporterFunction(strLibraryFileName,"CaptureTableFieldValueTabbedRegion","1",stepName,message)
											End If
					Else
											status="FAIL"
											Flag=1
											message="Oracle Table " &  tableBlockName & "does not Exist.Unable to get data from Column " & dataColumnName
											Call ReporterFunction("eSwift_FunctionLibrary","CaptureTableFieldValueTabbedRegion","1",stepName,message)
					End If
					CaptureTableFieldValueTabbedRegion=strTableFieldValue		'Returning the Value
					outputParameter=strTableFieldValue		  'Setting Output Parameter
					If Flag =1  Then
											CaptureTableFieldValueTabbedRegion = message
											blnMainFailFlag = True
											ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
					Else
											CaptureTableFieldValueTabbedRegion = strTableFieldValue
					End If
					If blnDefault_eSwiftReporting Then  
											Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If	
					Set objOracleTable=Nothing		                  
	End If	
End Function




'******************************************************************************************************************************************************************************************************************************************************************
'Name of the Function			:	CaptureTextFieldValue(formShortTitle,textFieldPromptOrDescription,textFieldIndex)
'Author										:	TCS
'Date										:	22.09.2011
'Description                    	:	Capture Run time value from a Oracle Text Field 
'Input Parameters        		:	formShortTitle : Short Title Property of the Oracle Form
'												textFieldPromptOrDescription : Description / Prompt Property of the Text Field (Choose which one is available. Can choose either  in case both are present.)
'												textFieldIndex : Index of the Text Field(Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      :	Value of the Text Field on Success;On Fialure = "" (Blank) string  is returned
'*********************************************************************************************************************************************************************

Public Function CaptureTextFieldValue(formShortTitle,textFieldPromptOrDescriptionOrDeveloperName,textFieldIndex)
  If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError
			    blnObjectError=False
				'startTime=Timer()
				stepName="Capture Runtime Value from Text Field"
				inputParameter="<b>Short Title of the Form : </b> "& formShortTitle &"<br><b>Description Or Prompt of the Text Field : </b> " & textFieldPromptOrDescriptionOrDeveloperName & "<br><b>Index of the text field : </b> " & textFieldIndex
				strStepDescription= "Capture Value from Text Field [ " & textFieldPromptOrDescriptionOrDeveloperName & " ] in the form [ " & formShortTitle & " ]"
				Dim strFieldValue,intSetFlag,objText
				intSetFlag=1
			
				On Error Resume Next
				If OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Description
										Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex)
										intSetFlag=0
				ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:="& textFieldPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Prompt
										Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:="& textFieldPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex)
										intSetFlag=0
				ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTextField("developer name:="& textFieldPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Prompt
										Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTextField("developer name:="& textFieldPromptOrDescriptionOrDeveloperName,"index:=" & textFieldIndex)
										intSetFlag=0
				Else
										status="FAIL"
										Flag=1
										message="Given  Oracle Text Field [ "& textFieldPromptOrDescription & " ] does not Exist."
										blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValue","1",stepName,message)
				End If

				If intSetFlag=0 Then
					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																ImagePath=CaptureScreenshot(objText,strStepDescription)
															End if
										strFieldValue=objText.GetROProperty("value")
										outputParameter= strFieldValue	
										blnExceptionFlag = Error_Listener ("CaptureTextFieldValue",objText)

										If Not blnExceptionFlag Then
															status="DONE"
															
															message="[ " & strFieldValue & " ] value Captured during run time."
															Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValue","2",stepName,message)
										 Else
															status="FAIL"
															Flag=1
															message="<br> Unexpected Error Encountered while fetching the Run Time Data</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
															Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValue","1",stepName,message)
										End If
										
				End If
				'strTextOutput=strFieldValue									'Returning the Value 
				'outputParameter=strFieldValue						'Setting Output Parameter
				Set objText=Nothing
				'endTime=Timer()
				'ExeTime = FormatNumber(endTime - startTime,3) 
				'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)


				If Flag =1  Then
							CaptureTextFieldValue = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
					Else
							CaptureTextFieldValue = 	outputParameter		'	strFieldValue
					End If
					If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
	End If	
End Function




''********************************************************************************************************************************************************
'Name of the Function   : CaptureTextFieldValueTabbedRegion
'Author		     					  :TCS
'Date			 				     :27-Sep-2011
'Description		          : Capture Run time value from a Oracle Text Field  under oracle Tabbed region
'Input Parameters	     : formShortTitle->short title property value of oracle form window
'											tabbedRegionLabel->Label peroperty value of the tabbed region
'                                            tabbedRegionIndex->Index of the tabbed region 
'                                            textFieldPromptOrDescription->Prompt  or description property value of the text field 
'                                            textFieldIndex->index of the Text filed    Normally index set as 0. For more than one identical object need to change accordingly.)                              
'Output Parameters        :strTextValue= run time captured value from a tabbed region text field. On Failure Blank "" String is returned
'***********************************************************************************************************************************************************

Public Function CaptureTextFieldValueTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,textFieldIndex)
     If Not Environment.Value("blnFatalError") Then
						Dim blnObjectError
						blnObjectError=False
						'startTime=Timer()
						stepName="Capture Runtime Value from Text Field in Tabbed Region"
						inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel & "<br><b>Prompt Or Description of the TextField : </b>" & textFieldPromptOrDescription & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b>Index of the Text Field : </b>" & textFieldIndex 
						strStepDescription= "Capture the Value from Text Field [ " & textFieldPromptOrDescription & " ] in the Tabbed Region [ " & tabbedRegionLabel & " ] in the form [ " & formShortTitle & " ]"
						 Dim strTextValue
						On Error Resume Next
						If formShortTitle<>"" AND tabbedRegionLabel<>"" AND tabbedRegionIndex<>""  AND textFieldPromptOrDescription<>""  AND textFieldIndex<>"" Then	'Check Parameters
												If  OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("prompt:=" & textFieldPromptOrDescription,"index:=" &textFieldIndex ).Exist(gObjectTimeoutLimit) Then
															Set objTextFieldPromptOrDescription=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("prompt:=" & textFieldPromptOrDescription,"index:=" &textFieldIndex )
												ElseIf OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:=" & textFieldPromptOrDescription,"index:=" &textFieldIndex ).Exist(gObjectTimeoutLimit) Then
															Set objTextFieldPromptOrDescription=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:=" & textFieldPromptOrDescription,"index:=" &textFieldIndex )
												ElseIf OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("developer name:=" & textFieldPromptOrDescription,"index:=" &textFieldIndex ).Exist(gObjectTimeoutLimit) Then
															Set objTextFieldPromptOrDescription=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("developer name:=" & textFieldPromptOrDescription,"index:=" &textFieldIndex )
												Else
															status="FAIL"
															Flag=1
															message="Given  Oracle Text Field[ "& textFieldPromptOrDescription & " ] does not Exist."
															blnObjectError=True
															Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValueTabbedRegion","1",stepName,message)
												End If
												If  objTextFieldPromptOrDescription.Exist(gObjectTimeoutLimit) Then
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																							ImagePath=CaptureScreenshot(objTextFieldPromptOrDescription,strStepDescription)
																						End if
														strTextValue =objTextFieldPromptOrDescription.GetROProperty("Value")
														outputParameter= strTextValue
																		blnExceptionFlag = Error_Listener ("CaptureTextFieldValueTabbedRegion",objTextFieldPromptOrDescription)
																		If  Not blnExceptionFlag Then
																						status="DONE"
																						
																						message="[ " & textFieldPromptOrDescription & " ] value Captured during run time."
																						Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValueTabbedRegion","2",stepName,message)	
																		 else
																						Flag=1
																						status="FAIL"
																						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																						Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValueTabbedRegion","1",stepName,message)																	
																		  End If
						
												End If
					Else
												status="FAIL"
												Flag=1
												message="Insufficient Data Provided."
												blnObjectError=True
												Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValueTabbedRegion","1",stepName,message)
					End If
		  
					'CaptureTextFieldValueTabbedRegion=strTextValue		'Returning the Value
					'outputParameter=strTextValue				'Setting Output Parameter
					'endTime=Timer()
					'ExeTime = FormatNumber(endTime - startTime,3) 
					Set objTextFieldPromptOrDescription=nothing
					'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
					If  blnObjectError  Then
												Environment.Value("blnFatalError")=True
												Call Error_Recovery ("CONTINUE")
					End If

					If Flag =1  Then
							CaptureTextFieldValueTabbedRegion = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTextFieldPromptOrDescription,message)
					Else
							CaptureTextFieldValueTabbedRegion = strTextValue
					End If
					If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
	End If
End Function






'*********************************************************************************************************************************
'Name of the Function  	: CaptureTextTable
'Author	                     	  :TCS
'Date							 :15/09/2011
'Description		 : Capture  a value during run time from a table within a form and return it
'Input Parameters	    	 : formShortTitle ->Short title ofthe form
'											tableBlockName->Block Name of the oracle table
',										dataRowNo-> row number of the oracle table from where the  data is to be captured
'									dataColumnName ->Coloumn name of the table from where the  data is to be captured       
'Output Parameters    	    : Captured text on Success ; Blank string i.e. "" on Failure
'*********************************************************************************************************************************
Public Function CaptureTextTable(formShortTitle,tableBlockName,dataRowNo,dataColumnName)
   If Not Environment.Value("blnFatalError") Then
						Dim blnObjectError:blnObjectError=False
						Dim temp
						'startTime=timer()
						stepName="Capture Runtime Value from Table Column "
						inputParameter="<b> Form: </b>"& formShortTitle &"<br> <b>Table: </b>"& tableBlockName &"<br><b>Row Number: </b>"& dataRowNo &"<br><b>Column :</b>"& dataColumnName
						strStepDescription= "Capture the Text from table [ " & tableBlockName & " ] at Row Number [ " & dataRowNo & " ] and Column Name [ " & dataColumnName & " ]"
						On Error resume next
						If formShortTitle<>" " and tableBlockName<>"" and dataRowNo<>" " and dataColumnName<> ""  Then
										Set  objOracleTable=OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName)
										If objOracleTable.Exist(gObjectTimeoutLimit)  Then
											 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																					ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
																				End if
														strTemp=objOracleTable.GetFieldValue(dataRowNo,dataColumnName)
														outputParameter= strTemp
														blnExceptionFlag = Error_Listener ("CaptureTextTable",objOracleTable)
														If Not blnExceptionFlag Then
																				 status="DONE"																				 
																				
																				 message="[ " & dataColumnName & " ] value captured  "
																				 Call ReporterFunction(strLibraryFileName,"CaptureTextTable","2",stepName,message)
														Else
																				status="FAIL"
																				Flag=1
																				message="<br> Unexpected Error Encountered while fetching the Run Time Data</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																				Call ReporterFunction(strLibraryFileName,"CaptureTextTable","1",stepName,message)
														End If
						
										Else 
														status="FAIL"
														Flag=1
														message="Table not found"
														blnObjectError=True
														Call ReporterFunction(strLibraryFileName,"CaptureTextTable","1",stepName,message)
										End If
								  
					Else 
										status="FAIL"
										Flag=1
										message="One or More Missing parameters"
										blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"CaptureTextTable","1",stepName,message)
    	 
					End If
					Set objOracleTable=Nothing
					'CaptureTextTable=strTemp
					'outputParameter=strTemp
					'endTime=timer()
					'exeTime=FormatNumber(endTime - startTime,3) 
					'Call  UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
					If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										Call Error_Recovery ("CONTINUE")
					End If

					If Flag =1  Then
							CaptureTextTable = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objOracleTable,message)
					Else
							CaptureTextTable = strTemp
					End If
					If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If

	End if
End Function




'*********************************************************************************************************************************************************************
'Name of the Function	:	CaptureTextWebElement(browserName,webElementClass,webElementHTMLTag,webElementIndex)
'Author									:	TCS
'Date                             		:	11.10.2011
'Description                    :	Capture text value of webelement
'Input Parameters        :	browserName : Name Property of the Browser
'												webElementClassORhtmlId : Class Property of the Web Element
'												webElementHTMLTag : HTML Tag of the Web Element
'												webElementIndex : Index of the Web Element													(Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      :	Captured Inner Text of the Web Element on Success; Blank string i.e. "" on Failure
'**********************************************************************************************************************************************************************

Public Function CaptureTextWebElement(browserName,webElementClassORhtmlId,webElementHTMLTag,webElementIndex)
    If Not Environment.Value("blnFatalError") Then
							Dim blnObjectError:blnObjectError=False
							Dim strCapturedText
							Dim blnobjectFound  : blnobjectFound = False
							Dim objWebElement
							'startTime=Timer()
							stepName="Capture Text in WebElement"
							inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Web Element Class : </b>"& webElementClass &"<br><b>Web Element HTML Tag : </b>" & webElementHTMLTag &"<br><b>Web Element Index : </b>" & webElementIndex
							strStepDescription= "Capture the text from Web Element [ " & webElementHTMLTag & " ]"
							On Error Resume Next
							
							Set obj= Description.Create()
							obj("micclass").value="Page"
							Set childObj=Browser("name:="& browserName).ChildObjects(obj)
							'pageTitle=childObj(0).getroproperty("title")
							pageTitle = browserName

							If Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("class:="& webElementClassORhtmlId ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex).Exist(gObjectTimeoutLimit) Then
											set objWebElement = Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("class:="& webElementClassORhtmlId ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex)
											blnobjectFound = True
							ElseIf Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("html id:="& webElementClassORhtmlId ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex).Exist(gObjectTimeoutLimit) Then
											set objWebElement  = Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("html id:="& webElementClassORhtmlId ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex)
											blnobjectFound = True
							End If
							


							If  blnobjectFound Then								
											If  objWebElement.GetROProperty("visible") Then
												If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																										ImagePath=CaptureScreenshot(objWebElement,strStepDescription)
																									End if
																	strCapturedText =	objWebElement.GetROProperty("innertext")
																	outputParameter= strCapturedText
																	'Set objWebElement=Browser("name:="& browserName).Page("title:="& pageTitle).WebElement("class:="& webElementClass ,"html tag:="& webElementHTMLTag,"index:="&webElementIndex)
																	blnExceptionFlag = Error_Listener ("CaptureTextWebElement",objWebElement)
																																			'// end
					
																	If Not blnExceptionFlag Then
																									status="DONE"
																									
																									message="Inner Text Captured during Runtime."
																									Call ReporterFunction(strLibraryFileName,"CaptureTextWebElement","2",stepName,message)
																	Else
																								   status="FAIL"
																									Flag=1
																									message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																									Call ReporterFunction(strLibraryFileName,"CaptureTextWebElement","1",stepName,message)
								
																	End If
											
									'								outputParameter=strCapturedText
										Else
											            
											                      
																	status="FAIL"
																	Flag=1
																	message="Web Element "& webElementHTMLTag & " is not Visible."
																	blnObjectError=True
																	Call ReporterFunction(strLibraryFileName,"CaptureTextWebElement","1",stepName,message)
											End If
		
						
            
							Else
											status="FAIL"
											Flag=1
											message="Given WebElement " & webElementHTMLTag  & " Not Found"
											 blnObjectError=True
											Call ReporterFunction(strLibraryFileName,"CaptureTextWebElement","1",stepName,message)
							End If
							
'							outputParameter=strCapturedText						'Setting Output Parameter
							Set objWebElement=Nothing
							'endTime = Timer()
							'ExeTime = FormatNumber(endTime - startTime,3)
							'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
							 If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										Call Error_Recovery ("CONTINUE")
							End If

							If Flag =1  Then
									CaptureTextWebElement = message
									blnMainFailFlag = True
									ImagePath=CaptureScreenshot(objWebElement,message)
							Else
									CaptureTextWebElement = strCapturedText
							End If
							If blnDefault_eSwiftReporting Then  
									Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
							End If
End If
End Function

'**********************************************************************************************************************************************************************
'Name of the Function: ClickButton(formShortTitle,buttonDescriptionOrLabelOrDeveloperName)
'Author : TCS
'Date : 13.09.2011
'Description               : Click a Button in Oracle Form       
'Input Parameters : formShortTitle : Short Title Property of the Oracle Form
' buttonDescriptionOrLabel : Description / Label Property of the Button 
' (Choose which one is available. Can choose either  in case both are present)
'Output Parameters : True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function ClickButton(formShortTitle,buttonDescriptionOrLabelOrDeveloperName)
If Not Environment.Value("blnFatalError") Then
'		Dim blnObjectError
		blnObjectError=False
		startTime=Timer()
		stepName="Click Button"
		inputParameter="<b>Short Title of the Form : </b>" & formShortTitle & "<br><b>Button Description/Label : </b>" & buttonDescriptionOrLabelOrDeveloperName
		strStepDescription= "Click the button [" & buttonDescriptionOrLabelOrDeveloperName & "]"
		On Error Resume Next
		Dim objButton,intSetFlag
		intSetFlag=1

		If OracleFormWindow("short title:="& formShortTitle).OracleButton("description:="& buttonDescriptionOrLabelOrDeveloperName).Exist(gObjectTimeoutLimit) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle).OracleButton("description:="& buttonDescriptionOrLabelOrDeveloperName)
				intSetFlag=0
		ElseIf OracleFormWindow("short title:="& formShortTitle).OracleButton("label:="& buttonDescriptionOrLabelOrDeveloperName).Exist(gObjectTimeoutLimit) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle).OracleButton("label:="& buttonDescriptionOrLabelOrDeveloperName)
				intSetFlag=0
		ElseIf OracleFormWindow("short title:="& formShortTitle).OracleButton("developer name:="& buttonDescriptionOrLabelOrDeveloperName).Exist(gObjectTimeoutLimit) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle).OracleButton("developer name:="& buttonDescriptionOrLabelOrDeveloperName)
				intSetFlag=0
		Else
				status="FAIL"
				Flag=1
				message="[ " & buttonDescriptionOrLabelOrDeveloperName &"] Button does not Exist."
				blnObjectError=True
				Call ReporterFunction(strLibraryFileName,"ClickButton","1",stepName,message)
		End If

		If intSetFlag=0 Then
				If objButton.GetROProperty("enabled") Then
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											ImagePath=CaptureScreenshot(objButton,strStepDescription)
										End if  
							objButton.Click
							If blnIgnoreError = False  Then
										blnExceptionFlag = Error_Listener ("ClickButton",objButton)
							else
										blnExceptionFlag= False
										blnIgnoreError = False
							End If
							If  Not blnExceptionFlag Then
										status="DONE"
										message="[ " & buttonDescriptionOrLabelOrDeveloperName &"] Button clicked Successfully."
										Call ReporterFunction(strLibraryFileName,"ClickButton","2",stepName,message)
									 
							else
										Flag=1
										status="FAIL"
										message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
										Call ReporterFunction(strLibraryFileName,"ClickButton","1",stepName,message) 
							End If     
				Else
							status="FAIL"
							Flag=1
							message="[ " & buttonDescriptionOrLabelOrDeveloperName &"] Button is Disabled."
							blnObjectError=True
							  Call ReporterFunction(strLibraryFileName,"ClickButton","1",stepName,message)
				End If
		End If 
		Set objButton=Nothing
		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)
		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

		If  blnObjectError  Then
				Environment.Value("blnFatalError")=True
				Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
							ClickButton = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objButton,message)
			Else
							ClickButton = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
End if 
End Function

'*********************************************************************************************************************************************************************
'Name of the Function	:	ClickButtonTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,buttonLabelOrDescription)
'Author									:	TCS
'Date			   				  	:	23.09.2011
'Description				:	Click a Button inside Oracle Tabbed Region
'Input Parameters	   :	formShortTitle : Short Title Property of the Oracle Form Window
'												tabbedRegionLabel : Label Property of the Oracle Tabbed Region
'												tabbedRegionIndex : Index of the Oracle Tabbed Region(Normally set as 0. For more than one identical object need to change accordingly.)
'												buttonLabelOrDescription : Description / Label Property of the Oracle Button (Choose which one is available. Can choose either  in case both are present.)
'Output Parameters       :Boolean 'True ' on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Function ClickButtonTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,buttonLabelOrDescription)
	 If Not Environment.Value("blnFatalError") Then
'					Dim blnObjectError : blnObjectError=False
					Dim objButton,intSetFlag
					'startTime=Timer()
					stepName="Click Button"
					inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b>Label or Description of the Button  : </b>" & buttonLabelOrDescription
					strStepDescription= "Click the button [" & buttonDescriptionOrLabelOrDeveloperName & "] in TabbedRegion [" & tabbedRegionLabel & "]"
					On Error Resume Next
					intSetFlag=1
					If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleButton("label:="& buttonLabelOrDescription).Exist(gObjectTimeoutLimit) Then
										Set objButton=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleButton("label:="& buttonLabelOrDescription)
										intSetFlag=0
					ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleButton("description:="& buttonLabelOrDescription).Exist(gObjectTimeoutLimit) Then
										Set objButton=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleButton("description:="& buttonLabelOrDescription)
										intSetFlag=0
					Else
										status="FAIL"
										Flag=1
										message=" Button Object "& buttonLabelOrDescription & " Not Found."
										blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"ClickButtonTabbedRegion","1",stepName,message)
					End If	
					If intSetFlag=0 Then
										If objButton.GetROProperty("enabled") Then
											If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																		ImagePath=CaptureScreenshot(objButton,strStepDescription)
																	End if
														objButton.Click
														blnExceptionFlag = Error_Listener (stepName,objButton)
														If Not blnExceptionFlag Then
																	status="DONE"
																	message="[ " & buttonLabelOrDescription &"] Button clicked Successfully."
																	Call ReporterFunction(strLibraryFileName,"ClickButtonTabbedRegion","2",stepName,message)
																	
														Else
																	status="FAIL"
																	Flag=1
																	message="[ " & buttonLabelOrDescription &"] Button Failed to Click " & Err.Description
																	Call ReporterFunction(strLibraryFileName,"ClickButtonTabbedRegion","1",stepName,message)    
														End If
										Else
														status="FAIL"
														Flag=1
														message="[ " & buttonLabelOrDescription & " ] Button is Disabled."
														blnObjectError=True
														Call ReporterFunction(strLibraryFileName,"ClickButtonTabbedRegion","1",stepName,message)
										End If
				End If
				Set objButton=Nothing
				'endTime=Timer()
				'ExeTime = FormatNumber(endTime - startTime,3) 
				'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

				If  blnObjectError  Then
					Environment.Value("blnFatalError")=True
					Call Error_Recovery ("CloseAllForms")
		 		End If
				If Flag =1  Then
									ClickButtonTabbedRegion = message
									blnMainFailFlag = True
									ImagePath=CaptureScreenshot(objButton,message)
				Else
									ClickButtonTabbedRegion = True
				End If
				If blnDefault_eSwiftReporting Then  
				Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
  End If
End Function



'*********************************************************************************************************************************************************************
'Name of the Function		:	ClickButtonWeb(browserName,buttonName,buttonIndex)
'Author									:	Arnab
'											:	26.09.2011
'Description                    :	Click  a button in Web based Oracle Forms
'Input Parameters        :	browserName : Name Property of the Browser
'											buttonName: Name Property of the WebButton
'											buttonIndex: Index of the WebButton(Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function ClickButtonWeb(browserName,buttonName,buttonIndex)
    BalloonTooltip.Show "e-Swift Automation","Executing Now : ClickButtonWeb"
	If Not Environment.Value("blnFatalError") Then
'		Dim blnObjectError
		blnObjectError=False
		startTime=Timer()
		stepName="Click Button"
		inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Button Name : </b>"& buttonName &"<br><b>Button Index : </b>" & buttonIndex
		strStepDescription= "Click the button [" & buttonName & "]"
		On Error Resume Next
		If browserName <>"" AND buttonName <>"" AND  buttonIndex <>"" Then
			Set obj= Description.Create()
			obj("micclass").value="Page"

			Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")
			Set objWebButton=Browser("name:="& browserName).Page("title:="& pageTitle).WebButton("name:="& buttonName,"index:=" & buttonIndex)
			If objWebButton.Exist(3) Then
				If objWebButton.GetROProperty("disabled")=0  Then
				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
								ImagePath=CaptureScreenshot(objWebButton,strStepDescription)
				End if
				
								
					objWebButton.Click
	
'					blnExceptionFlag = Error_Listener ("ClickButtonWeb",objWebButton)
					If  Not blnExceptionFlag Then
						status="DONE"
						message="Web Button [ "& buttonName &" ]  has been Clicked Successfully."
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWeb","2",stepName,message)

					else
						Flag=1
						status="FAIL"
						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWeb","1",stepName,message)																	
					End If     
				Else
					status="FAIL"
					Flag=1
					message="Web Button [ "& buttonName &" ]  is Disabled."
					blnObjectError=True
				  Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWeb","1",stepName,message)
				End If

			Else
				status="FAIL"
				Flag=1
				message="Web Button [ "& buttonName &" ]  not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWeb","1",stepName,message)
			End If
			
		Set objWebButton=Nothing
		Set obj=nothing
		Set childObj=nothing
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickButtonWeb","1",stepName,message)
		End If

		endTime = Timer()
		ExeTime = FormatNumber(endTime - startTime,3)

		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
'			Call Error_Recovery ("CloseAllForms")
		End If

			If Flag =1  Then
							ClickButtonWeb = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebButton,message)
			Else
							ClickButtonWeb = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If
End Function



'*********************************************************************************************************************************************************************
'Name of the Function   : ClickFlexButton
'Author		     					  :TCS
'Date			 				     :22-Sep-2011
'Description		          :  Click on FlexButton of oracle flex window
'Input Parameters	     : flexWindowTitle:-title property value of the flex window  ,   buttonLabelOrDescription- :- Label Or Description property value of the button in the flex window   
'Output Parameters     :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
 Function ClickFlexButton(flexWindowTitle,buttonLabelOrDescription)
	  If Not Environment.Value("blnFatalError") Then
'				  Dim blnObjectError:	blnObjectError=False
				  Dim blnObjectFound : blnObjectFound =False
				  'startTime=Timer()
				  stepName="Click Button in Flex Window"
				  inputParameter="<b>Title of the Oracle Flex Window :</b>" & flexWindowTitle & "<br><b> Label Or Description of the Button :</b> " & buttonLabelOrDescription 
				  strStepDescription= "Click the Flex button [" & buttonLabelOrDescription & "]"
				  On error resume next
				  
				   If  OracleFlexWindow("title:=" & flexWindowTitle).OracleButton("label:=" & buttonLabelOrDescription).Exist(gObjectTimeoutLimit) Then
											 Set objButtonLabelOrDescription=OracleFlexWindow("title:=" & flexWindowTitle).OracleButton("label:=" & buttonLabelOrDescription)
											 blnObjectFound = True
				   ElseIf OracleFlexWindow("title:=" & flexWindowTitle).OracleButton("description:=" & buttonLabelOrDescription).Exist(gObjectTimeoutLimit) Then
											 Set objButtonLabelOrDescription=OracleFlexWindow("title:=" & flexWindowTitle).OracleButton("description:=" & buttonLabelOrDescription)
											 blnObjectFound = True
				   Else
											 status="FAIL"
											 Flag=1
											 message=" Flex Button Object ["& buttonLabelOrDescription & "] Not Found"
											 blnObjectError=True
											 Call ReporterFunction(strLibraryFileName,"ClickFlexButton","1",stepName,message)
					End If
					If  blnObjectFound Then
											 If objButtonLabelOrDescription.Exist(gObjectTimeoutLimit) Then
																				If objButtonLabelOrDescription.GetROProperty("enabled") Then
																								If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																									ImagePath=CaptureScreenshot(objButtonLabelOrDescription,strStepDescription)
																								End if																				
																								objButtonLabelOrDescription.Click 		
																								blnExceptionFlag = Error_Listener ("ClickFlexButton",objButtonLabelOrDescription)
																								If  Not blnExceptionFlag Then
																												status="DONE"
																												message="[ " & flexWindowTitle & " ] flex window clicked successfully"
																												Call ReporterFunction(strLibraryFileName,"ClickFlexButton","2",stepName,message)																												
																								else
																												Flag=1
																												status="FAIL"
																												message =  "<br> Unexpected Error Encountered on Clicking Flex Button" & buttonLabelOrDescription &" </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																												Call ReporterFunction(strLibraryFileName,"ClickFlexButton","1",stepName,message)																	
																								End If	                  
														
																				 Else
																								status="FAIL"
																								Flag=1
																								message="[ " & buttonLabelOrDescription & " ] Button Not Enabled"
																								blnObjectError=True
																								Call ReporterFunction(strLibraryFileName,"ClickFlexButton","1",stepName,message)
																			   End If	
											End If			
					End If
				 
					Set objButtonLabelOrDescription=nothing

					If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										Call Error_Recovery ("CloseAllForms")
					End If

					If Flag =1  Then
							ClickFlexButton = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objButtonLabelOrDescription,message)
			Else
							ClickFlexButton = True
			End If
			If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If
End If
End Function



'*********************************************************************************************************************************************************************
'Name of the Function	:	ClickLinkWeb(browserName,linkName,linkIndex)
'Author								:	TCS
'Date                             :	26.09.2011
'Description				:	Click  a Link in Web based Oracle 
'Input Parameters	   	:	browserName : Name Property of the Browser
'										linkNameOrText: Name Property of the Link
'										linkIndex: Index of the Link	(Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters     :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function ClickLinkWeb(browserName,linkName,linkIndex)
	If UCASE(linkName)="LOGOUT" Then
	
		startTime=Timer()
		stepName="Click Link"
		inputParameter="<b>Browser Name : </b>" & browserName &"<br><b>Link Name : </b>"& linkName &"<br><b>Link Index : </b>" & linkIndex
		strStepDescription= "Click the link [" & linkName & "]"
		On Error Resume Next

		If browserName <>"" AND linkName <>"" AND  linkIndex <>"" Then
			Set obj= Description.Create()
			obj("micclass").value="Page"
			Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")
			Set objLink=Browser("name:="& browserName).Page("title:="& pageTitle).Link("name:="& linkName,"index:="& linkIndex)
			If  objLink.Exist(10) Then
				If objLink.GetROProperty("disabled")=0  Then
					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
						ImagePath=CaptureScreenshot(objLink,strStepDescription)
					End if

				
					objLink.Click

''					blnExceptionFlag = Error_Listener ("ClickLinkWeb",objLink)
					If  Not blnExceptionFlag Then
						status="DONE"
						message="Link [ "& linkName &" ] has been Clicked Successfully."
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWeb","2",stepName,message)
					


					Else
						Flag=1
						status="FAIL"
						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWeb","1",stepName,message)																	
					End If

				Else
					status="FAIL"
					Flag=1
					message="Link [ "& linkName &" ] is Disabled."
					blnObjectError=True
					Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWeb","1",stepName,message)
				End If
			Else
				status="FAIL"
				Flag=1
				message="Link [ "& linkName &" ] not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWeb","1",stepName,message)
			End If
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWeb","1",stepName,message)
		End If
		Set objLink=Nothing
		Set childObj=Nothing
		Set obj=Nothing
		endTime = Timer()
		ExeTime = FormatNumber(endTime - startTime,3)

		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
'			Call Error_Recovery ("CloseAllForms")
		End If

			If Flag =1  Then
							ClickLinkWeb = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objLink,message)
			Else
							ClickLinkWeb = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	ElseIf Not Environment.Value("blnFatalError") Then
'		Dim blnObjectError, customMessage
		blnObjectError=False
		startTime=Timer()
		stepName="Click Link"
		inputParameter="<b>Browser Name : </b>" & browserName &"<br><b>Link Name : </b>"& linkName &"<br><b>Link Index : </b>" & linkIndex
		strStepDescription= "Click the link [" & linkName & "]"
		On Error Resume Next

		If browserName <>"" AND linkName <>"" AND  linkIndex <>"" Then
			Set obj= Description.Create()
			obj("micclass").value="Page"
			Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")
			Set objLink=Browser("name:="& browserName).Page("title:="& pageTitle).Link("name:="& linkName,"index:="& linkIndex)
			If  objLink.Exist(30) Then
				If objLink.GetROProperty("disabled")=0  Then
					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
						ImagePath=CaptureScreenshot(objLink,strStepDescription)
					End if

				
					objLink.Click

''					blnExceptionFlag = Error_Listener ("ClickLinkWeb",objLink)
					If  Not blnExceptionFlag Then
						status="DONE"
						message="Link [ "& linkName &" ] has been Clicked Successfully."
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWeb","2",stepName,message)
					


					Else
						Flag=1
						status="FAIL"
						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
						Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWeb","1",stepName,message)																	
					End If

				Else
					status="FAIL"
					Flag=1
					message="Link [ "& linkName &" ] is Disabled."
					blnObjectError=True
					Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWeb","1",stepName,message)
				End If
			Else
				status="FAIL"
				Flag=1
				message="Link [ "& linkName &" ] not Found."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWeb","1",stepName,message)
			End If
		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","ClickLinkWeb","1",stepName,message)
		End If
		Set objLink=Nothing
		Set childObj=Nothing
		Set obj=Nothing
		endTime = Timer()
		ExeTime = FormatNumber(endTime - startTime,3)

		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
'			Call Error_Recovery ("CloseAllForms")
		End If

			If Flag =1  Then
							ClickLinkWeb = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objLink,message)
			Else
							ClickLinkWeb = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If
End Function



'*********************************************************************************************************************************************************************
'Name of the Function	:	ClickLogoutLink
'Author								:	TCS
'Date                             :	26.09.2011
'Description				:	Clicking a Logout Link in Web based Oracle 
'Input Parameters	   	:	None 
'Output Parameters     :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************

Public Function ClickLogoutLink()
'    If Not Environment.Value("blnFatalError") Then
						Dim blnObjectError
						blnObjectError=False
						'startTime=Timer()
						stepName="Cilck Logout" 
						On Error Resume Next
						Set linkDesc=Description.Create()
						linkDesc("micclass").value="Link"
						linkDesc("name").value="Logout"
						linkDesc("html tag").value="A"

						Set linkObj=Browser("name:=Oracle Applications Home Page").Page("title:=Oracle Applications Home Page").ChildObjects(linkDesc)
						If Err.Number<>0 Then
									status="FAIL"
									Flag=1
									message= "Logout Link Not Found."
									blnObjectError=True
									Call ReporterFunction(strLibraryFileName,"ClickLogoutLink","1",stepName,message)
						Else
									Call WaitForObject(linkObj(0),10) 
									If linkObj(0).Exist(gObjectTimeoutLimit+3)Then
														linkObj(0).Click
														Set objDilaogBox =  Browser("title:=.*").Dialog("text:=Security Warning")
														Call WaitForObject(objDilaogBox,10) 
														If objDilaogBox.Exist(1) Then 
																								'If Browser("title:=https://stg-oralogin-health.ge.com/sso/logout").Dialog("text:=Security Information").Exist(1) Then 
																								objDilaogBox.WinButton("text:=&Yes").Click
														End if 
					
														'	blnExceptionFlag = Error_Listener ("ClickLogoutLink",linkObj(0))
														 '   If  Not blnExceptionFlag Then
                                                        If Browser("name:=Oracle Applications Home Page").Exist(1) Then
																								status="FAIL"
																								Flag=1
																								message= " Logout Link not Clicked."
																								blnObjectError=True
																								Call ReporterFunction(strLibraryFileName,"ClickLogoutLink","1",stepName,message)	
														Else
																								status="DONE"
																								message=" Logout Link clicked Successfully."
																								Call ReporterFunction(strLibraryFileName,"ClickLogoutLink","2",stepName,message)
														End If												
													' else
														'		Flag=1
															'	status="FAIL"
															'	message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																'Call ReporterFunction(strLibraryFileName,"ClickLogoutLink","1",stepName,message)																	
                                                       'End If
									Else
											status="FAIL"
											Flag=1
											message= "Logout Link Not Found."
											blnObjectError=True
											Call ReporterFunction(strLibraryFileName,"ClickLogoutLink","1",stepName,message)
									End If
						End If
						Set linkObj=Nothing
						Set linkDesc=Nothing
						'endTime=Timer()
						'ExeTime = FormatNumber(endTime - startTime,3) 
						'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

						If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
									ImagePath=CaptureScreenshot(stepName,inputParameter )
						ElseIf Flag=1 Then 
									ImagePath=CaptureScreenshot(stepName,inputParameter )
						End If
						 If  blnObjectError  Then
									Environment.Value("blnFatalError")=True
									'Call Error_Recovery ("CloseAllForms")
						End If
						If Flag =1  Then
									ClickLogoutLink = message
									blnMainFailFlag = True
						Else
									ClickLogoutLink = True
						End If
'	End If
End Function




'**********************************************************************************'***********************************************************************************
'Name of the Function   : ClickNotificationButton
'Author		     					  :TCS
'Date			 				     :15.09.2011
'Description		          : Approve/Decline/cancel action on Notification window
'Input Parameters	     : notificationTitle:-title property value of the notification window   
 '                                           buttonLabelOrDescription-   Label Or Description property value of the notification window button
'Output Parameters       :Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'***********************************************************************************
Function ClickNotificationButton(notificationTitle,buttonLabelOrDescription )
		If Not Environment.Value("blnFatalError") Then
'						Dim blnObjectError:			   blnObjectError=False
						Dim blnObjectFound :		blnObjectFound = False
						'startTime=Timer()
						stepName="Check Notification"
						inputParameter="<b>Title of the Oracle Notification : </b>" & notificationTitle & "<br><b> Label or Description of the Button  : </b> " & buttonLabelOrDescription
						On error resume next
  
					   If buttonLabelOrDescription = "YES" Then
										If  OracleNotification("title:=" & notificationTitle).OracleButton("label:=YES").Exist(gObjectTimeoutLimit) Then
												Set objButtonLabelOrDescription=OracleNotification("title:=" & notificationTitle).OracleButton("label:=YES")
												blnObjectFound = True
										ElseIf OracleNotification("title:=" & notificationTitle).OracleButton("label:=OK").Exist(gObjectTimeoutLimit) Then
					   							Set objButtonLabelOrDescription=OracleNotification("title:=" & notificationTitle).OracleButton("label:=OK")
												blnObjectFound = True
										ElseIf OracleNotification("title:=" & notificationTitle).OracleButton("description:=YES").Exist(gObjectTimeoutLimit) Then
												Set objButtonLabelOrDescription=OracleNotification("title:=" & notificationTitle).OracleButton("description:=YES")
												blnObjectFound = True
										ElseIf OracleNotification("title:=" & notificationTitle).OracleButton("description:=OK").Exist(gObjectTimeoutLimit) Then
					   							Set objButtonLabelOrDescription=OracleNotification("title:=" & notificationTitle).OracleButton("description:=OK")
												blnObjectFound = True
										Else
												status="FAIL"
												Flag=1
												message=" Notification window with Title=' " & notificationTitle & " with button=' " & buttonLabelOrDescription & " ' Not Found."
										'		blnObjectError=True
												Call ReporterFunction(strLibraryFileName,"ClickNotificationButton","1",stepName,message)
										End If
					   ElseIf OracleNotification("title:=" & notificationTitle).OracleButton("label:=" & buttonLabelOrDescription).Exist(gObjectTimeoutLimit) Then
										Set objButtonLabelOrDescription=OracleNotification("title:=" & notificationTitle).OracleButton("label:=" & buttonLabelOrDescription)
										blnObjectFound = True
					   ElseIf OracleNotification("title:=" & notificationTitle).OracleButton("description:=" & buttonLabelOrDescription).Exist(gObjectTimeoutLimit) Then
										Set objButtonLabelOrDescription=OracleNotification("title:=" & notificationTitle).OracleButton("description:=" & buttonLabelOrDescription)
										blnObjectFound = True
					   Else
										status="FAIL"
										Flag=1
										message=" Notification window with Title=' " & notificationTitle & " with button=' " & buttonLabelOrDescription & " ' Not Found."
										'blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"ClickNotificationButton","1",stepName,message)
					   End If
						If blnObjectFound = True Then
										   If objButtonLabelOrDescription.Exist(gObjectTimeoutLimit) Then 
														If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
														ImagePath=CaptureScreenshot(objButtonLabelOrDescription,strStepDescription)
														End if	
												
													   objButtonLabelOrDescription.Click
							'						   blnExceptionFlag = Error_Listener ("Click Notification",objButtonLabelOrDescription)
							'
							'						   If Not blnExceptionFlag Then
							'										status="DONE"
							'										message="[ " & notificationTitle & " ] Notification  clicked"
							'										Call ReporterFunction(strLibraryFileName,"ClickNotificationButton","2",stepName,message) 
							'							Else
							'										status="FAIL"
							'										Flag=1
							'										message="<br> Unexpected Error Encountered while clicking Notification</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
							'                                        Call ReporterFunction(strLibraryFileName,"ClickNotificationButton","1",stepName,message)
							'						  End If
																				   If OracleNotification("title:=" & notificationTitle).Exist(gObjectTimeoutLimit) Then
																									objButtonLabelOrDescription.Click
																								 'status="Fail"
																								 'Flag=1
																								  'blnObjectError=True
																								'message="[ " & notificationTitle & " ] Notification  window not closed successfully"
																								'Call ReporterFunction(strLibraryFileName,"ClickNotificationButton","1",stepName,message)
																					End if
'																					Else
																								status="DONE"
																								message=" ' " & notificationTitle & " ' Notification  window closed successfully"
																								Call ReporterFunction(strLibraryFileName,"ClickNotificationButton","2",stepName,message) 
'																				   End If   
																	
										   End If
						End If
					   Set objButtonLabelOrDescription=Nothing
					   
						If Flag =1  Then
							ClickNotificationButton = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objButtonLabelOrDescription,message)
						Else
							ClickNotificationButton = True
						End If
						If blnDefault_eSwiftReporting Then  
						Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
 End If
  
 End Function


 '**********************************************************************************'***********************************************************************************
'Name of the Function	 ->ClickTextField
'Author									->TCS
'Date									 ->27-Sep-2011
'Description					   ->Clicks a TextField
'Input Parameters			 ->formShortTitle : Short Title of the Oracle Form
'												textFieldPromptOrDescription->Prompt  or description property value of the text field,
'												textFieldIndex-> index of the text fileld
'Output Parameters		  ->Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'***********************************************************************************
Function ClickTextField(formShortTitle,textFieldPromptOrDescription,textFiledIndex)
	  If Not Environment.Value("blnFatalError") Then
						Dim blnObjectError :blnObjectError = False
						Dim blnExceptionFlag 
						'startTime=Timer()
						stepName="Click a TextField "
						strStepDescription= "Click the TextField [" & textFieldPromptOrDescription & "]"
						inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Prompt  or Description of the text field : </b>" & textFieldPromptOrDescription &"<br><b>Index of the text field : </b>" & textFiledIndex		
						On error resume next
						intSetFlag=1
						If OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:=" & textFieldPromptOrDescription,"index:=" & textFiledIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Description
											Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:=" & textFieldPromptOrDescription,"index:=" & textFiledIndex)
											intSetFlag=0
						ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:=" & textFieldPromptOrDescription,"index:=" & textFiledIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Promp
											Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:=" & textFieldPromptOrDescription,"index:=" & textFiledIndex)
											intSetFlag=0
						Else
										  status="FAIL"
										  Flag=1
										  message="Text Field object [ "&  textFieldPromptOrDescription &" ] Not Found."
								 
										 Call ReporterFunction(strLibraryFileName,"ClickTextField","1",stepName,message)
						End If
						 If intSetFlag=0 Then
										 If  objText.GetROProperty("enabled") Then	
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																		ImagePath=CaptureScreenshot(objText,strStepDescription)
													End if										 
													objText.Click
																	blnExceptionFlag = Error_Listener ("ClickTextField",objText)
																		If Not blnExceptionFlag Then
																			   status="DONE"
																			   message="[ " & textFieldPromptOrDescription & " ] Clicked Sucessfully."
																			   Call ReporterFunction(strLibraryFileName,"ClickTextField","2",stepName,message)
																		 Else
																				status="FAIL"
																				Flag=1
																				message="<br> Unexpected Error Encountered on Clicking test field "& textFieldPromptOrDescription &" </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																				Call ReporterFunction(strLibraryFileName,"ClickTextField","1",stepName,message)
																		End If
														 
										   Else
																		 status="FAIL"
																		 Flag=1
																		 message="Text Field "&textFieldPromptOrDescription &" is diabled "
																		 blnObjectError = True
																		 Call ReporterFunction(strLibraryFileName,"ClickTextField","1",stepName,message)

										  End If
						End If
						Set objText=Nothing
						'endTime=Timer()
						'ExeTime = FormatNumber(endTime - startTime,3) 
						'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)


						 If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										Call Error_Recovery ("CloseAllForms")
						End If
						If Flag =1  Then
							ClickTextField = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
			Else
							ClickTextField = True
			End If
			If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If
   End If
End Function



'*********************************************************************************************************************************************************************
'Name of the Function   : CloseBrowser
'Author		     					  :TCS
'Date			 				     :15.09.2011
'Description		          : Closes the Browser.
'Input Parameters	     :  browserTitle:- title property value of the Browser
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************

Function CloseBrowser(browserTitle)
'	  If Not Environment.Value("blnFatalError") Then
				'startTime=Timer()
				stepName="Close Browser" 
				inputParameter=" <b>Title of the browser : </b>" & browserTitle 
				Dim blnObjectError:   blnObjectError=False
				On error resume next
				'Call WaitForObject(browser("title:=" & browserTitle),20)
									 If browser("name:=" & browserTitle).Exist(60) Then 
									 		browser("name:=" & browserTitle).close									 				
									 ElseIf browser("title:=" & browserTitle).Exist(60) Then
										   browser("title:=" & browserTitle).Close
									 Else  	
											 status="FAIL"
											 Flag=1
											 blnObjectError=True
											 message="[ "& browserTitle & " ] page object  Not Found/ missing"
											 Call ReporterFunction(strLibraryFileName,"CloseBrowser","1",stepName,message)
									 End If
												 If browser("title:=" & browserTitle).Exist(gObjectTimeoutLimit) or browser("name:=" & browserTitle).Exist(gObjectTimeoutLimit+2) Then
															status="FAIL"
															message="[ "& browserTitle & " ]  page  not closed sucessfully"
															  blnObjectError=True
															Call ReporterFunction(strLibraryFileName,"CloseBrowser","1",stepName,message)
								
												  else
															 status="DONE"
															 message= "[ " & browserTitle & " ] page closed successfully"
															 Call ReporterFunction(strLibraryFileName,"CloseBrowser","2",stepName,message)
												 End  If
									
			  'endTime=Timer()
			 'ExeTime = FormatNumber(endTime - startTime,3) 

			If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
									ImagePath=CaptureScreenshot(stepName,inputParameter )
			ElseIf Flag=1 Then 
									ImagePath=CaptureScreenshot(stepName,inputParameter )
            End If

			  'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
			If  blnObjectError  Then
									Environment.Value("blnFatalError")=True
									'Call Error_Recovery ("CloseAllForms")
			End If
			If Flag =1  Then
								CloseBrowser= message
								blnMainFailFlag = True
			Else
								CloseBrowser= True
			End If

'End If

End Function






'**********************************************************************************
'Name of the Function   : CloseForm
'Author		    				 :   Debabrata
'Date						     :13-SEP-2011
'Description		     : To Close a oracle form window
'			        
'			        
'Input Parameters	     : formShortTitle: -Short title property value of the window,in case of multiple window input  short title property value of the parent window
                                         
'Output Parameters        :
'***********************************************************************************





Function CloseForm(formShortTitle)
     If Not Environment.Value("blnFatalError") Then
								Dim blnObjectError
							      blnObjectError=False
								'startTime=Timer()
								stepName="Close Oracle Form"
								inputParameter="<b> Form Short title : </b>" & formShortTitle
								On error resume next
							
							
								Set objFormWindow=OracleFormWindow("short title:=" & formShortTitle)
								If objFormWindow.exist(gObjectTimeoutLimit) Then 
														If blnCloseAllForms= True  Then
																objFormWindow.SelectMenu "File->Close Form"
																If OracleNotification("title:=Caution").Exist(gObjectTimeoutLimit)Then
																					OracleNotification("title:=Caution").Click 
																End if 
														End If
							  
															 If objFormWindow.exist(gObjectTimeoutLimit) Then 
																			  objFormWindow.CloseWindow
																				 '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
																				 If OracleNotification("title:=Forms").Exist(gObjectTimeoutLimit) Then
																							OracleNotification("title:=Forms").OracleButton("label:=Yes").Click 
																				 End If
																				 If OracleNotification("title:=Decision").OracleButton("label:=Yes").Exist(gObjectTimeoutLimit) Then
																							OracleNotification("title:=Decision").OracleButton("label:=Yes").Click 
																				 End If
																			 	 If OracleNotification("title:=Decision").OracleButton("label:=Save").Exist(gObjectTimeoutLimit) Then
																							OracleNotification("title:=Decision").OracleButton("label:=Save").Click 
																				 End If 

																				 If OracleNotification("title:=Caution").Exist(gObjectTimeoutLimit)Then
																						 OracleNotification("title:=Caution").OracleButton("label:=OK").Click 
																						 If OracleNotification("title:=Caution").Exist(gObjectTimeoutLimit)Then
																								OracleNotification("title:=Caution").OracleButton("label:=OK").Click 
																						 End if 
																				 End if
																				If OracleNotification("title:=.*").Exist(gObjectTimeoutLimit)Then
																						If  OracleNotification("title:=.*").OracleButton("label:=OK").Exist(1) Then
																							 OracleNotification("title:=.*").OracleButton("label:=OK").Click 
																						End If
																					 
																				 End if
																				 
																												blnExceptionFlag = Error_Listener ("CloseForm",objFormWindow)																														'// end
														
																												If Not blnExceptionFlag Then
																															If objFormWindow.Exist(1) Then
																																		status="FAIL"
																																		Flag=1
																																		message="[ " & formShortTitle & " ] form closed "
																																		blnObjectError=True
																																		Call ReporterFunction(strLibraryFileName,"CloseForm","1",stepName,message)
																								
																															Else
																																		status="DONE"
																																		message="[ " & formShortTitle & " ] form closed successfully"
																																		Call ReporterFunction(strLibraryFileName,"CloseForm","2",stepName,message)  
																															End If
																											Else
																														status="FAIL"
																														Flag=1
																														message="<br> Unexpected Error Encountered on trying to close the form "&formShortTitle &": </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																														Call ReporterFunction(strLibraryFileName,"CloseForm","1",stepName,message)
																											End If
																	 else					
											
																									status="DONE"
																									message="[ " & formShortTitle & " ] form closed successfully"
																									Call ReporterFunction(strLibraryFileName,"CloseForm","2",stepName,message)  
																	   End If
		Else
							status="FAIL"
							Flag=1
							message="[ " & formShortTitle & " ] form does not exist"
							blnObjectError=True										
							Call ReporterFunction(strLibraryFileName,"CloseForm","1",stepName,message)
		End if


			Set objFormWindow=Nothing
			'endTime=Timer()
			'ExeTime = FormatNumber(endTime - startTime,3) 
			'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

				If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
											ImagePath=CaptureScreenshot(stepName,inputParameter )
				ElseIf Flag=1 Then 
											ImagePath=CaptureScreenshot(stepName,inputParameter )
				End If
				If  blnObjectError  and gblnIgnoreApplicationError = False  Then
								Environment.Value("blnFatalError")=True
								Call Error_Recovery ("CloseAllForms")
				End If
				If gblnIgnoreApplicationError =True Then
											CloseForm  = True
											gblnIgnoreApplicationError =False
				elseIf Flag =1 Then
											CloseForm  = message
											blnMainFailFlag = True
				Else
											CloseForm  = True
				End If
	End if
End Function






''***********************************************************************************'***********************************************************************************
'Name of the Function : CompareData
'Author		    : TCS
'Date			    : 24/05/2013
'Description	    : Function to compare any 2 string values 
'Input Parameters	    : strExpectedData = Date expected 
'				strActualData = Actual Data
'				strMessage = message to be inserted uin HTML report
'				blnTrueIfFullStringMatch = Give TRUE if full matching of the texts are required		
'Output Parameters    :  TRUE/FALSE
'***********************************************************************************'***********************************************************************************

Function CompareData(ExpectedData,sActualValue)
	On Error Resume Next
	startTime=Timer()
	stepName="Compare Expected and Actula Data"
	inputParameter=" Expected Date  [ <b>"  & ExpectedData &" ] </b><br> Actual Data : <b>[ " & sActualValue & " ] </b>"
	'blnCaptureFlag =  True
    If blnTrueIfFullStringMatch Then
					If ExpectedData =  sActualValue Then
								status="PASS"
								message="Expected Data :  [ "&  ExpectedData  & " ] : Matches with Actual  Value : [ " & sActualValue & " ] "
								CompareData = TRUE
								
					Else
								Flag =1
								status="FAIL"
								message="Expected Data :  [ "&  ExpectedData  & " ] : DOES NOt MATCHwith Actual  Value : [ " & sActualValue & " ] "
								CompareData = message
								blnMainFailFlag = True
								Call ReporterFunction(strLibraryFileName,"CompareData","1",stepName,message)
					End If
	else
					If Instr(sActualValue,ExpectedData) > 0 Then
									status="PASS"
									message="Expected Data :  [ "&  ExpectedData  & " ] : Matches with Actual  Value : [ " & sActualValue & " ] "
									CompareData = TRUE
									
					Else
									Flag =1
									status="FAIL"
									message="Expected Data :  [ "&  ExpectedData  & " ] : DOES NOt MATCHwith Actual  Value : [ " & sActualValue & " ] "
									CompareData = message
									blnMainFailFlag = True
									Call ReporterFunction(strLibraryFileName,"CompareData","1",stepName,message)
					End If
	End If
	endTime=Timer()
			 ExeTime = FormatNumber(endTime - startTime,3)
	Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
End Function





'***********************************************************************************'***********************************************************************************
'Name of the Function  : ConvertDoubleDimArrayToString
'Author		    :  TCS
'Date			    :   1 Sep 2011
'Description	     :Function to convert a Double Dimensional array to string 
'Input Parameters	     :   arrSourceArray  = Array Variable 
'Output Parameters     :  String
'***********************************************************************************'***********************************************************************************


Function ConvertDoubleDimArrayToString(arrSourceArray)
			Dim strTempString
             strTempString  = " "
			 If isArray(arrSourceArray) Then
				For  i=0 to Ubound(arrSourceArray) 
					For j=0 to Ubound(arrSourceArray,2) 
								strTempString = strTempString  	& "  " & "[  "&arrSourceArray(i,j) &"  ] "
					Next
				Next 
				ConvertDoubleDimArrayToString = strTempString 
			 End If
End Function





'*********************************************************************************************************************************************************************
'Name of the Function		:	EnterTableFieldAgainstSelectedDataCell(formShortTitle,tableBlockName,columnToMatch,dataToMatch,columnToSet,valueToSet)
'Author									:	TCS
'Date                             		:	22.06.2012
'Description                    :	Enter a particular value in a given cell of Oracle table against  any known  table data 
'Input Parameters	     	:	formShortTitle : Short Title Property of the Oracle Form
'												tableBlockName:Block name of the table
'												dataToMatch:Data against which data need to be entered
												'columnToMatch:Coloumn name of the table which will be matched
												'columnToSet;Column whose value will be set
												'valueToSet:Value with which cell will be set.
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Function EnterTableFieldAgainstSelectedDataCell(formShortTitle,tableBlockName,columnToMatch,dataToMatch,columnToSet,valueToSet)
	If Not Environment.Value("blnFatalError") Then
			Dim blnObjectError:		    blnObjectError=False		
		   'startTime=Timer()
			jobDone=0
			On error resume next
			stepName="Enter Field"
			strStepDescription= dataToMatch & ": exists in the list and "& valueToSet &" : Entered in the "& columnToSet 
			inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br> <b>Block Name of Oracle table:</b> "& tableBlockName & "<br><b>Checking Column:  </b>"& columnToMatch &"<br> <b>Coloumn to Set: </b>" & columnToSet &"<br><b>Value to set:</b>" & valueToSet
			If  OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit)Then
												Set Ws = CreateObject("WScript.Shell")
												 i=1
												Set tableObj=OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName)
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
															ImagePath=CaptureScreenshot(tableObj,strStepDescription)
														End if
												Do            		
																			currentRowData=tableObj.GetFieldValue(i,columnToMatch)
																			If currentRowData=dataToMatch Then
																					tableObj.EnterField i,columnToSet,valueToSet
																					jobDone=1
																					Exit Do
																			 Else
																					tableObj.SetFocus i,columnToMatch
																					Ws.SendKeys "{Down}"
																					i=i+1
																			End If
																		  nextRowdata=tableObj.GetFieldValue(i,columnToMatch)
												Loop Until(currentRowData=nextRowdata)
												Set Ws=nothing
												blnExceptionFlag = Error_Listener ("EnterTableMatchingField",objTable)
												If Not blnExceptionFlag and jobDone=1 Then	
													

															status="DONE"
															message=dataToMatch & ": exists in the list and "& valueToSet &" : Entered in the "& columnToSet
															Call ReporterFunction(strLibraryFileName,"EnterTableFieldAgainstSelectedDataCell","2",stepName,message)
												  Else
														
															status="FAIL"
															Flag=1
															message="[" &dataToMatch & "] does not exist in the list"& columnToMatch
															Call ReporterFunction(strLibraryFileName,"EnterTableFieldAgainstSelectedDataCell","1",stepName,message)		
												 End If
				Else
                                           status="FAIL"
											Flag=1
											message="[" & tableBlockName & "] table doesnot exist"	 
											Call ReporterFunction(strLibraryFileName,"EnterTableFieldAgainstSelectedDataCell","1",stepName,message)		
				End If
				Set tableObj = Nothing
				'endTime=Timer()
				'ExeTime = FormatNumber(endTime - startTime,3) 
				'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
				 If  blnObjectError  Then
											Environment.Value("blnFatalError")=True
											Call Error_Recovery ("CloseAllForms")
				End If '
				
				If Flag =1  Then
							EnterTableFieldAgainstSelectedDataCell = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(tableObj,message)
			Else
							EnterTableFieldAgainstSelectedDataCell = True
			End If
			If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If
	End If 
End Function


'*******************************************************************************************************************************************************************************************

'Name of the Function   : EnterTextFlexField
'Author		     					  :TCS
'Date			 				     :22-Sep-2011
'Description		          : Entering a text to the text field in case of  OracleFlexWindow
'Input Parameters	     : flexWindowTitle->short title property value of oracle form window, textFieldPromtOrDescription->Prompt  or description property value of the text field,textFieldIndex->index of the testFiled,valueToEnter->value which will be entered
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'********************************************************************************************************************************************************************************************


Function EnterTextFlexField(flexWindowTitle,textFieldPromtOrDescription,textFieldIndex,valueToEnter)
				If Not Environment.Value("blnFatalError") Then
							 Dim blnObjectError:          blnObjectError=False
							 Dim blnObjectNotFound : blnObjectFound = False
							'startTime=Timer()
							stepName="Enter Flex Field "
							strStepDescription= "Enter value [ " & valueToEnter &  " ] in the Flex-Text field [ " & textFieldPromtOrDescription & "]"
							inputParameter="<b>Title of the flex window : </b>" & flexWindowTitle & "<br><b> Prompt Or Description of the TextField :</b> " & textFieldPromtOrDescription  & "<br><b> Index of the TextField : </b>" & textFieldIndex & "<br><b> ValueTo Enter : </b>" & valueToEnter
							On error resume next
        
                            If  OracleFlexWindow("title:=" & flexWindowTitle).OracleTextField("prompt:=" & textFieldPromtOrDescription ,"index:="& textFieldIndex).Exist(gObjectTimeoutLimit) Then
									Set objTextFieldPromtOrDescription=OracleFlexWindow("title:=" & flexWindowTitle).OracleTextField("prompt:=" & textFieldPromtOrDescription ,"index:="& textFieldIndex)
									blnObjectFound = True
			                ElseIf  OracleFlexWindow("title:=" & flexWindowTitle).OracleTextField("description:=" & textFieldPromtOrDescription ,"index:="& textFieldIndex).Exist(gObjectTimeoutLimit)  Then
									Set objTextFieldPromtOrDescription= OracleFlexWindow("title:=" & flexWindowTitle).OracleTextField("description:=" & textFieldPromtOrDescription ,"index:="& textFieldIndex)
									blnObjectFound = True
			               Else
									 status="FAIL"
									 Flag=1
									 message="Text Field [ "& textFieldPromtOrDescription   &" ] Not Found on Flex Window [ "& flexWindowTitle &"]"
									 blnObjectError=True
									 Call ReporterFunction(strLibraryFileName,"EnterTextFlexField","1",stepName,message)
			                End If
'                            If objTextFieldPromtOrDescription.Exist(3)  Then	
							If blnObjectFound Then
								If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																												ImagePath=CaptureScreenshot(objTextFieldPromtOrDescription,strStepDescription)
																										End if
																				 objTextFieldPromtOrDescription.Enter valueToEnter
																				 blnExceptionFlag = Error_Listener ("EnterTextFlexField",objTextFieldPromtOrDescription)
															   
                            				                                     If  Not blnExceptionFlag  Then
	     																								
																									  status="DONE"
																									  message="[ " & valueToEnter & " ] entered in the Text field"
																									  Call ReporterFunction(strLibraryFileName,"EnterTextFlexField","2",stepName,message)
																				else
																									  status="FAIL"
																									  Flag=1
																									  message="<br> Unexpected Error Encountered After Entering Text   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																									  Call ReporterFunction(strLibraryFileName,"EnterTextFlexField","1",stepName,message)
			
								                                                 End If														     
                            
                            End If
							'endTime=Timer()
						   'ExeTime = FormatNumber(endTime - startTime,3)       
							'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
							
							Set objTextFieldPromtOrDescription=nothing
							
							If Flag =1  Then
							EnterTextFlexField = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTextFieldPromtOrDescription,message)
			Else
							EnterTextFlexField = True
			End If
			If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If

	End If
End Function



'**********************************************************************************************************************
'Name of the Function   : EnterTextForm
'Author		     					  :TCS
'Date			 				     : 15/09/2011
'Description		          : Entering a text to the text field      
'Input Parameters	     : formShortTitle->short title of oracle form window,
' 													textFieldPromptOrDescription->Description of the text field
'															textFieldIndex -> Index of the text field
' 																valueToEnter->value which will be entered
'Output Parameters        :  Boolean True on Success ; Failure messsage on Fail
'****************************************************************************************************************************
Function EnterTextForm(formShortTitle,textFieldPromptOrDescription,textFieldIndex,valueToEnter) 
    BalloonTooltip.Show "e-Swift Automation","Executing Now : EnterTextForm" 
    If Not Environment.Value("blnFatalError") Then
								   Dim blnObjectError,blnObjectFound

								   blnObjectError=False
								   blnObjectFound = False
									'startTime=timer()
									stepName="Enter Text in Oracle Form "
									strStepDescription="Enter value [ " & valueToEnter & " ] in Form-Text field " & textFieldPromptOrDescription
									inputParameter="<b> Form:</b>"& formShortTitle &"<br><b> Text Box :</b>"& textFieldPromptOrDescription &"<br> <b>Value to enter : </b>" & valueToEnter 
									On Error Resume Next
																	If  OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
																				blnObjectFound = True 
																	Elseif OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:="& textFieldPromptOrDescription,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
																				blnObjectFound = True 
																	Elseif OracleFormWindow("short title:="& formShortTitle).OracleTextField("developer name:="& textFieldPromptOrDescription,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=OracleFormWindow("short title:="& formShortTitle).OracleTextField("developer name:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
																				blnObjectFound = True 
																	Else
																					status="FAIL"
																					Flag=1
                                                                                    blnObjectError=True
																					message="Given Text field [ " & textFieldPromptOrDescription & " ]  not found"
																				   Call ReporterFunction(strLibraryFileName,"EnterTextForm","1",stepName,message)
																    End If
									
									
																	If  blnObjectFound = True  Then 
																					If  objTextField.GetROProperty("editable") Then
																						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																										ImagePath=CaptureScreenshot(objTextField,strStepDescription)
																								End if
																								objTextField.Enter valueToEnter
																								strErrorFormName = formShortTitle
																								blnExceptionFlag = Error_Listener ("EnterTextForm",objTextField)
			
																								If  Not blnExceptionFlag Then	
																														status="DONE"
																								
																														message="Value [ " & valueToEnter & "] Entered in Textfield [" & textFieldPromptOrDescription &"]" 
																														Call ReporterFunction(strLibraryFileName,"EnterTextForm","2",stepName,message)
																								Else 
																														
																														status="FAIL"
																														Flag=1
																														message="<br> Unexpected Error Encountered After Entering Text in Form  </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																														Call ReporterFunction(strLibraryFileName,"EnterTextForm","1",stepName,message)
																								End If
																								
																					Else
																								 status="FAIL"
																								Flag=1
																								blnObjectError=True
																								message="[" & textFieldPromptOrDescription  & " ]  text box is non-editable"
																								Call ReporterFunction(strLibraryFileName,"EnterTextForm","1",stepName,message)
																							
																					End If
					
																	End if 
								
					


									Set objTextField=nothing

									If  blnObjectError  Then
													Environment.Value("blnFatalError")=True
													Call Error_Recovery ("CONTINUE")
									End If

									If Flag =1  Then
										EnterTextForm = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objTextField,message)
									Else
										EnterTextForm = True
									End If
									If blnDefault_eSwiftReporting Then  
									Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
									End If

	End if 
End Function



'
'*********************************************************************************************************************************************************************
'Name of the Function :	EnterTextTabbedRegionTable(formTitle,tabbedRegionLabel,tabbedRegionIndex ,tableBlockName,dataRowNo,dataColumnName,,valueToEnter)
'Author                         	:	TCS
'Date			   				   :	21-Jun-2012
'Description				:	Entering value in Text Field inside Oracle Tabbed Region
'Input Parameters	 :	formShortTitle : Short Title Property of the Oracle Form Window
'												tabbedRegionLabel : Label Property of the Oracle Tabbed Region
'												tabbedRegionIndex : Index of the Oracle Tabbed Region(Normally set as 0. For more than one identical object need to change accordingly.)
'										 		 tableBlockName->blockName of the oracle table
'													 dataRowNo->RowNumber
'														 dataColumnName->ColumnName  of the field   
'												valueToEnter : Value to be Entered
'Output Parameters    :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function EnterTextTabbedRegionTable (formShortTitle,tabbedRegionLabel,tabbedRegionIndex ,tableBlockName,dataRowNo,dataColumnName,valueToEnter)
	 If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError:	blnObjectError=False
				'startTime=timer()
				stepName="Entering Data  under  a table column "
				inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br> <b>Block Name of Oracle table:</b> "& tableBlockName & "<br><b> Row Number: </b>" & dataRowNo &"<br> <b>Name of the column : </b>" & dataColumnName &"<br> <b>Value : </b>" & valueToEnter
				strStepDescription= "Enter the value [ " & valueToEnter & " ] in the table [ " & tableBlockName & " ]"
				On error resume next
				If  OracleFormWindow("short title:="& formShortTitle,"index:=1").OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit)Then
                                                Set objTable = OracleFormWindow("short title:="& formShortTitle,"index:=1").OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTable("block name:="& tableBlockName)
                                                If objTable.IsFieldEditable(dataRowNo,dataColumnName) or  objTable.getROproperty("enabled") Then
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																									ImagePath=CaptureScreenshot(objTable,strStepDescription)
																						  End if
																	  objTable.EnterField dataRowNo,dataColumnName,valueToEnter
                                                                      blnExceptionFlag = Error_Listener ("EnterTextTabbedRegionTable",objTable)
																	  If  not blnExceptionFlag Then
																						  status="DONE"
																						  
																						  message="["& valueToEnter & "] entered Under  the "& dataColumnName &" Table Column "
																						  Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegionTable","2",stepName,message)
																	 Else
																						  status="FAIL"
																						  Flag=1
																						  blnObjectError=True  '// added
																						  message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																						  Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegionTable","1",stepName,message)
																	End If
'																	If  Ucase(objTable.GetFieldValue(dataRowNo,dataColumnName)) = Ucase(valueToEnter)Then
'																						  blnExceptionFlag = Error_Listener ("EnterTextTabbedRegionTable",objTable)
'																						  If  not blnExceptionFlag Then
'																											  status="DONE"
'																											  message=valueToEnter & ":  entered Under  the "& dataColumnName &" Table Column "
'																											  Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegionTable","2",stepName,message)
'																						 Else
'																											  status="FAIL"
'																											  Flag=1
'																											  blnObjectError=True  '// added
'																											  message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
'																											  Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegionTable","1",stepName,message)
'																						  End If
'																	End If


										Else
																		Flag=1
																		status="FAIL"
																		 blnObjectError=True  '// added
																		message="[ " & dataColumnName & " ]: Table Column Field  is Not Editable"
																	   Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegionTable","1",stepName,message)
										End If
			Else
																		Flag=1
																		status="FAIL"
																		 blnObjectError=True  '// added
																		message="[ " & dataColumnName & " ]: Not Found "
														
			End If
          	'endTime=timer()
        	'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
			If  blnObjectError  Then
						Environment.Value("blnFatalError")=True
						Call Error_Recovery ("CloseAllForms")
			End If
				
				Set objTable=nothing                   ' Added

				If Flag =1  Then
							EnterTextTabbedRegionTable = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTable,message)
			Else
							EnterTextTabbedRegionTable = True
			End If
			If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If
End if 
End Function




'**********************************************************************************'***********************************************************************************
'Name of the Function   : EnterTextTable
'Author		     					  :TCS
'Date			 				     :13/09/2011
'Description		          : Entering a field in a table
'Input Parameters	     : formShortTitle->Form window short title
'										 		 tableBlockName->blockName of the oracle table
'													 dataRowNo->RowNumber
'														 dataColumnName->ColumnName  of the field    
'															 valueToEnter ->value which will be entered                                   
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'***********************************************************************************

Function EnterTextTable(formShortTitle,tableBlockName,dataRowNo,dataColumnName,valueToEnter)
 If Not Environment.Value("blnFatalError") Then
						 Dim blnObjectError:	blnObjectError=False
						'startTime=timer()
						stepName="Entering Data  under  a table column "
						strStepDescription= "Enter text [" & valueToEnter & "] in the table " & "[" & tableBlockName & " ]"
						inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br> <b>Block Name of Oracle table:</b> "& tableBlockName & "<br><b> Row Number: </b>" & dataRowNo &"<br> <b>Name of the column : </b>" & dataColumnName &"<br> <b>Value : </b>" & valueToEnter
						On error resume next
						If  OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit)  Then
												Set objTable = OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName)
												If objTable.IsFieldEditable(dataRowNo,dataColumnName) or objTable.getROproperty("enabled") Then   ' Commented this validation  as it was failing  to check Accounting Allowed check box in  "Invoice and hold reason" forms
														If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																									ImagePath=CaptureScreenshot(objTable,strStepDescription)
																								End if		
																	  OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).EnterField dataRowNo,dataColumnName,valueToEnter
																	If (instr(err.description,"The parameter is incorrect") >0) or (instr(err.description,"The operation cannot be performed") >0 )then
																						err.clear
																						status="FAIL"
																						Flag=1
																						blnObjectError=True  '// added
																						message="<br> Column Name "& dataColumnName &" Does Not Exist <br>"
																						Call ReporterFunction(strLibraryFileName,"EnterTextTable","1",stepName,message)
																						EnterTextTable = message
																						blnMainFailFlag = True
																						ImagePath=CaptureScreenshot(stepName,inputParameter )
																						Exit Function
																		End if 
                                                                      blnExceptionFlag = Error_Listener ("ClickButton",objTable)
																	  If  not blnExceptionFlag Then
																							strEnteredValue=objTable.GetFieldValue(dataRowNo,dataColumnName)
			  																			 'If  strEnteredValue<>"" Then
																									  status="DONE"
																																									

																									  message="["& valueToEnter & "] Entered Under  the "& dataColumnName &" Table Column "
																									  Call ReporterFunction(strLibraryFileName,"EnterTextTable","2",stepName,message)
																						 'else
																							'		 status="FAIL"
																								'	  Flag=1
																									'  message="<br>  Value  ' "& valueToEnter  & "' could not be Entered in Column " & dataColumnName & "</br >"
																									 ' Call ReporterFunction(strLibraryFileName,"EnterTextTable","1",stepName,message)
																						 'End If
																	 Else
																						  status="FAIL"
																						  Flag=1
																						  message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																						  Call ReporterFunction(strLibraryFileName,"EnterTextTable","1",stepName,message)
																	  End If
											   Else
																		Flag=1
																		status="FAIL"
																		 blnObjectError=True  
																		message="[ " & dataColumnName & " ] Table Column Field  is Not Editable"
																	   Call ReporterFunction(strLibraryFileName,"EnterTextTable","1",stepName,message)
					
											  End If
						Else
											 Flag=1
											  status="FAIL"
											   blnObjectError=True  '// added
											message="[ " & tableBlockName & " ] Table not Found"
   										 Call ReporterFunction(strLibraryFileName,"EnterTextTable","1",stepName,message)
						End If
	
						'endTime=timer()
						'exeTime= FormatNumber(endTime - startTime,3) 
						'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
'						If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
'									   ImagePath=CaptureScreenshot(stepName,inputParameter )
'						ElseIf Flag=1 Then 
'									   ImagePath=CaptureScreenshot(stepName,inputParameter )
'						End If
						If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										Call Error_Recovery ("CloseAllForms")
						End If
					
						If Flag =1  Then
							EnterTextTable = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTable,message)
			Else
							EnterTextTable = True
			End If
			If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If
End if 
End Function



'*********************************************************************************************************************************************************************
'Name of the Function		:	EnterTextWeb(browserName,textFieldName,textFieldIndex,valueToEnter)
'Author									:	Arnab
'Date                             	:	26.09.2011
'Description					Entering some text in a Text Field in Web based Oracle 
'Input Parameters	  	:	browserName : Name Property of the Browser
'												textFieldName : Name Property of the WebEdit Field
'												textFieldIndex : Index of the WebEdit Field													(Normally set as 0. For more than one identical object need to change accordingly.)
'												valueToEnter : Value to Enter in the Text Field
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail											:
'**********************************************************************************************************************************************************************

Public Function EnterTextWeb(browserName,textFieldName,textFieldIndex,valueToEnter)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError, customMessage
		BalloonTooltip.Show "e-Swift Automation","Executing Now : EnterTextWeb" 
		blnObjectError=False
		startTime=Timer()
		stepName="Enter Text"
		inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Text Field Name : </b>"& textFieldName &"<br><b>Text Field Index : </b>" & textFieldIndex &"<br><b>Value to Enter : </b>" & valueToEnter
		strStepDescription= "Enter value [" & valueToEnter & "] in text-field [ " & textFieldName &" ]" 
		On Error Resume Next
		If browserName<>"" AND textFieldName<>"" AND textFieldIndex<>"" Then
            Set obj= Description.Create()
			obj("micclass").value="Page"
            Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")

			If  Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).Exist(3) Then
				If Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("visible") Then
					If Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("readonly")=0 AND Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("disabled")=0  Then
						Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).Set valueToEnter						
						Set objWebEdit=Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex)
						status="DONE"
						message="[ " & valueToEnter &"] Entered Successfully in Textfield ["& textFieldName &"]"
						Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb","2",stepName,message)
					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
								ImagePath=CaptureScreenshot(objWebEdit,strStepDescription)
					End if 
																	

					Else
						status="FAIL"
						Flag=1
						message="[ " & textFieldName &"] is Disabled / Non Editable."
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb","1",stepName,message)
					End If
				Else
					status="FAIL"
					Flag=1
					message="[ " & textFieldName &" ] is not Visible."
					blnObjectError=True
					Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb","1",stepName,message)
				End If
			Else
				status="FAIL"
				Flag=1
				message="[ " & textFieldName &"] Field does not Exist."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb","1",stepName,message)
			End If
			Set objWebEdit=Nothing
			Set obj=nothing
			Set childObj=nothing

		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextWeb","1",stepName,message)
		End If

		endTime = Timer()
		ExeTime = FormatNumber(endTime - startTime,3)

  		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			'Call Error_Recovery ("CloseAllForms")
			'Call Error_Recovery ("CONTINUE")
		End If
		
		If Flag =1  Then
							EnterTextWeb = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebEdit,message)
		Else
							EnterTextWeb = True
		End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If	
End Function

'*********************************************************************************************************************************************************************
'Name of the Function		:	EnterEncryptedTextWeb(browserName,textFieldName,textFieldIndex,valueToEnter)
'Author									:	Vinay, Sai Satvik
'Date                             	:	21.01.2015
'Description					Entering Encrypted text in a Text Field in Web based Oracle 
'Input Parameters	  	:	browserName : Name Property of the Browser
'												textFieldName : Name Property of the WebEdit Field
'												textFieldIndex : Index of the WebEdit Field													(Normally set as 0. For more than one identical object need to change accordingly.)
'												valueToEnter : Value to Enter in the Text Field
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail											:
'**********************************************************************************************************************************************************************

Public Function EnterEncryptedTextWeb(browserName,textFieldName,textFieldIndex,valueToEnter)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError, customMessage
		BalloonTooltip.Show "e-Swift Automation","Executing Now : EnterEncryptedTextWeb" 
		blnObjectError=False
		startTime=Timer()
		stepName="Enter Text"
		inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Text Field Name : </b>"& textFieldName &"<br><b>Text Field Index : </b>" & textFieldIndex &"<br><b>Value to Enter : </b>" & valueToEnter
		strStepDescription= "Enter Decrypted value of [" & valueToEnter & "] in text-field [ " & textFieldName &" ]" 
		On Error Resume Next
		If browserName<>"" AND textFieldName<>"" AND textFieldIndex<>"" Then
            Set obj= Description.Create()
			obj("micclass").value="Page"
            Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")

			If  Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).Exist(3) Then
				If Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("visible") Then
					If Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("readonly")=0 AND Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex).GetROProperty("disabled")=0  Then
						Set objWebEdit=Browser("name:="& browserName).Page("title:="& pageTitle).WebEdit("name:="& textFieldName,"index:=" & textFieldIndex)
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
								ImagePath=CaptureScreenshot(objWebEdit,strStepDescription)
					End if 
						objWebEdit.SetSecure valueToEnter						
						
						status="DONE"
						message="Decrypted value of [ " & valueToEnter &"]  Entered Successfully."
	
					Else
						status="FAIL"
						Flag=1
						message="[ " & textFieldName &"] is Disabled / Non Editable."
						blnObjectError=True
						Call ReporterFunction("e-Swift_FunctionLibrary","EnterEncryptedTextWeb","1",stepName,message)
					End If
				Else
					status="FAIL"
					Flag=1
					message="[ " & textFieldName &" ] is not Visible."
					blnObjectError=True
					Call ReporterFunction("e-Swift_FunctionLibrary","EnterEncryptedTextWeb","1",stepName,message)
				End If
			Else
				status="FAIL"
				Flag=1
				message="[ " & textFieldName &"] Field does not Exist."
				blnObjectError=True
				Call ReporterFunction("e-Swift_FunctionLibrary","EnterEncryptedTextWeb","1",stepName,message)
			End If
			Set objWebEdit=Nothing
			Set obj=nothing
			Set childObj=nothing

		Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			blnObjectError=True
			Call ReporterFunction("e-Swift_FunctionLibrary","EnterEncryptedTextWeb","1",stepName,message)
		End If

		endTime = Timer()
		ExeTime = FormatNumber(endTime - startTime,3)

  		If  blnObjectError  Then
			Environment.Value("blnFatalError")=True
			'Call Error_Recovery ("CloseAllForms")
			'Call Error_Recovery ("CONTINUE")
		End If
		
		If Flag =1  Then
							EnterEncryptedTextWeb = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebEdit,message)
		Else
							EnterEncryptedTextWeb = True
		End If
		If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
	End If	
End Function

'*********************************************************************************************************************************************************************
'Name of the Function		:	GetBrowserCount
'Author									:	TCS
'Date                             	:	26.09.2011
'Description					Get Count of all open browsers
'Input Parameters	  	:   None
'Output Parameters      :Count of open broswers
'**********************************************************************************************************************************************************************



Function GetBrowserCount()
	Dim iDesc
	Set iDesc = Description.Create()
	iDesc("micclass").value="Browser"
	Set iObj = Desktop.ChildObjects(iDesc)
	GetBrowserCount =iObj.Count +1 											'Counting already open Browsers
    Set iObj=Nothing
	Set iDesc=Nothing
End Function





'*********************************************************************************************************************************************************************
'Name of the Function           :	LaunchBrowser(url)
'Author										:	TCS
'Date										:	12.09.2011
'Description                    		:	Launching Browser for a specific URL
'Input Parameters        		:	url : URL of the Browser (Provide the Specific URL in case of redirection.)
'Output Parameters      	:Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function LaunchBrowser(url)
    If Not Environment.Value("blnFatalError") Then
                    Dim blnObjectError,objLoginPage,iCnt,IE
                    iCnt=0
                    blnObjectError=False
                   'startTime=Timer()
                   On error resume next
                    stepName="Launch Browser"
                    inputParameter="<b>URL : </b>" & url
                    'SystemUtil.CloseProcessByName("iexplore.exe")
                    Dim objShell
                     Set objShell = CreateObject("WScript.Shell")
                     objShell.Run ("RunDll32.exe InetCpl.cpl,ClearMyTracksByProcess 4351")
                     wait(5)
                    If url<>"" Then
                    
'                                            SystemUtil.Run "iexplore.exe",url,,,3
                                            Set IE = CreateObject("InternetExplorer.Application")
                                            IE.Visible = True
                                            IE.Navigate url
                      Wait(20)
                                            Set objLoginPage= Browser("name:="& gstrBrowserName)
                       
                                            Do 
                                                                wait(1)
                                                                iCnt =iCnt +1 
                                                                If Browser("name:=.*Certificate Error.*").Exist(3) Then                                    'The Oracle Login Page Browser name is being checked
'                                                                        Browser("name:=.*Certificate Error.*").Maximize
                                                                        wait(2)
                                                                        Browser("name:=Certificate Error.*").Page("title:=Certificate Error.*").Link("name:=Continue to this website.*").Click
                                                                        wait (8)
                                                                End if

                                            Loop until objLoginPage.Exist(1) or iCnt  > 20 or Browser("name:=Login.*").Exist(1) or Browser("name:=SSO LOGIN").Exist(1) or Browser("name:=WebReport HomePage").Exist(1) or Dialog("regexpwndtitle:=Windows Security").Exist(2) or Browser("name:=.*").Exist(1)
                                            Call MaximizeBrowser(gstrBrowserName)
                                            If iCnt < 20 Then                                    '
                                                        'Browser("name:="& gstrBrowserName).FullScreen
                                                        status="DONE"
                                                        message="Page with URL [ " & url & " ]  Opened Successfully."
                                                        Call ReporterFunction(strLibraryFileName,"LaunchBrowser","2",stepName,message)
                                            Else
                                                        Flag=1
                                                        status="FAIL"
                                                        message="Page with URL [ " & url & " ] Failed to Open."
                                                        blnObjectError=True
                                                        Call ReporterFunction(strLibraryFileName,"LaunchBrowser","1",stepName,message)
                                            End If
                    Else
                                            Flag=1
                                            status="FAIL"
                                            message="No URL Provided."
                                            blnObjectError=True
                                            Call ReporterFunction(strLibraryFileName,"LaunchBrowser","1",stepName,message)
                    End If
                    'endTime=Timer()
                    'ExeTime = FormatNumber(endTime - startTime,3) 
                    'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
                    'If  blnObjectError  Then
                        '                    Environment.Value("blnFatalError")=True
                            '                Call Error_Recovery ("CloseAllForms")
                    'End If
                    
                    If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
                                          'ImagePath=CaptureScreenshot(stepName,inputParameter )
                    ElseIf Flag=1 Then 
                                           ImagePath=CaptureScreenshot(stepName,inputParameter )
                    End If
                    If Flag =1  Then
                                LaunchBrowser = message
                                blnMainFailFlag = True
                    Else
                                LaunchBrowser = True
                    End If
    End If
    

  
End Function





'****************************************************************************************************************************************************************
'Name of the Function	 :	OpenDialogBoxFlex(flexWindowTitle,textFieldPromptOrDescription,textFieldIndex)
'Author									:	TCS
'Date									:	22.09.2011
'Description					:	Open Flex Field Dialog Box 
'Input Parameters        :		flexWindowTitle : Title Property of the Flex Window
'												textFieldPromptOrDescription : Description / Prompt Property of the Text Field   (Choose which one is available. Can choose either  in case both are present.)
'												textFieldIndex : Index of the Text Field  (Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
'Function    OpenDialogBoxFlex(flexWindowTitle,textFieldPromptOrDescription,textFieldIndex)
'**********************************************************************************************************************************************************************
Public Function OpenDialogBoxFlex(flexWindowTitle,textFieldPromptOrDescription,textFieldIndex)
      If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError:      	blnObjectError=False
				Dim blnObjectFound :	blnObjectFound = False
				'startTime = Timer()
				stepName="Open Dialog Box"
				strStepDescription= "Open the Dialog Box [" & textFieldPromptOrDescription & "]"
				inputParameter="<b>Title of the Flex Window :</b>"& flexWindowTitle &"<br><b>Text Field Description or Prompt : </b>"& textFieldPromptOrDescription &"<br><b>Text Field Index : </b>" & textFieldIndex
				On Error Resume Next
	            If  OracleFlexWindow("title:="& flexWindowTitle).OracleTextField("prompt:="& textFieldPromptOrDescription,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit)Then
								Set objTextFieldPromptOrDescription=OracleFlexWindow("title:="& flexWindowTitle).OracleTextField("prompt:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
								blnObjectFound = True
			    ElseIf OracleFlexWindow("title:="& flexWindowTitle).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" & textFieldIndex).Exist(gObjectTimeoutLimit) Then
								Set objTextFieldPromptOrDescription=OracleFlexWindow("title:="& flexWindowTitle).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
								blnObjectFound = True
			    Else
								 status="FAIL"
								 Flag=1
								 message="[ " & textFieldPromptOrDescription  & " ] Text Field Not Found."
								 blnObjectError=True
								 Call ReporterFunction(strLibraryFileName,"OpenDialogBoxFlex","1",stepName,message)
			   End If
				If blnObjectFound Then		
								If objTextFieldPromptOrDescription.GetROProperty("editable") Then  'AND objTextFieldPromptOrDescription.GetROProperty("enabled") 
									If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																							ImagePath=CaptureScreenshot(objTextFieldPromptOrDescription,strStepDescription)
																					End if
														objTextFieldPromptOrDescription.OpenDialog
														blnExceptionFlag = Error_Listener ("OpenDialogBoxFlex",objButtonLabelOrDescription)
														If  Not blnExceptionFlag Then
																		If OracleListOfValues("title:=.*").Exist(gObjectTimeoutLimit) Or OracleCalendar("title:=Calendar").Exist(gObjectTimeoutLimit) Or objTextFieldPromptOrDescription.GetROProperty("value")<>"" Then
																					status="DONE"
																					
																					message="Dialog Box for  ["& textFieldPromptOrDescription & "] Opened ."
																					Call ReporterFunction(strLibraryFileName,"OpenDialogBoxFlex","2",stepName,message)
																		 Else
																					status="FAIL"
																					Flag=1
																					message="Dialog Box for  "& textFieldPromptOrDescription & "  Failed to Open."
																					blnObjectError=True
																					Call ReporterFunction(strLibraryFileName,"OpenDialogBoxFlex","1",stepName,message)
																		End If 	
														else
																		Flag=1
																		status="FAIL"
																		message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																		Call ReporterFunction(strLibraryFileName,"OpenDialogBoxFlex","1",stepName,message)																	
														 End If	 

								Else
														status="FAIL"
														Flag=1
														message=textFieldPromptOrDescription & "  is  Non Editable."
														blnObjectError=True
														Call ReporterFunction(strLibraryFileName,"OpenDialogBoxFlex","1",stepName,message)
								End If 
				 End If
				Set objTextFieldPromptOrDescription=Nothing
				If  blnObjectError  Then
							Environment.Value("blnFatalError")=True
							Call Error_Recovery ("CloseAllForms")
				End If

				If Flag =1  Then
							OpenDialogBoxFlex = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTextFieldPromptOrDescription,message)
			Else
							OpenDialogBoxFlex = True
			End If
			If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If
	End If
End Function




'*********************************************************************************************************************************************************************
'Name of the Function   : OpenDialogBoxTable
'Author		     					  :TCS
'Date			 				     :13-SEP-2011
'Description		          : Opening a dialog box in a table
'Input Parameters	     : formShortTitle->Short Title property value of the Form,tableBlockName->Block Name property value of the Oracle table,dataRowNo->Row Number,dataColumnName->Name of the column                           
'Output Parameters     :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Function OpenDialogBoxTable(formShortTitle,tableBlockName,dataRowNo,dataColumnName)
     If Not Environment.Value("blnFatalError") Then
									Dim blnObjectError:    blnObjectError=False
									'startTime=Timer()
									stepName="Open Dialog Box "
									strStepDescription= "Open the Dialog Box in table[" & tableBlockName & "]"
									inputParameter="<b>Short Title of the Form : </b>" & formShortTitle & "<br><b> Block Name of the Oracle table : </b> " & tableBlockName  & "<br><b> Row Number : </b>" & dataRowNo & "<br><b>Name of the column : </b>" & dataColumnName
									On error resume next
									Set objOracleTable=OracleFormWindow("short title:=" & formShortTitle).OracleTable("block name:=" & tableBlockName)
									If objOracleTable.Exist(gObjectTimeoutLimit) Then
'										If objOracleTable.GetROProperty("editable") Then
												If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																		ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
																	End if
														objOracleTable.OpenDialog dataRowNo,dataColumnName
														blnExceptionFlag = Error_Listener ("OpenDialogBoxTable",objOracleTable)
														If Not blnExceptionFlag Then
																	status="DONE"
																	
																	message="[ " & dataColumnName & " ] dialog box opened"
																	Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTable","2",stepName,message)
														Else
																	status="FAIL"
																	Flag=1
																	message="<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																	Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTable","1",stepName,message)
														End If
'											else
'														status="FAIL"
'														Flag=1
'														message=tableBlockName & "  is  Non Editable."
'														blnObjectError=True
'														Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTable","1",stepName,message)
'
'											End if 
					'				strErrorCode=OracleStatusLine("message:=.*").GetROProperty("error code")
					'                  If strErrorCode="FRM-41830" then                      
					'					    status="FAIL"
					'			            Flag=1
					'			            message="LOV  contains no values"
					'						blnObjectError=True
					'                        Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTable","1",stepName,message)
					'						else
					'                        status="DONE"
					'                        message="[ " & dataColumnName & " ] dialog box opened"
					'                        Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTable","2",stepName,message)
					'			 End If          
								
									Else			
														 status="FAIL"
														 Flag=1
														message="[ " & dataColumnName & " Dialog Box object Not Found"
														blnObjectError=True
														Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTable","1",stepName,message)
								   End If

								   Set objOracleTable=Nothing
									If  blnObjectError  Then
												Environment.Value("blnFatalError")=True
												Call Error_Recovery ("CloseAllForms")
									End If
									If Flag =1  Then
										OpenDialogBoxTable = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objOracleTable,message)
									Else
										OpenDialogBoxTable = True
									End If
			If blnDefault_eSwiftReporting Then  
				Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If
	End if
End Function



'******************************************************************************************************************************************************************************************************************************************************************
'Name of the Function		:	OpenDialogBoxTextField(formShortTitle,textFieldPromptOrDescription,textFieldIndex)
'Author									:	TCS
'Date			   				  		:	22.09.2011
'Description						:	Opening Dialog Box for a Oracle Text Field 
'Input Parameters	     	:	formShortTitle : Short Title Property of the Oracle Form
'												textFieldPromptOrDescription : Description / Prompt Property of the Text Field (Choose which one is available. Can choose either  in case both are present.)
'												textFieldIndex : Index of the Text Field(Normally set as 0. For more than one identical object need to change accordingly.)
'Output Parameters      	:Boolean True on Success ; Failure messsage on Fail
'*********************************************************************************************************************************************************************
Public Function OpenDialogBoxTextField(formShortTitle,textFieldPromptOrDescriptionOrDeveloperName,textFieldIndex)
    If Not Environment.Value("blnFatalError") Then
					 Dim blnObjectError:blnObjectError=False
					 'startTime=Timer()
					stepName="Open Dialog Box"
					strStepDescription= "Open the Dialog Box of the Text Field[" & textFieldPromptOrDescriptionOrDeveloperName & "]"
					inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Prompt Or Description of the TextField : </b>" & textFieldPromptOrDescriptionOrDeveloperName & "<br><b>Index of the Text Field : </b>" & textFieldIndex
					intSetFlag=1
					wait(5)
					On Error Resume Next
                    If OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescriptionOrDeveloperName,"Index:="& textFieldIndex).Exist(gObjectTimeoutLimit) Then	'Check Field for Description
							Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescriptionOrDeveloperName,"Index:="& textFieldIndex)
							intSetFlag=0
					ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:="& textFieldPromptOrDescriptionOrDeveloperName,"Index:="& textFieldIndex).Exist(gObjectTimeoutLimit)  Then	'Check Field for Prompt
							Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:="& textFieldPromptOrDescriptionOrDeveloperName,"Index:="& textFieldIndex)
							intSetFlag=0
					ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTextField("developer name:="& textFieldPromptOrDescriptionOrDeveloperName,"Index:="& textFieldIndex).Exist(gObjectTimeoutLimit)  Then	'Check Field for Prompt
							Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTextField("developer name:="& textFieldPromptOrDescriptionOrDeveloperName,"Index:="& textFieldIndex)
							intSetFlag=0
					Else
							 status="FAIL"
							Flag=1
							message="Given Text Field [ " &descriptionOfTextField  & " ] Not Found."
							blnObjectError=True
							Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTextField","1",stepName,message)
					End If
					If intSetFlag=0 Then
								If  objText.GetROProperty("editable") OR objText.GetROProperty("enabled")  Then
									If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																						ImagePath=CaptureScreenshot(objText,strStepDescription)
																					End if
												objText.OpenDialog
												blnExceptionFlag = Error_Listener ("OpenDialogBoxTextField",objText)
												If Not blnExceptionFlag Then
																		If OracleListOfValues("title:=.*").Exist(5) Or OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescriptionOrDeveloperName,"Index:="& textFieldIndex).GetROProperty("value")<>"" Or OracleFlexWindow("title:=.*").Exist(3) or OracleCalendar("title:=Calendar").Exist(3) Then
																					status="DONE"
																					
																					message="Dialog Box for [ "& textFieldPromptOrDescriptionOrDeveloperName & " ] Opened."
																					Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTextField","2",stepName,message)
																		Else
																					status="FAIL"
																					Flag=1
																					blnObjectError=True
																					message="Dialog Box for [ "& textFieldPromptOrDescriptionOrDeveloperName & " ] Failed to Open."
																					Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTextField","1",stepName,message)
																		End If
																
												Else
																		status="FAIL"
																		Flag=1
																		message="<br> Unexpected Error Encountered: </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																		Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTextField","1",stepName,message)
												End If
                          
								Else
														status="FAIL"
														Flag=1
														message="[ " & textFieldPromptOrDescriptionOrDeveloperName & " ] is Disabled / Non Editable."
														blnObjectError=True
														Call ReporterFunction(strLibraryFileName,"OpenDialogBoxTextField","1",stepName,message)
								End If

				 End If
				Set objText=Nothing
				If  blnObjectError  Then
						Environment.Value("blnFatalError")=True
						Call Error_Recovery ("CloseAllForms")
				End If
				End if
				If Flag =1  Then
							OpenDialogBoxTextField = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
			Else
							OpenDialogBoxTextField = True
			End If
			If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If


End Function



'******************************************************************************************************************************************************************************************************************************************************************
'Name of the Function		   ->OpenDialogTabbedRegion
'Author									      ->TCS
'Date			     					       ->27/09/2011
'Description		    		         ->open a dialog box for a oracle tabbed region textfield 
'Input Parameters	               ->formShortTitle--> Short title of the form ;
														'tabbedRegionLabel-->Label of the Tabbed region ;
														'tabbedRegionIndex-->Index of the Tabbed region ;
														'textFieldPromptOrDescription--> Prompt or description property for the text field ;
														'textFieldIndex --> Index property for the text field
'Output Parameters              ->Boolean True on Success ; Failure messsage on Fail
'******************************************************************************************************************
Function OpenDialogTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescriptionOrDeveloperName,textFieldIndex)
   If Not Environment.Value("blnFatalError") Then
					Dim blnObjectError:				   blnObjectError=False
					Dim objText
					Dim intFlag:intFlag=0
				   'startTime=timer()
				    stepName="Open Dialog Box "
				    strStepDescription= "Open the Dialog Box of the Text Field [" & textFieldPromptOrDescriptionOrDeveloperName & "]"
					inputParameter="Short Title of  Form:"& formShortTitle &"<br> Label of  Oracle TabbedRegion: "& tabbedRegionLabel &"<br>Text Field Name: "& textFieldPromptOrDescriptionOrDeveloperName
					If  OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("prompt:="& textFieldPromptOrDescriptionOrDeveloperName,"index:="& textFieldIndex).Exist(gObjectTimeoutLimit) Then
													Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("prompt:="& textFieldPromptOrDescriptionOrDeveloperName,"index:="& textFieldIndex)
													 intFlag=1
					ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescriptionOrDeveloperName,"index:="& textFieldIndex).exist(gObjectTimeoutLimit)Then
													 Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescriptionOrDeveloperName,"index:="& textFieldIndex)
													 intFlag=1
                    ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("developer name:="& textFieldPromptOrDescriptionOrDeveloperName,"index:="& textFieldIndex).exist(gObjectTimeoutLimit)Then
													 Set objText=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleTextField("developer name:="& textFieldPromptOrDescriptionOrDeveloperName,"index:="& textFieldIndex)
													 intFlag=1
					Else 
													status="FAIL"
													Flag=1
													message=" [ " & textFieldPromptOrDescriptionOrDeveloperName & " ] " & "Doesn't exist"
													blnObjectError=True
													Call ReporterFunction(strLibraryFileName,"OpenDialogTabbedRegion","1",stepName,message)
					End If
									
					If intFlag=1 Then
'						If objText.GetROProperty("editable") Then
If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
														ImagePath=CaptureScreenshot(objText,strStepDescription)
													End if	
													objText.OpenDialog
													
													blnExceptionFlag = Error_Listener ("OpenDialogTabbedRegion",objText)
													If Not  blnExceptionFlag  Then
																If  OracleListOfValues("title:=.*").Exist(gObjectTimeoutLimit) Or objText.GetROProperty("value")<>"" Or OracleCalendar("title:=Calendar").Exist(gObjectTimeoutLimit) Or OracleFlexWindow("title:=.*").Exist(gObjectTimeoutLimit)  Then
																			status="DONE"
																			 message=" [ " & textFieldPromptOrDescriptionOrDeveloperName & " ] "& "Dialog open"
																			Call ReporterFunction(strLibraryFileName,"OpenDialogTabbedRegion","2",stepName,message)
															   Else
		
																			status="FAIL"
																			Flag=1
																			 message=" [ " & textFieldPromptOrDescriptionOrDeveloperName & " ] "& "Dialog not open"
																			 Call ReporterFunction(strLibraryFileName,"OpenDialogTabbedRegion","1",stepName,message)
															 End If

												    Else	
																		status="FAIL"
																		 Flag=1
																		message="<br> Unexpected Error Encountered while opening dialog box </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																		Call ReporterFunction(strLibraryFileName,"OpenDialogTabbedRegion","1",stepName,message)
										          End If
'						else
'														status="FAIL"
'														Flag=1
'														message=tableBlockName & "  is  Non Editable."
'														blnObjectError=True
'														Call ReporterFunction(strLibraryFileName,"OpenDialogTabbedRegion","1",stepName,message)
'						End if 
					End If
					Set objText=Nothing
					If  blnObjectError  Then
							Environment.Value("blnFatalError")=True
							Call Error_Recovery ("CloseAllForms")
					End If
					
					
					If Flag =1  Then
							OpenDialogTabbedRegion = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
					Else
							OpenDialogTabbedRegion = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
End if 

End Function


'*********************************************************************************************************************************************************************
'Name of the Function		:	OpenDialogTabbedRegionTable(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,dataRowNo,dataColumnName)
'Author									:	TCS
'Date			   				  		:	23.09.2011
'Description					:	Opening a Dialog Box for a Oracle Table Field inside Oracle Tabbed Region
'Input Parameters	     	:	formShortTitle : Short Title Property of the Oracle Form Window
'												tabbedRegionLabel : Label Property of the Oracle Tabbed Region
'												tabbedRegionIndex : Index of the Oracle Tabbed Region(Normally set as 0. For more than one identical object need to change accordingly.)
'												tableBlockName : Block Name Property of the Oracle Table
'												dataRowNo : Row Number of the Field
'												dataColumnName : Column Name of the Field
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function OpenDialogTabbedRegionTable(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,tableBlockName,dataRowNo,dataColumnName)
		 If Not Environment.Value("blnFatalError") Then
							Dim blnObjectError:blnObjectError=False
							 'startTime=Timer()
							 stepName="Open Dialog Box"
							 strStepDescription= "Click the Flex button [" & buttonLabelOrDescription & "]"
							 inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b>Block Name of Oracle table : </b>" & tableBlockName & "<br><b>Row Number : </b>" & dataRowNo & "<br><b>Column Name : </b>" & dataColumnName
							 On Error Resume Next
							Set objOracleTable= OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:="& tabbedRegionIndex).OracleTable("block name:="& tableBlockName)
							If objOracleTable.Exist(gObjectTimeoutLimit) Then
																If objOracleTable.IsFieldEditable(dataRowNo,dataColumnName) Then
																
																					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																						ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
																					End if
																					objOracleTable.OpenDialog dataRowNo,dataColumnName
																					 blnExceptionFlag = Error_Listener ("OpenDialogTabbedRegionTable",objOracleTable)
																					If  Not blnExceptionFlag Then
																													If OracleListOfValues("title:=.*").Exist(gObjectTimeoutLimit) Or OracleCalendar("title:=Calendar").Exist(gObjectTimeoutLimit) or OracleFlexWindow("title:=.*").Exist(gObjectTimeoutLimit) Then
																																status="DONE"
																																message="[ " & dataColumnName & " ]  Dialog Box Opened."
																																Call ReporterFunction(strLibraryFileName,"OpenDialogTabbedRegionTable","2",stepName,message)
																													ElseIf objOracleTable.GetFieldValue(dataRowNo,dataColumnName)<>"" Then
																																status="DONE"
																																message="[ " & dataColumnName & " ]  Dialog Box Opened."
																																Call ReporterFunction(strLibraryFileName,"OpenDialogTabbedRegionTable","2",stepName,message)
																													Else
																																status="FAIL"
																																Flag=1
																																message="[ " & dataColumnName & " ]  Dialog Box Failed to Open"
																																blnObjectError=True
																																Call ReporterFunction(strLibraryFileName,"OpenDialogTabbedRegionTable","1",stepName,message)
																													End If
																					Else
																													Flag=1
																													status="FAIL"
																													message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																													Call ReporterFunction(strLibraryFileName,"OpenDialogTabbedRegionTable","1",stepName,message)																	
																					End If
																
															Else
																					status="FAIL"
																					Flag=1
																					message="[ " & dataColumnName & " ] is Non Editable for Row No  [ " & dataRowNo & " ]."
																					blnObjectError=True
																					Call ReporterFunction(strLibraryFileName,"OpenDialogTabbedRegionTable","1",stepName,message)
															End If
						Else
																status="FAIL"
																Flag=1
																message="Given Oracle Table [ " & tableBlockName & " ] Not Found."
																blnObjectError=True
																Call ReporterFunction(strLibraryFileName,"OpenDialogTabbedRegionTable","1",stepName,message)
						End If
					Set objOracleTable=Nothing
					If  blnObjectError  Then
								Environment.Value("blnFatalError")=True
								Call Error_Recovery ("CloseAllForms")
					End If
					If Flag =1  Then
							OpenDialogTabbedRegionTable = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objOracleTable,message)
					Else
							OpenDialogTabbedRegionTable = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
	End If		
End Function




''***********************************************************************************''***********************************************************************************
'Name of the Function 		: QueryInTable
'Author		    						: TCS
'Date			    					: 24/05/2013
'Description	    : Query a value in oracle table 
'Input Parameters	    : formShortTitle= Short title of the Form
'				tableBlockName = Block Name of Table
'				dataRowNo = Row number where to insert
'				tableColumnName = Table column name wher the query will be entered
'				DataToQuery = Query string value
'Output Parameters    : Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************''***********************************************************************************
Function QueryInTable(formShortTitle,tableBlockName,dataRowNo,tableColumnName,DataToQuery)
  If Not Environment.Value("blnFatalError") Then
			Dim blnObjectError:  blnObjectError=False
		    Dim strStatusMsg 
			'startTime=timer()
			stepName="Query Record in Table using 2 data query  "
			inputParameter=" Short Title of the Form:"&formShortTitle&""&vbNewLine&" Block Name of the Oracle table: "& tableBlockName&""&vbNewLine&"Row Number: "& dataRowNo &""&vbNewLine&"Name of the column :"& ColumnName
			Set Ws = CreateObject("WScript.Shell")
		    On error resume next
		    If OracleFormWindow("short title:="&formShortTitle).OracleTable("block name:="&tableBlockName).exist(gObjectTimeoutLimit) Then
										OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).SetFocus dataRowNo,tableColumnName
										Wait(1)
										OracleFormWindow("short title:="&formShortTitle).OracleTable("block name:="&tableBlockName).InvokeSoftkey "ENTER QUERY"
										OracleFormWindow("short title:="&formShortTitle).OracleTable("block name:="&tableBlockName).EnterField dataRowNo,tableColumnName,DataToQuery
										'OracleFormWindow("short title:="&formShortTitle).OracleTable("block name:="&tableBlockName).EnterField dataRowNo,tableColumnName2,secondDataToQuery
										OracleFormWindow("short title:="&formShortTitle).OracleTable("block name:="&tableBlockName).InvokeSoftkey "EXECUTE QUERY"
										strStatusMsg = OracleStatusLine("micclass:=OracleStatusLine").GetROProperty("message")
										If strStatusMsg   ="" Then 
														Call ReporterFunction(strLibraryFileName,"QueryInTable_withTwoValues","2","Query "& DataToQuery & "in Table ","Query Found successfully")
														status="DONE"
														message="Queried Data [ "& DataToQuery &"] :  Returned  in Table " & tableBlockName 
														QueryInTable = True 
										Else
														Call ReporterFunction(strLibraryFileName,"QueryInTable_withTwoValues","2","Query "& DataToQuery & "in Table ","Query NOT FOUND in Database ")
														status="DONE"
														blnObjectError=True
														message="Queried Data [ " & DataToQuery & "] NOT Found in Table [" & tableBlockName & " ] ; Status Line Message  : [ " & strStatus &" ] "
														QueryInTable = False 
										End If 
		 	Else
										Call ReporterFunction(strLibraryFileName,"QueryInTable","1","Table Name "&tableBlockName,"Table in  " &formShortTitle & " Not Found")
										status="FAIL"
										Flag=1
										blnObjectError=True
										message="Given Oracle Table Name [ "& tableBlockName &"  ] Not Found"
										QueryInTable = False 
			End if 

	
			'endTime=timer()
			'exeTime=FormatNumber(endTime - startTime,3) 
			'Call  UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
			  If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										Call Error_Recovery ("CloseAllForms")
			 End If 
										
			If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
									ImagePath=CaptureScreenshot(stepName,inputParameter )
			ElseIf Flag=1 Then 
									  ImagePath=CaptureScreenshot(stepName,inputParameter )
			End If
			If Flag =1  Then
						QueryInTable = message
						blnMainFailFlag = True
			Else
						QueryInTable = True
			End If
End If
End Function



'***********************************************************************************
'Name of the Function  :	QueryInTable_withTwoValues
'Author		    		:  TCS
'Date			    :   1 Sep 2011
'Description	     :  function for Quering in Oracle Table with 2 different values in same row.
'Input Parameters	     :  formShortTitle,tableBlockName,dataRowNo,tableColumnName1,tableColumnName2,firstDataToQuery,secondDataToQuery
'Output Parameters     :  Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************
Function QueryInTable_withTwoValues(formShortTitle,tableBlockName,dataRowNo,tableColumnName1,tableColumnName2,firstDataToQuery,secondDataToQuery)
  If Not Environment.Value("blnFatalError") Then
					   Dim blnObjectError:blnObjectError=False
					   Dim strStatusMsg 
						'startTime=timer()
						stepName="Query Record in Table using 2 data query  "
						inputParameter=" Short Title of the Form:"&formShortTitle&""&vbNewLine&" Block Name of the Oracle table: "& tableBlockName&""&vbNewLine&"Row Number: "& dataRowNo &""&vbNewLine&"Name of the column :"& ColumnName
						Set Ws = CreateObject("WScript.Shell")
					   On error resume next
						If OracleFormWindow("short title:="&formShortTitle).OracleTable("block name:="&tableBlockName).exist(gObjectTimeoutLimit) Then
														OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).SetFocus dataRowNo,tableColumnName1
														Wait(1)
														OracleFormWindow("short title:="&formShortTitle).OracleTable("block name:="&tableBlockName).InvokeSoftkey "ENTER QUERY"
														OracleFormWindow("short title:="&formShortTitle).OracleTable("block name:="&tableBlockName).EnterField dataRowNo,tableColumnName1,firstDataToQuery
														OracleFormWindow("short title:="&formShortTitle).OracleTable("block name:="&tableBlockName).EnterField dataRowNo,tableColumnName2,secondDataToQuery
														OracleFormWindow("short title:="&formShortTitle).OracleTable("block name:="&tableBlockName).InvokeSoftkey "EXECUTE QUERY"
														strStatusMsg = OracleStatusLine("micclass:=OracleStatusLine").GetROProperty("message")
														If strStatusMsg   ="" Then 
																				Call ReporterFunction(strLibraryFileName,"QueryInTable_withTwoValues","2","Query "&queryData & "in Table ","Query Found successfully")
																				status="DONE"
																				message="Queried Data [ "& firstDataToQuery &  " , " &  secondDataToQuery & " ] : Successfully Returned  in Table " & tableBlockName 
																				QueryInTable_withTwoValues = TRue
														Else
																				Call ReporterFunction(strLibraryFileName,"QueryInTable_withTwoValues","2","Query "&queryData & "in Table ","Query NOT FOUND in Database ")
																				status="FAIL"
																				blnObjectError=True
																				message="Queried Data [ " & queryData & "] NOT Found in Table [" & tableBlockName & " ] ; Status Line Message  : [ " & strStatus &" ] "
																				QueryInTable_withTwoValues =False
														End If 
							Else
														Call ReporterFunction(strLibraryFileName,"QueryInTable_withTwoValues","1","Table Name "&tableBlockName,"Table in  " &formShortTitle & " Not Found")
														status="FAIL"
														Flag=1
														blnObjectError=True
														message="Given Oracle Table Name [ "& tableBlockName &"  ] Not Found"
														QueryInTable_withTwoValues =False
							End if 
						  If  blnObjectError  Then
												Environment.Value("blnFatalError")=True
												Call Error_Recovery ("CloseAllForms")
					 	End If
						
						 If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
										 ImagePath=CaptureScreenshot(stepName,inputParameter )
						 ElseIf Flag=1 Then 
									   ImagePath=CaptureScreenshot(stepName,inputParameter )
						 End If
						If Flag =1  Then
										QueryInTable_withTwoValues = message
										blnMainFailFlag = True
						Else
										QueryInTable_withTwoValues = True
						End If
End If 
End Function




'***********************************************************************************'***********************************************************************************
'Name of the Function  :	QueryInTextField
'Author		    :  TCS
'Date			    :   1 Sep 2011
'Description	     :  function for Quering in OracleTextField
'Input Parameters	     :  formShortTitle,textFieldPromptOrDescription,textFieldIndex,dataToQuery
'Output Parameters     :  Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'***********************************************************************************
Function QueryInTextField(formShortTitle,textFieldPromptOrDescription,textFieldIndex,dataToQuery)
     If Not Environment.Value("blnFatalError") Then
				 Dim strStatusMsg 
				 Dim blnObjectFound: blnObjectFound = False
				'startTime=Timer()
				stepName="Query Record in  Oracle Text Field" 
				strStepDescription= "Query the Text Field [" & textFieldPromptOrDescription & "] with the query [ "& dataToQuery &" ]"
				inputParameter="Short Title of the Form:"& formShortTitle&""& chr(13)  &"  Name of the Oracle TextField: "& textFieldPromptOrDescription 
				On error resume next

				Set ObjTextDescription =   OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
				Set ObjTextPrompt =   OracleFormWindow("short title:="& formShortTitle).OracleTextField("prompt:="& textFieldPromptOrDescription,"index:=" & textFieldIndex)
				If  ObjTextDescription.Exist(gObjectTimeoutLimit) Then
							set objTextField = ObjTextDescription
							blnObjectFound= True
				ElseIf ObjTextPrompt.Exist(gObjectTimeoutLimit) Then
							set objTextField = ObjTextPrompt
							blnObjectFound= True
				Else
							Call ReporterFunction("1"," Oracle TextField "& textFieldPromptOrDescription, " Not Found in Form " & formShortTitle)
							status="FAIL"
							Flag=1
							message="Oracle TextField  name : [ " & textFieldPromptOrDescription &" ] Not Found in Form [  " & formShortTitle &" ]"

				End if

				If  blnObjectFound Then
								If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											ImagePath=CaptureScreenshot(objTextField,strStepDescription)
										End if
									With objTextField
										.SetFocus
										.InvokeSoftkey "ENTER QUERY"
										.Enter  dataToQuery
										.InvokeSoftkey "EXECUTE QUERY"
									End With
					
									strStatusMsg = OracleStatusLine("micclass:=OracleStatusLine").GetROProperty("message") 
									'blnCaptureFlag = True
					
									If strStatusMsg  ="" Then 
													Call ReporterFunction("2","Query "& dataToQuery & "in Oracle TextField","Query Found successfully")
													status="DONE"
													message="Queried Data : [ "& dataToQuery & " ] :  Queried in Oracle TextField [ " & textFieldPromptOrDescription  &" ] "
										
												   'blnCaptureFlag =  True
									Else
												Call ReporterFunction("2","Query "&dataToQuery & "in Oracle TextField"," Query NOT FOUND in Oracle TextField" & textFieldPromptOrDescription)
												status="FAIL"
												Flag = 1
												message="Queried Data : [ "& dataToQuery & " ] : NOT Found in Text Field ; Status Line Message := [ " & strStatusMsg  &" ] "
												'blnCaptureFlag =  True
									End If 
				End If

				If Flag =1  Then
							QueryInTextField = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTextField,message)
					Else
							QueryInTextField = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
End if 
End Function




'*********************************************************************************************************************************************************************
'Name of the Function		:	RefreshRequest 
'Author									:	TCS
'Date			   				  		:	23.09.2011
'Description                    :	Refreshing a given Request until the request completes or Maximum Timeout reaches
'											 This Function is a customized function for the Request page. Need Find Request Page to be opened to operate upon.)
'Input Parameters	     :	requestNumber : Request Number to Refresh
'												maxTimeOut : Maximum allowed time for a request to be waited for
'												strRequestStatus := Reference Variable which would hold the status value i.e. Normal,Warning or Error .
'Output Parameters     	:	Boolean True on Success ; Failure messsage on Fail ; Value in the Refernce Variable
'**********************************************************************************************************************************************************************
Public Function RefreshRequest(requestNumber,maxTimeOut)',ByRef strRequestStatus)
If Not Environment.Value("blnFatalError") Then
					startTime=Timer()
					stepName="Refresh a Request and Return Status"
					inputParameter="<b>Request Number :</b>" & requestNumber &"<br><b>Maximum Timeout : </b>"& maxTimeOut & " Second(s)"
					On Error Resume Next
					requestStatus=""
				
					If maxTimeOut="" Then
								maxTimeOut=500
								inputParameter="<b>Request Number :</b>" & requestNumber &"<br><b>Maximum Timeout : </b> 500 Second(s)"
					End If
					If requestNumber<>"" Then
												If OracleFormWindow("short title:=Find Requests").Exist(gObjectTimeoutLimit)  Then
																OracleFormWindow("short title:=Find Requests").OracleRadioGroup("developer name:=JOBS_QF_WHICH_JOBS").Select "Specific Requests"
																OracleFormWindow("short title:=Find Requests").OracleTextField("description:=Request ID").Enter requestNumber
																OracleFormWindow("short title:=Find Requests").OracleButton("label:=Find").Click
																If OracleFormWindow("short title:=Requests").Exist(gObjectTimeoutLimit) Then
																						Do
																								Wait(1)
																								OracleFormWindow("short title:=Requests").OracleButton("description:=Refresh Data").Click
																								iWaitCounter = iWaitCounter  + 1
																						Loop Until (OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,"Phase") = "Completed") OR (iWaitCounter >maxTimeOut)
																						requestName	= OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,"Name")
																						requestPhase =  OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,"Phase")
																						requestStatus = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,"Status")
																
																						If iWaitCounter <maxTimeOut Then
																														If requestStatus="Normal" Then
																																status="DONE"
																																message= "[ " & requestName & " ] : Request Executed Successfully."
																																outputParameter="Request Status : [ " & requestStatus &" ]"
																																Call ReporterFunction(strLibraryFileName,"RefreshRequest","2",stepName,message)
																														ElseIf requestStatus="Error" Then					  
																																status="FAIL"
																																Flag=1
																																message= "[ " & requestName & " ] : Error occured during Execution."
																																outputParameter="Request Status : [ " & requestStatus &" ]"
																																Call ReporterFunction(strLibraryFileName,"RefreshRequest","1",stepName,message)
																														Else
																																status="FAIL"
																																Flag=1
																																message="Execution Completed with Warning"
																																outputParameter="Request Status : [ " & requestStatus &" ]"
																																Call ReporterFunction(strLibraryFileName,"RefreshRequest","1",stepName,message)
																														End If			
																						Else
																														status="FAIL"
																														Flag=1
																														message="Maximum Timeout Exceeded."
																														outputParameter="Request Status before Timeout : [ "& requestStatus &" ]<br>Request Phase before Timeout : [ "& requestPhase &" ]"
																														Call ReporterFunction(strLibraryFileName,"RefreshRequest","1",stepName,message)
																						End If
																Else
																						status="FAIL"
																						Flag=1
																						message="Request Page not Found."
																						blnObjectError=True
																						Call ReporterFunction(strLibraryFileName,"RefreshRequest","1",stepName,message)
																End If
											Else
															status="FAIL"
															Flag=1
															message="Invalid Request Number."
															Call ReporterFunction(strLibraryFileName,"RefreshRequest","1",stepName,message)
											End If

				Else
									status="FAIL"
									Flag=1
									message="No Request Number Provided."
									blnObjectError=True
									Call ReporterFunction(strLibraryFileName,"RefreshRequest","1",stepName,message)
				End If
				 Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
				If  blnObjectError  Then
							Environment.Value("blnFatalError")=True
							Call Error_Recovery ("CloseAllForms")
				End If
				If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
							ImagePath=CaptureScreenshot(stepName,inputParameter )
				ElseIf Flag=1 Then 
							ImagePath=CaptureScreenshot(stepName,inputParameter )
				End If
				If Flag =1  Then
						RefreshRequest = message
						blnMainFailFlag = True
				Else
						RefreshRequest = True
				End If
				
End If
End Function



'*********************************************************************************************************************************************************************
'Name of the Function  : RemoveSpacesInString
'Author		    :  Prashant
'Date			    :   1 Sep 2011
'Description	     :Function to remove any spaces in a string
'Input Parameters	     :  sSourceString: Source String which is to be cleaned of spaces
'				
'Output Parameters     :  String (formatted)
'*********************************************************************************************************************************************************************

Function RemoveSpacesInString(sSourceString)

   If Not Environment.Value("blnFatalError") Then
	Dim arrTemp
	Dim strTemp 
	strTemp  = ""
	arrTemp = split(trim(sSourceString)," ")
	For i=0 to Ubound(arrTemp)
		strTemp = strTemp+ arrTemp(i)
	Next
    RemoveSpacesInString = strTemp
	End If
End Function

'*********************************************************************************************************************************************************************
'Name of the Function  : RemoveEmptyValuesInArray
'Author		    :  Prashant
'Date			    :   1 Sep 2011
'Description	     :Function to remove any Null or Empty values in array
'Input Parameters	     :  aSourceArray: Source array which is to be cleaned 
'Output Parameters     :  array (formatted)
'*********************************************************************************************************************************************************************

Function RemoveEmptyValuesInArray(ByRef aSourceArray)
   	If Not Environment.Value("blnFatalError") Then
	Dim aTemporaryArray()
	xCnt=0
	yCnt = 0
	For xCnt=0 to UBound(aSourceArray)
		If Not (IsEmpty(aSourceArray(xCnt)) or  aSourceArray(xCnt) ="" )Then
				ReDim preserve aTemporaryArray(yCnt )
				aTemporaryArray(yCnt ) = aSourceArray(xCnt)
				yCnt =yCnt  +1
		End If
	Next
    'aSourceArray = aTemporaryArray
	RemoveEmptyValuesInArray = aTemporaryArray
	End If
End Function




'******************************************************************************************************************************************************************************************************************************************************
'Name of the Function   : SelectCheckboxTabbedRegion
'Author		     					  :TCS
'Date			 				     :28.07.2011
'Description		          : Select a checkbox for a oracle tabbed region checkbox 
'Input Parameters	     :formTitle:-short title of the form window
'                                              checkboxDescription:-description property of checkbox
'                                              labelName->Label property of oracle tabbed region
'												tabbedRegionIndex->Index of the Tabbed Region
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'*******************************************************************************************************************************************************************************************************************************************************

Function  SelectCheckBoxTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,checkboxDescription)
   If Not Environment.Value("blnFatalError") Then
					 Dim blnObjectError:     blnObjectError=False
					 'startTime=Timer()
					 stepName="Select " & checkboxDescription &" Checkbox"
					 strStepDescription= "Select the CheckBox [" & checkboxDescription & "]"
					 inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br> <b>Description property of the Checkbox:</b> "& checkboxDescription 
					 On error resume next
					   If  OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel ,"index:=" & tabbedRegionIndex).OracleCheckbox("description:=" & checkboxDescription).Exist(gObjectTimeoutLimit)Then
										temp=OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="&tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleCheckbox("description:="& checkboxDescription).GetRoProperty("Selected") 
										If temp <> "True" Then
													OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleCheckbox("description:="& checkboxDescription).Select
													Set checkboxObject=OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleCheckbox("description:="& checkboxDescription)
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																											ImagePath=CaptureScreenshot(checkboxObject,strStepDescription)
																										End if
																		blnExceptionFlag = Error_Listener ("SelectCheckBoxTabbedRegion",checkboxObject)
																		If  not blnExceptionFlag Then
																										status="DONE"
																										
																										message="Given "& checkboxDescription & ":  Checkbox  has been selected successfully"
																										Call ReporterFunction(strLibraryFileName,"SelectCheckBoxTabbedRegion","2",stepName,message)
																		Else
																										status="FAIL"
																										Flag=1
																										blnObjectError=True  '// added
																										message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																										Call ReporterFunction(strLibraryFileName,"SelectCheckBoxTabbedRegion","1",stepName,message)
																		End If
	
										Else
																		OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleCheckbox("description:=" & checkboxDescription).Clear
																		Set checkboxObject=OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("label:="& tabbedRegionLabel,"index:=" & tabbedRegionIndex).OracleCheckbox("description:="& checkboxDescription)
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																											ImagePath=CaptureScreenshot(checkboxObject,strStepDescription)
																										End if
																		If  not blnExceptionFlag Then
																										status="DONE"
																										
																										message="Given " & checkboxDescription & ":  Checkbox  has been cleared successfully"
																									   Call ReporterFunction(strLibraryFileName,"SelectCheckBoxTabbedRegion","2",stepName,message)
																		Else
																									  status="FAIL"
																									  Flag=1
																									  blnObjectError=True  '// added
																									  message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																									  Call ReporterFunction(strLibraryFileName,"SelectCheckBoxTabbedRegion","1",stepName,message)
																		End If
			
											
									   End If
					Else
								  
								   status="FAIL"
								   Flag=1
								   blnObjectError=True
								  message="Given "& checkboxDescription & " Checkbox object  Not Found/missing"
								  Call ReporterFunction(strLibraryFileName,"SelectCheckBoxTabbedRegion","1",stepName,message)
					End If

					'endTime=Timer()
					'ExeTime = FormatNumber(endTime - startTime,3) 
					 Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
					 If  blnObjectError  Then
								Environment.Value("blnFatalError")=True
								Call Error_Recovery ("CloseAllForms")
					 End If
					If Flag =1  Then
							SelectCheckBoxTabbedRegion = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(checkboxObject,message)
					Else
							SelectCheckBoxTabbedRegion = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
	End If
End Function



'*********************************************************************************************************************************************************************
'Name of the Function	:	SelectCheckBoxWeb(browserName,checkBoxName,checkBoxOption)
'Author								:TCS
'Date			   				  	:	27.09.2011
'Description					:	Checking / Unchecking Checkbox in Web Forms
'Input Parameters	     :	browserName : Name Property of the Browser
'											checkBoxName : Name Property of the WebCheckBox Field
'											checkBoxOption : Checking : ON/True
'											Unchecking : OFF/FALSE
'Output Parameters      "Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function SelectCheckBoxWeb(browserName,checkBoxName,checkBoxOption)
    If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError:   blnObjectError=False
				'startTime=Timer()
				stepName="Select CheckBox"
				strStepDescription= "Select the CheckBox [" & checkBoxName & "]"
				inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Check Box Name : </b>"& checkBoxName &"<br><b>Check Box Option : </b>" & checkBoxOption
				On Error Resume Next
				pageTitle= browserName
                If  Browser("name:="& browserName).Page("title:="& pageTitle).WebCheckBox("name:="& checkBoxName).Exist(gObjectTimeoutLimit+4) Then
											Set objWebCheckBox=Browser("name:="& browserName).Page("title:="& pageTitle).WebCheckBox("name:="& checkBoxName)
											If Browser("name:="& browserName).Page("title:="& pageTitle).WebCheckBox("name:="& checkBoxName).GetROProperty("disabled")=0 Then
												If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																						ImagePath=CaptureScreenshot(objWebCheckBox,strStepDescription)
																					End if
											If Ucase(checkBoxOption)="YES" or Ucase(checkBoxOption)="TRUE" or Ucase(checkBoxOption)="ON"Then
																Browser("name:="& browserName).Page("title:="& pageTitle).WebCheckBox("name:="& checkBoxName).Set "ON"
																If Browser("name:="& browserName).Page("title:="& pageTitle).WebCheckBox("name:="& checkBoxName).GetROProperty("checked")=1 Then
																					status="DONE"
																					
																					message="Checkbox [ " & checkBoxName & " ] Checked ."
																					Call ReporterFunction(strLibraryFileName,"SelectCheckBoxWeb","2",stepName,message)
																Else
																					status="FAIL"
																					Flag=1
																					message="[ " & checkBoxName & " ] Failed to Check."
																					blnObjectError=True
																					Call ReporterFunction(strLibraryFileName,"SelectCheckBoxWeb","1",stepName,message)
																End If
											ElseIf Ucase(checkBoxOption)="NO" or Ucase(checkBoxOption)="FALSE" or Ucase(checkBoxOption)="OFF" Then
																Browser("name:="& browserName).Page("title:="& pageTitle).WebCheckBox("name:="& checkBoxName).Set "OFF"
																If Browser("name:="& browserName).Page("title:="& pageTitle).WebCheckBox("name:="& checkBoxName).GetROProperty("checked")=0 Then
																					status="DONE"
																					strStepDescription= "Unselect the CheckBox [" & checkBoxName & "]"
                                                                                    message="Checkbox [ " & checkBoxName & " ] Unchecked ."
																					Call ReporterFunction(strLibraryFileName,"SelectCheckBoxWeb","2",stepName,message)
																Else
																					status="FAIL"
																					Flag=1
																					message="[ " & checkBoxName & " ] Failed to Uncheck."
																					blnObjectError=True
																					Call ReporterFunction(strLibraryFileName,"SelectCheckBoxWeb","1",stepName,message)
																End If
					
											Else
															status="FAIL"
															Flag=1
															message="[ " & checkBoxOption & " ] Invalid Option."
															blnObjectError=True
															Call ReporterFunction(strLibraryFileName,"SelectCheckBoxWeb","1",stepName,message)		
											End If

							        	      blnExceptionFlag = Error_Listener ("SelectCheckBoxWeb",objWebCheckBox)
											      If   blnExceptionFlag Then
																	Flag=1
																	status="FAIL"
																	message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																	Call ReporterFunction(strLibraryFileName,"SelectCheckBoxWeb","1",stepName,message)
																	
											End If

								Else
													status="FAIL"
													Flag=1
													message="[ " & checkBoxName & " ] is Disabled."
													'blnObjectError=True
													Call ReporterFunction(strLibraryFileName,"SelectCheckBoxWeb","1",stepName,message)
								End If

						Else
								status="FAIL"
								Flag=1
								message="[ " & checkBoxName & " ] CheckBox is Missing/not Matching."
								'blnObjectError=True
								Call ReporterFunction(strLibraryFileName,"SelectCheckBoxWeb","1",stepName,message)
						End If
					Set objWebCheckBox=Nothing
					Set obj=Nothing
					Set childObj=Nothing
					
					  If  blnObjectError  Then
									Environment.Value("blnFatalError")=True
									'Call Error_Recovery ("CloseAllForms")
					 End If
					
					If Flag =1  Then
							SelectCheckBoxWeb = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebCheckBox,message)
					Else
							SelectCheckBoxWeb = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
End If 
End Function



'**********************************************************************************
'Name of the Function   : SelectDateFromCalendar
'Author		     					  :  TCS
'Date			 				     :13-SEP-2011
'Description		          : Select date form  Calendar
'Input Parameters	     : calendarDate:-It should be a valid date and format which is support to oracle Date field                          
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************
Function SelectDateFromCalendar(calendarDate)
	If Not Environment.Value("blnFatalError") Then
										Dim blnObjectError:    blnObjectError=False
									 '	startTime=Timer()
										'stepName="Select date from Calendar "
										stepName="Select Date"
										strStepDescription= "Select the Date: [ " & calendarDate & " ]"
										inputParameter="<b>Date : </b>" & calendarDate
										On error resume next

										 If  calendarDate <> "" Then
														If  OracleCalendar("index:=0").exist(gObjectTimeoutLimit) Then 
																	  If isdate(calendarDate)  Then
													
																			strYear=datePart("yyyy",calendarDate)
																			strMonth=datePart("m",calendarDate)
																			strDay=datePart("d",calendarDate)
									
																			Select Case strMonth
																					Case "1"
																					strMonth="JAN"
																					Case "2"
																					strMonth="FEB"
																					Case "3"
																					strMonth="MAR"
																					Case "4"
																					strMonth="APR"
																					Case "5"
																					strMonth="MAY"
																					Case "6"
																					strMonth="JUN"
																					Case "7"
																					strMonth="JUL"
																					Case "8"
																					strMonth="AUG"
																					Case "9"
																					strMonth="SEP"
																					Case "10"
																					strMonth="OCT"
																					Case "11"
																					strMonth="NOV"
																					Case "12"
																					strMonth="DEC"					
																			 End Select
																			strConvertedCalendarDate=strDay &"-"  & strMonth & "-" & strYear
																			Set objCalendar=OracleCalendar("title:=Calendar","index:=0")
																			If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																							ImagePath=CaptureScreenshot(objCalendar,strStepDescription)
																						End if
																			objCalendar.Enter strConvertedCalendarDate	
																			
																			 blnExceptionFlag = Error_Listener ("SelectDateFromCalendar",objCalendar)
																			If  Not blnExceptionFlag Then
																						status="DONE"
																													
																						message="[ "&strConvertedCalendarDate & " ] is selected from calendar"
																						Call ReporterFunction(strLibraryFileName,"SelectDateFromCalendar","2",stepName,message)
																			else
																						Flag=1
																						status="FAIL"
																						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																						Call ReporterFunction(strLibraryFileName,"SelectDateFromCalendar","1",stepName,message)																	
																			End If				 
					
													  else
																status="FAIL"
																Flag=1
																message="Invalid Date"
																blnObjectError=True
																Call ReporterFunction(strLibraryFileName,"SelectDateFromCalendar","1",stepName,message)
													End If
												  
										else				
												status="FAIL"
												Flag=1
												message="Calendar object not found/missing"
												blnObjectError=True
												Call ReporterFunction(strLibraryFileName,"SelectDateFromCalendar","1",stepName,message)
								 End If
					
						 else
								   status="FAIL"
									Flag=1
									message="No Calendar Date Provided."
									blnObjectError=True
									Call ReporterFunction(strLibraryFileName,"SelectDateFromCalendar","1",stepName,message)
					   End If
					   Set objCalendar=Nothing
                    If  blnObjectError  Then
								Environment.Value("blnFatalError")=True
								Call Error_Recovery ("CloseAllForms")
						End If
					If Flag =1  Then
							SelectDateFromCalendar = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objCalendar,message)
					Else
							SelectDateFromCalendar = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
	End If
  End Function



'************************************************************************************'************************************************************************************
'Name of the Function   : SelectFromLOV
'Author		  						  :TCS
'Date			                     :12.09.2011
'Description		     : selecting a value from a LOV
'Input Parameters	     : titleOfLOVWindow->Title of the LOV Window  
'												passedValue->value to be selected from the LOV
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'************************************************************************************
Public Function SelectFromLOV(titleOfLOVWindow,passedValue)
		 If Not Environment.Value("blnFatalError") Then
								Dim blnObjectError:blnObjectError=False
								Dim searchFlag  :	searchFlag=0'Flag to check if the passed value exists in the LOV or not
								'startTime=timer()
								stepName="Select from LOV: "& titleOfLOVWindow
								strStepDescription= "Select the value [ " & passedValue & " ] from LOV [" & titleOfLOVWindow & "]"
								inputParameter="Title of  LOV Window:"& titleOfLOVWindow & "<br> Value to be selected: "&passedValue
						
								On error resume next
								'Check if parameters are empty
								 If   OracleListOfValues("title:="& titleOfLOVWindow).exist(gObjectTimeoutLimit+5) Then
								 					Set oracleLOVObject= OracleListOfValues("title:="& titleOfLOVWindow)
													OracleListOfValues("title:="& titleOfLOVWindow).Find "%"	
'														If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
'															ImagePath=CaptureScreenshot(stepName,inputParameter )					
'														end if
													listContent_Str=OracleListOfValues("title:="& titleOfLOVWindow).GetROProperty("list content")
													If  listContent_Str<>"" Then
																	listContent_Arr=Split(listContent_Str,";")
																	For i=0 to Ubound(listContent_Arr)
																			If Cstr(listContent_Arr(i))=Cstr(passedValue) Then
																			If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																					ImagePath=CaptureScreenshot(oracleLOVObject,strStepDescription)
																			End if
																						  OracleListOfValues("title:="& titleOfLOVWindow).Select listContent_Arr(i)
																						  searchFlag=1
																						  Exit for
																			End If
																	Next
																	If searchFlag<>1 Then
																		
																		  status="FAIL"
																		  Flag=1
																		  message="Value not in LOV"
																		   blnObjectError=True
																		  Call ReporterFunction(strLibraryFileName,"SelectFromLOV","1",stepName,message)
																	Else 
																		  status="DONE"
			
																		  message="[" &  passedValue& "] selected from LOV :"& titleOfLOVWindow
																		  Call ReporterFunction(strLibraryFileName,"SelectFromLOV","2",stepName,message)
																	End If
												 Else
																	status="FAIL"
																	 Flag=1
																	 message="LOV doesn't have any value"
																	 blnObjectError=True
																	 Call ReporterFunction(strLibraryFileName,"SelectFromLOV","1",stepName,message)
												 End If
							Else
												 status="FAIL"
												 Flag=1
												 message="Object Not found"
												 blnObjectError=True
												Call ReporterFunction(strLibraryFileName,"SelectFromLOV","1",stepName,message)
							End if
							If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										Call Error_Recovery ("CloseAllForms")
							End If
                    	
					If Flag =1  Then
							SelectFromLOV = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(oracleLOVObject,message)
					Else
							SelectFromLOV = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If

End If
End Function




'*********************************************************************************************************************************************************************
'Name of the Function	:	SelectFromNavigator(navigationPath)
'Author									:	TCS
'Date			   				  	:	12.09.2011
'Description						:	Selecting Specific Form from Navigator Menu  
'Input Parameters        	:	navigationPath (Hierarchy Value for the Form to be selected)
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function SelectFromNavigator(navigationPath)
	   If Not Environment.Value("blnFatalError") Then
										Dim blnObjectError ,iBrowserCount,iLatestBrowserCount
										Dim blnExceptionFlag 
										strStepDescription= "Select the navigation path: [ " & navigationPath &  " ] from the Oracle Navigator"
										blnObjectError = False
										blnSuccess = False
										'startTime=Timer()
										stepName="Select Navigation Path"
										inputParameter="<b>Navigation Path :</b>" & navigationPath
										On error resume next
										If OracleNavigator("short title:=Navigator").Exist(gObjectTimeoutLimit) Then
																				Set objNavigator = OracleNavigator("short title:=Navigator")
																				iBrowserCount = GetBrowserCount ' Validation for Web Pages when opned via Oracle Navigator
																				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																					ImagePath=CaptureScreenshot(objNavigator,strStepDescription)
																				End if
																				
																				OracleNavigator("short title:=Navigator").SelectFunction navigationPath
																				blnExceptionFlag = Error_Listener ("SelectFromNavigator",objNavigator )	
																				If Not   blnExceptionFlag Then 
																											If OracleFormWindow("short title:=.*","index:=0").Exist(gObjectTimeoutLimit) Then 
																															blnSuccess = True 
																											elseIf OracleListOfValues("title:=.*","index:=0").Exist(gObjectTimeoutLimit) Then  
																															blnSuccess = True 
																											elseif   OracleNotification("title:=Note").Exist(gObjectTimeoutLimit) Then
																															blnSuccess = True
																											else 
																															iLatestBrowserCount = GetBrowserCount
																															If  iLatestBrowserCount > iBrowserCount Then
																																		blnSuccess = True 
																															End If
																											End if 
											
																											If  blnSuccess Then
																														status="DONE"
																														message="Navigation path [ "& navigationPath &" ] selected"
																														Call ReporterFunction(strLibraryFileName,"SelectFromNavigator","2",stepName,message)
																											Else
																														status="FAIL"
																														blnObjectError=True
																														message="Navigation path falied to Open."
																														Call ReporterFunction(strLibraryFileName,"SelectFromNavigator","1",stepName,message)
																														Environment.Value("blnFatalError") = True
																											End If
																			Else
																											status="FAIL"
																											Flag=1
																											message="<br> Unexpected Error Encountered </br > <b>  ERROR   :=   [  " & Environment.Value("strFatalMessage")  &" ] "
																											Call ReporterFunction(strLibraryFileName,"SelectFromNavigator","1",stepName,message)
																											
																			End If 
									
									Else			 
														status="FAIL"
														Flag=1
														blnObjectError =True
														message="[ " & navigationPath & " ] navigation path does not exist."
														Call ReporterFunction(strLibraryFileName,"SelectFromNavigator","1",stepName,message)
									End If

									 If  blnObjectError  Then
											Environment.Value("blnFatalError")=True
											Call Error_Recovery ("CloseAllForms")
									End If
									
									If Flag =1  Then
											SelectFromNavigator = message
											blnMainFailFlag = True
											ImagePath=CaptureScreenshot(objNavigator,message)
									Else
									SelectFromNavigator = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
   End If
End Function





'*********************************************************************************************************************************************************************
'Name of the Function		:	SelectFromOracleTree(formShortTitle,nodeToSelect)
'Author									:	TCS
'Date			   				  		:27.09.2011
'Description					:Selecting a node from a Oracle Tree
'Input Parameters	     :	formShortTitle : Short Title Property of the Oracle Form
'												nodeToSelect : Node to Select from the Tree
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
'Function    SelectFromOracleTree(formShortTitle,nodeToSelect)
'**********************************************************************************************************************************************************************
Public Function SelectFromOracleTree(formShortTitle,nodeToSelect)
  If Not Environment.Value("blnFatalError") Then
					Dim blnObjectError:   blnObjectError=False
					'startTime=Timer()
					stepName="Enter from Tree"
					strStepDescription= "Select [ " & nodeToSelect & " ] from Oracle tree : " & formShortTitle
					inputParameter="<b>Form Short Title :</b>" & formShortTitle &"<br><b>Node to Select : </b>"& nodeToSelect
					On Error Resume Next
					Set obj=Description.Create()
					obj("micclass").value="OracleTree"
					Set treeObj=OracleFormWindow("short title:=" & formShortTitle).ChildObjects(obj)
					If treeObj.count=1 Then
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											ImagePath=CaptureScreenshot(treeObj,strStepDescription)
										End if
										treeObj(0).Select nodeToSelect
                    wait 3
										treeObj(0).Activate nodeToSelect
										blnExceptionFlag = Error_Listener ("SelectFromOracleTree",treeObj(0))
										If Not blnExceptionFlag Then
													status="DONE"
													message="[ " & nodeToSelect & " ] Tree Node Selected Successfully."
													Call ReporterFunction(strLibraryFileName,"SelectFromOracleTree","2",stepName,message)
										Else
													  status="FAIL"
													  Flag=1
													  message="<br> Unexpected Error Encountered while selecting oracle tree </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
													 Call ReporterFunction(strLibraryFileName,"SelectFromOracleTree","1",stepName,message)
										End If
					Else
										status="FAIL"
										Flag=1
										message="Tree Object does not Exist."
										   blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"SelectFromOracleTree","1",stepName,message)
					End If
				
					Set obj=nothing
					Set treeObj=nothing
					If  blnObjectError  Then
								Environment.Value("blnFatalError")=True
								Call Error_Recovery ("CloseAllForms")
					End If
						If Flag =1  Then
							SelectFromOracleTree = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(treeObj,message)
					Else
							SelectFromOracleTree = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
	End If
End Function




'*********************************************************************************************************************************************************************
'Name of the Function:	SelectList(formShortTitle,listDeveloperName,valueToSelect)
'Author									:	TCS
'Date								:	27.09.2011
'Description					:	Selecting a value from a Oracle List
'Input Parameters        :	formShortTitle : Short Title Property of the Oracle Form
'												listDeveloperName : Developer Name Property of the Oracle List
'												valueToSelect : Value to be Selected from the List
'Output Parameters 	: Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function SelectList(formShortTitle,DeveloperNameOrDescription,valueToSelect)
	Dim blnObjectFound :blnObjectFound = False 
	Dim blnObjectError: blnObjectError= False
	If Not Environment.Value("blnFatalError") Then
									'startTime=Timer()
									stepName="Select from List"
									inputParameter="<b>Form Short Title :</b>" & formShortTitle &"<br><b>List Developer Name : </b>"& listDeveloperName &"<br><b>Value to Select : </b>"& valueToSelect
									strStepDescription= "Select the value [ " & valueToSelect & " ] from the List [ " & DeveloperNameOrDescription & " ]"
									On Error Resume Next
									If OracleFormWindow("short title:="& formShortTitle).OracleList("developer name:="& DeveloperNameOrDescription).Exist(gObjectTimeoutLimit) Then
											Set objOracleList= OracleFormWindow("short title:="& formShortTitle).OracleList("developer name:="& DeveloperNameOrDescription)
											blnObjectFound = True
									ElseIf OracleFormWindow("short title:="& formShortTitle).OracleList("description:="& DeveloperNameOrDescription).Exist(gObjectTimeoutLimit) Then
											Set objOracleList= OracleFormWindow("short title:="& formShortTitle).OracleList("description:="& DeveloperNameOrDescription)
											blnObjectFound = True
									Else
											status="FAIL"
											Flag=1
											blnObjectError=True
											message="Given Oracle List Box [ " & DeveloperNameOrDescription & " ]  not found"
											Call ReporterFunction(strLibraryFileName,"SelectList","1",stepName,message)
									End if 
									 If blnObjectFound = True Then
														If objOracleList.GetROProperty("enabled") Then
																		If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																			ImagePath=CaptureScreenshot(objOracleList,strStepDescription)
																		End if
																		objOracleList.Select valueToSelect
																		If objOracleList.GetROProperty("selected item")=valueToSelect Then
																				status="DONE"
																				message="[ " & valueToSelect & " ] has been Selected Successfully."
																				Call ReporterFunction(strLibraryFileName,"SelectList","2",stepName,message)
																		Else
																				status="FAIL"
																				Flag=1
																				message="[ " & valueToSelect & " ] is an Invalid Selection."
																				Call ReporterFunction(strLibraryFileName,"SelectList","1",stepName,message)
																		End If
														Else
																		blnObjectError= True
																		status="FAIL"
																		Flag=1
																		message="[ " & DeveloperNameOrDescription & " ] is Disabled."
																		Call ReporterFunction(strLibraryFileName,"SelectList","1",stepName,message)
														End If
									Else
														blnObjectError= True
														status="FAIL"
														Flag=1
														message="[ " & DeveloperNameOrDescription & " ] Not Found"
														Call ReporterFunction(strLibraryFileName,"SelectList","1",stepName,message)
									End If
									 If  blnObjectError  Then
													Environment.Value("blnFatalError")=True
													Call Error_Recovery ("CloseAllForms")
									End If
									
				 	If Flag =1  Then
							ClickFlexButton = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objButtonLabelOrDescription,message)
					Else
							ClickFlexButton = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
			End If
End Function



'*********************************************************************************************************************************************************************
'Name of the Function		:	SelectListWeb(browserName,listNameOrHtmlId,listIndex,valueToSelect)
'Author									:	TCS
'Date									:	27.09.2011
'Description					:	Selecting an item from a List  in Web Forms
'Input Parameters		:	browserName : Name Property of the Browser
'												listNameOrHtmlId : Name Or Html Id Property of the WebList Field(Provide which one is available. Can provide either if both are present.)
'												listIndex : Index Property of the List	(Normally set as 0. For more than one identical object need to change accordingly.)
'												valueToSelect : Value to be Selected
'Output Parameters      Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function SelectListWeb(browserName,listNameOrHtmlId,listIndex,valueToSelect)
     If Not Environment.Value("blnFatalError") Then
							Dim blnObjectError:    blnObjectError=False
							'startTime=Timer()
							stepName="Select from List"
							strStepDescription= "Select [ " & valueToSelect & " ] from WebList [ " & listNameOrHtmlId & " ]"
							inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>List Name or Html Id : </b>"& listNameOrHtmlId &"<br><b>Value to Select : </b>" & valueToSelect
							intSetFlag=1
							 On Error Resume Next
							pageTitle= browserName
							 If Browser("name:="& browserName).Page("title:="& pageTitle).WebList("html id:="& listNameOrHtmlId,"index:=" & listIndex).Exist(gObjectTimeoutLimit+5) Then	'Check Field for Description
										Set objWebList=Browser("name:="& browserName).Page("title:="& pageTitle).WebList("html id:="& listNameOrHtmlId,"index:=" & listIndex)
										intSetFlag=0
							 ElseIf Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listNameOrHtmlId,"index:=" & listIndex).Exist(gObjectTimeoutLimit+4)  Then	'Check Field for Prompt
										Set objWebList=Browser("name:="& browserName).Page("title:="& pageTitle).WebList("name:="& listNameOrHtmlId,"index:=" & listIndex)
										intSetFlag=0
							 Else
										status="FAIL"
										Flag=1
										message="Web List Missing/not Matching"
										blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"SelectListWeb","1",stepName,message)
							 End If

							If intSetFlag=0 Then
												If objWebList.GetROProperty("disabled")=0 Then
																strListContent=objWebList.GetROProperty("all items")
																If InStr(1,strListContent,valueToSelect)<>0 Then		' Check in List if the value exists
																				
																				objWebList.Select valueToSelect
																				
																				If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																					ImagePath=CaptureScreenshot(objWebList,strStepDescription)
																				End if
																				blnExceptionFlag = Error_Listener ("SelectListWeb",objWebList)
							
																				If  Not blnExceptionFlag Then
																									status="DONE"
																									message="Value [ " & valueToSelect & " ] Selected from the List"
																									Call ReporterFunction(strLibraryFileName,"SelectListWeb","2",stepName,message)
																				else
																								Flag=1
																								status="FAIL"
																								message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																								Call ReporterFunction(strLibraryFileName,"SelectListWeb","1",stepName,message)																	
																				End If															
																Else
																				status="FAIL"
																				Flag=1
																				message="[ " & valueToSelect & " ] is an Invalid Selection."
																				blnObjectError=True
																				Call ReporterFunction(strLibraryFileName,"SelectListWeb","1",stepName,message)
																End If
												Else
																	status="FAIL"
																	Flag=1
																	message="[ " & listNameOrHtmlId & " ] is Disabled."
																	Call ReporterFunction(strLibraryFileName,"SelectListWeb","1",stepName,message)
												End If
								End If
								Set objWebList=Nothing
								Set obj=Nothing
								Set childObj=Nothing

								If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										'Call Error_Recovery ("CloseAllForms")
								End If
								If Flag =1  Then
										SelectListWeb = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objWebList,message)
								Else
										SelectListWeb = True
								End If
								If blnDefault_eSwiftReporting Then  
										Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
								End If

	End If
End Function




'*********************************************************************************************************************************************************************
'Name of the Function		:	SelectMenu(formShortTitle,menuPath)
'Author									:	TCS
'Date			   				  		14.09.2011
'Description					:Selecting some action from Oracle Menu Bar (For Navigator Form Keep the first Parameter Blank)
'Input Parameters	     :	formShortTitle : Oracle Form window short title
'												menuPath : path for different operation  (Ex- File->Save) 
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************

Public Function SelectMenu(formShortTitle,menuPath)
   If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError:   blnObjectError=False
				inputParameter="<b>Short Title of the Form : </b>"& formShortTitle &"<br><b>Menu Path : </b>"& menuPath
				strStepDescription= "Select from Menu [" & menuPath & "]"
				On error resume next
                If  OracleFormWindow("short title:="& formShortTitle).Exist(gObjectTimeoutLimit) Then 
										If OracleFormWindow("short title:="& formShortTitle).GetROProperty("enabled") Then
														set objAppObj = OracleFormWindow("short title:="& formShortTitle)
														OracleFormWindow("short title:="& formShortTitle,"index:=1").SelectMenu menuPath 'Performing Navigation
														Select Case menuPath
																			Case "File->Save"                  
																							otherFlag=1
																							selectFlag=1
																			Case "View->Query By Example->Enter"        
																							otherFlag=1
																							selectFlag=2
																			Case "View->Query By Example->Run"      
																							otherFlag=1
																							selectFlag=3
							
																			Case Else                  
																							otherFlag=0 
														End Select
										End if 
				ElseIf OracleNavigator("short title:=Navigator").GetROProperty("enabled") Then
										set objAppObj = OracleNavigator("short title:=Navigator")
										OracleNavigator("short title:=Navigator").SelectMenu menuPath  'Selecting from Navigator Page Menu
										If  Err.Number=0 Then
																stepName="Select from Navigator Menu"
																message="[ " & menuPath & " ] menu selection  done  Successfully"
																status="PASS"
																Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
										Else
																stepName="Select from Menu"
																message="Could Not Select the Menu path ' " & menuPath &" ' . Reason:="& Err.Description
																Flag=1
																status="FAIL"
																blnObjectError=True
																Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
										End If   
              Else
										stepName="Select from Navigator Menu"
										message="Oracle Navigator/Form not Found / Disabled."
										Flag=1
										status="FAIL"
										blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
									
			End If
			
			
			If  otherFlag=1Then  
										If selectFlag=1Then  'Validation for Saving
															 If  Instr(1,OracleStatusLine("index:=0").GetROProperty("message"),"Transaction complete")<>0  Then''''''''''''
																			   stepName="Save Transaction"
																			   message="Transaction Saved"
																			   status="DONE"
																			   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
															 elseIf Instr(1,OracleStatusLine("index:=0").GetROProperty("message"),"transaction(s) completed")<>0  Then''''''''''''
																			   stepName="Save Transaction"
																			   message="Transaction Saved"
																			   status="DONE"
																			   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
															 elseIf Instr(1,OracleStatusLine("index:=0").GetROProperty("message"),"No changes")<>0  Then''''''''''
																			   stepName="Save Transaction"
																			   message="Transaction  Saved"
																			   status="DONE"
																			   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
															 elseIf OracleNotification("title:=Error").Exist(1) Then 
																				If Instr(1,OracleNotification("title:=Error").GetROProperty("message"),"APP-AR-11526") then
																							   stepName="Save Transaction"
																							   message="Transaction Saved"
																							   status="DONE"
																							   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
																				End if 
															 elseIf OracleNotification("title:=Note").Exist(gObjectTimeoutLimit) then
																			   stepName="Save Transaction"
																			   message="Note found"
																			   status="DONE"
																			   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
															elseIf OracleNotification("title:=Caution").Exist(gObjectTimeoutLimit) then
																				stepName="Save Transaction"
																				message="Caution Window found "
																				status="DONE"
																				Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
															elseIf OracleFormWindow("short title:=Choose an option").Exist(gObjectTimeoutLimit) then
																			   stepName="Save Transaction"
																			   message="Option window found"
																			   status="DONE"
																			   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
															elseIf OracleNotification("title:=Decision").Exist(gObjectTimeoutLimit) then
																			   stepName="Save Transaction"
																			   message="Decision found"
																			   status="DONE"
																			   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
															 elseIf OracleFormWindow("short title:=Enter Reason for.....").Exist then
																			   stepName="Save Transaction"
																			   message="Transaction Saved"
																			   status="DONE"
																			   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
															Else 
																				stepName="Save Transaction"
																				message="Fail to save "
																				Flag=1
																				status="FAIL"
																				blnObjectError=True
																				Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
															 End If  
									 End If
  
									  If selectFlag=2Then  'Validation for Enter Query
															 If  OracleStatusLine("message:=Enter a query;  .*").Exist(1) Or  OracleStatusLine("message:=.*ISBN.*")Then
																						stepName="Enter Query "
																						message="Query(F11) "
																						status="DONE"
																						Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
															Else
																						stepName="Enter Query "
																						message="Fail to Query "
																						Flag=1
																						status="FAIL"
																						blnObjectError=True
																						Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
															End If
									 End If
    
									 If selectFlag=3Then  'Validation for Execute Query
														  If  OracleStatusLine("message:=.*").Exist(1) and OracleStatusLine("error code:=").Exist(1) Then
																					   stepName="Execute Query"
																					   message="ReQuery(Ctrl+F11)  "
																					   status="DONE"
																					   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
														 Else
																					  If blnIgnoreValidation Then
																									  stepName="Execute Query"
																									  message=" No Data retrieved"
																									  status="DONE"
																									  Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
																									  blnIgnoreValidation = False
																						 else
																									  stepName="Execute Query"
																									  message="No data retrieved "
																									  Flag=1
																									  status="FAIL"
																									  Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
																					 End If
														 End If
									  End If
    End If
    Err.Number=0
	If  otherFlag=0Then 'Validation for Others
									  If  Err.Number=0  Then
															  stepName="Select from Menu"
															  message="[ " & menuPath & "] was selected from menu path  successfully"
															  status="DONE"
															  Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
									  Else
															  stepName="Select from Menu"
															  message="Invalid Menu path ' " & menuPath &"' Reason:=" & Err.Description
															  Flag=1
															  status="FAIL"
															  blnObjectError=True
															  Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
									  End If
    End If


									If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																ImagePath=CaptureScreenshot(objAppObj,strStepDescription)
									End if


    If  blnObjectError  Then
									Environment.Value("blnFatalError")=True
									Call Error_Recovery ("CloseAllForms")
     End If

    If Flag =1  Then
									SelectMenu = message
									blnMainFailFlag = True
									ImagePath=CaptureScreenshot(stepName,message)
    Else
									SelectMenu = True
    End If

    If blnDefault_eSwiftReporting Then  
									Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
    End If

End if
End Function








'******************************************************************************************************************************************************************
'Name of the Function		   ->SelectRadioButton
'Author									      ->TCS
'Date			     					       ->126-Sep-2011
'Description		    		         ->Select a radio Button
'Input Parameters	               ->formShortTitle->Short Title property value of the Form,radioGroupDeveloperName->Developer Name property value of the Radio Group,buttonName-Name of the radio button
'Output Parameters              ->Boolean True on Success ; Failure messsage on Fail
'********************************************************************************************************************************************************************
Function SelectRadioButton(formShortTitle,radioGroupDeveloperName,buttonName)
	If Not Environment.Value("blnFatalError") Then			
				Dim blnObjectError:			   blnObjectError=False
				'startTime=Timer()
				stepName="Select Radio Button"
				strStepDescription= "Select the radio button [" & buttonName & "]"
				inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Developer Name of the Radio Group : </b>"& radioGroupDeveloperName & "<br><b>Name of the radio button : </b>" & buttonName 
				On error resume next
				If OracleFormWindow("short title:=" & formShortTitle).OracleRadioGroup("developer name:=" & radioGroupDeveloperName).Exist(gObjectTimeoutLimit)  Then
												If  OracleFormWindow("short title:=" & formShortTitle).OracleRadioGroup("developer name:=" & radioGroupDeveloperName).GetRoProperty("enabled")  Then		 
                                                                        Set radioObject=OracleFormWindow("short title:=" & formShortTitle).OracleRadioGroup("developer name:=" & radioGroupDeveloperName)
																		If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																														ImagePath=CaptureScreenshot(radioObject,strStepDescription)
																		End if
																		OracleFormWindow("short title:=" & formShortTitle).OracleRadioGroup("developer name:=" & radioGroupDeveloperName).Select buttonName
																		blnExceptionFlag = Error_Listener ("Relect Radio Button",radioObject)
                                                                        If Not blnExceptionFlag Then
																									If  OracleFormWindow("short title:=" & formShortTitle).OracleRadioGroup("developer name:=" & radioGroupDeveloperName).IsSelected(buttonName)  Then
																													status="DONE"
																													
																													
																													message="[ " & buttonName & " ] radio Button selected "
																													Call ReporterFunction(strLibraryFileName,"SelectRadioButton","2",stepName,message)
																													
																									else
																													status="FAIL"
																													Flag=1
																													message="[ " & buttonName & " ] radio Button not selected "
																													blnObjectError=True
																													Call ReporterFunction(strLibraryFileName,"SelectRadioButton","1",stepName,message)
																									End If	
																			Else 
																									status="FAIL"
																									Flag=1
																									message="<br> Unexpected Error Encountered while selecting Radio button </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																									Call ReporterFunction(strLibraryFileName,"SelectRadioButton","1",stepName,message)				
																			End If

																																		
												else
																			status="FAIL"
																			Flag=1
																			message="[ " & buttonName & " ] radio Button Not Enabled"
																			blnObjectError=True
																			Call ReporterFunction(strLibraryFileName,"SelectRadioButton","1",stepName,message)
												End If
					else	
												status="FAIL"
												Flag=1
												message="Radio Group Object not exist"
												blnObjectError=True
												Call ReporterFunction(strLibraryFileName,"SelectRadioButton","1",stepName,message)
					End If
					 If  blnObjectError  Then
											Environment.Value("blnFatalError")=True
											Call Error_Recovery ("CloseAllForms")
					End If

					If Flag =1  Then
							SelectRadioButton = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(radioObject,message)
					Else
							SelectRadioButton = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If

End If

  
End Function

'*********************************************************************************************************************************************************************
'Name of the Function	:	SelectRadioGroupWeb(browserName,radioGroupName,optionToSelect)
'Author									TCS
'Date			   				  	:	27.09.2011
	'Description				:	Selecting an item from a List  in Web Forms
'Input Parameters	  	:	browserName : Name Property of the Browser
'												radioGroupName : Name Property of the WebRadioGroup Field
'												optionToSelect : Option to be Selected												(Pass 1,2,3 etc. to depict the specific option in the Radio Group)
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function SelectRadioGroupWeb(browserName,radioGroupName,optionToSelect)
If Not Environment.Value("blnFatalError") Then
			Dim blnObjectError:	   blnObjectError=False
			'startTime=Timer()
			stepName="Select Radio Group"
			inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Radio Group Name : </b>"& radioGroupName &"<br><b>Option to Select : </b>" & optionToSelect
			strStepDescription= "Select the Radio Group [" & radioGroupName & "]"
			
			On Error Resume Next
			Set obj= Description.Create()
			obj("micclass").value="Page"
            Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")
			indexToSelect=cStr(optionToSelect-1)
			If  Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName).Exist(gObjectTimeoutLimit) Then
										If Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName).GetROProperty("disabled")=0 Then
																strAvailableOptions=Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName).GetROProperty("all items")
																If InStr(1,strAvailableOptions,optionToSelect)<>0 Then		' Check if the option exists
																						
																						Set radioObject=Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName)
																						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																																	ImagePath=CaptureScreenshot(radioObject,strStepDescription)
																						End if
																						Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName).Select optionToSelect
																						blnExceptionFlag = Error_Listener ("Select Radio Button",radioObject)
																						If Not blnExceptionFlag Then
																											If Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName).GetROProperty("selected item index")=optionToSelect Then
																																status="DONE"
																																
																																message="Radio Group Option [ " & optionToSelect & " ]  Selected"
																																Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWeb","2",stepName,message)
																											Else
																																status="FAIL"
																																Flag=1
																																message="Radio Group Option [ " & optionToSelect & " ] Failed to Select."
																																blnObjectError=True
																																Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWeb","1",stepName,message)
																											End If
																						Else
																											status="FAIL"
																											Flag=1
																											message="<br> Unexpected Error Encountered while selecting Radio Button </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																											Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWeb","1",stepName,message)
												
																						End If
																			
															Else
																						status="FAIL"
																						Flag=1
																						message="[ " & optionToSelect & " ] is an Invalid Selection."
																						blnObjectError=True
																						Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWeb","1",stepName,message)
															End If
										Else
															status="FAIL"
															Flag=1
															message="[ " & radioGroupName & " ] is Disabled."
															blnObjectError=True
															Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWeb","1",stepName,message)
										End If
						Else
										status="FAIL"
										Flag=1
										message="Web Radio Group Missing/not Matching"
										 blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWeb","1",stepName,message)
						End If

				Set obj=Nothing
				Set childObj=Nothing
				 If  blnObjectError  Then
								Environment.Value("blnFatalError")=True
								'Call Error_Recovery ("CloseAllForms")
				End If
				If Flag =1  Then
							SelectRadioGroupWeb = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(radioObject,message)
				Else
							SelectRadioGroupWeb = True
				End If
				If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
 End If
End Function



'**********************************************************************************'**********************************************************************************
'Name of the Function   : SelectResponsibility
'Author		    					 :   TCS
'Date			   					  : 09/09/2011
'Description		          : Select different Oracle responsibility through web links in Oracle Page
'Input Parameters	     : linkName - >Name of the Link/responsibility
'                                            linkHtmlid -> HTML Id of the link
'												browserName-> Name of the browser
'Output Parameters        : Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'**********************************************************************************
Public Function SelectResponsibility(linkName,strHref,browserName)
   	  If Not Environment.Value("blnFatalError") Then
					Dim blnObjectError      
					'startTime=Timer()
					stepName="Select "& linkName & " as Responsibility"
					inputParameter=" Responsibility Name :"& linkName &"<br> Html Id value : "& linkHtmlid
					strStepDescription= "Click the Flex button [" & buttonLabelOrDescription & "]"
					
					On error resume next
					Set obj=Description.Create									'Creating description object to get the page Title
					obj("micclass").Value="Page"	
					Set pageObj=Browser("name:="& browserName).ChildObjects(obj)
					pageTitle=pageObj(0).GetROProperty("title")
					If  strHref = "#" Then
									Set objLink=Browser("name:="& browserName).Page("title:=" & pageTitle).Link("href:="& strHref,"name:="& linkName)
					else
									Set objLink=Browser("name:="& browserName).Page("title:=" & pageTitle).Link("href:=javascript.*","name:="& linkName)
					End If
								 'Set objLink=Browser("name:="& browserName).Page("title:=" & pageTitle).Link("html id:="& linkHtmlid,"name:="& linkName)
					Call WaitForObject(objLink,20)
					If objLink.Exist(gObjectTimeoutLimit+5) Then	'Check if the object exists
					
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											ImagePath=CaptureScreenshot(objLink,strStepDescription)
										End if
										objLink.Click
										blnExceptionFlag = Error_Listener ("SelectResponsibility",objLink)
										If  Not blnExceptionFlag Then
																				status="DONE"
                                                                                																			
																				 message=linkName &":  selected "
																				Call ReporterFunction(strLibraryFileName,"SelectResponsibility","2",stepName,message)
										else
																				Flag=1
																				status="FAIL"
																				message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																				Call ReporterFunction(strLibraryFileName,"SelectResponsibility","1",stepName,message)																	
										End If

					Else 
				
										Flag=1
										status="FAIL"
										message="Responsibility  : "  & linkName &  "  doesn't exist for the user"
										Call ReporterFunction(strLibraryFileName,"SelectResponsibility","1",stepName,message)
					End If
	
					Set objLink=Nothing
					Set obj=Nothing
					Set pageObj=Nothing

					If Flag =1  Then
							SelectResponsibility = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objLink,message)
					Else
							SelectResponsibility = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
	End If
End Function





''**********************************************************************************************************************************************************************
'Name of the Function : SelectTab
'Author		    : TCS
'Date			    : 24/05/2013
'Description	    : Select a Tabbed region when QTP is unable to opne the tabbed region by default 
'Input Parameters	    : formShortTitle = Shrt title of the Form 
' 										:tabbedRegionLableName = Label property
'Output Parameters    : Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Function SelectTab(formShortTitle,tabbedRegionLableName)
    If Not Environment.Value("blnFatalError") Then
					'OracleFormWindow("Batch Details").OracleTabbedRegion("Products").Select
					Dim blnObjectError:    blnObjectError=False
					'startTime=Timer()
					stepName="Select a Tab "
					inputParameter="<b>Form short Title:</b>"& formShortTitle &"<br><b>Tabbed Region Label : </b>"&  tabbedRegionLableName
					strStepDescription= "Select the Tab [" & tabbedRegionLableName & "]"
					
					If OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("Label:="&tabbedRegionLableName).Exist(gObjectTimeoutLimit)  Then
								Set objTab= OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("Label:="&tabbedRegionLableName)
								If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
													ImagePath=CaptureScreenshot(objTab,strStepDescription)
												End if
								OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("Label:="&tabbedRegionLableName).Select
								If  Not blnExceptionFlag Then
												status="DONE"
												
												message="Focus is set to the tab [" & tabbedRegionLableName & "]"
												Call ReporterFunction(strLibraryFileName,"SelectTab","2",stepName,message)
								 Else
												Flag=1
												status="FAIL"
												message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
												Call ReporterFunction(strLibraryFileName,"SelectTab","1",stepName,message)																	
								End If
					End if 
					'endTime=Timer()
					'exeTime= FormatNumber(endTime - startTime,3) 
					'Call UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
					 If  blnObjectError  Then
								Environment.Value("blnFatalError")=True
								Call Error_Recovery ("CONTINUE")
					End If
	

					If Flag =1  Then
							SelectTab = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTab,message)
					Else
							SelectTab = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
End if 

End Function 


'*******************************************************************************************************************************************************************
'Name of the Function   	: SelectTabbedList
'Author                                	:TCS
'Date                                    	:26-09-2011
'Description                         : Selects a list value from oracle list in a tabbed region
'Modification  Details		:	Updated By Avisek on 21 Feb 2013 .Added Developer Name property for List Box in the If condition
'Input Parameters      :        	formShortTitle->Short title of the oracle form
													'tabbedRegionLableName->Label of the tabbed region
													'listPromptOrDescriptionOrDeveloperName->Prompt  or Description or Developer Name property of the oracle list  (any one of them )
													'valueToSelect  ->Value which needs to be selected from the list
													'listIndex-> Index for the oracle list
'Output Parameters    :		Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************

Public Function SelectTabbedList(formShortTitle,tabbedRegionLableName,listPromptOrDescriptionOrDeveloperName,valueToSelect,listIndex)
If Not Environment.Value("blnFatalError") Then
						Dim blnObjectError:blnObjectError=False
						jobDone=0
						'startTime=timer()
						stepName="Select from List"
						inputParameter="Form window short title:"& formShortTitle &"<br> Tab Label,: "& tabbedRegionLableName &"<br> List Prompt: "&listPromptOrDescription&" <br>Value:"& valueToSelect
						strStepDescription= "Select the value : [ " & valueToSelect & " ] from the TabbedList [" & buttonLabelOrDescription & "]"
						'On error resume next
				
						If  OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("Label:="&tabbedRegionLableName).OracleList("prompt:="& listPromptOrDescriptionOrDeveloperName,"index:=" & listIndex).exist(gObjectTimeoutLimit) Then
										Set listObject= OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("Label:="&tabbedRegionLableName).OracleList("prompt:="& listPromptOrDescriptionOrDeveloperName,"index:=" & listIndex)
						elseIf OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("Label:="&tabbedRegionLableName).OracleList("description:="& listPromptOrDescriptionOrDeveloperName,"index:=" & listIndex).exist(gObjectTimeoutLimit) Then
										Set listObject= OracleFormWindow("short title:="&formShortTitle).OracleTabbedRegion("Label:="&tabbedRegionLableName).OracleList("description:="& listPromptOrDescriptionOrDeveloperName,"index:=" & listIndex)
						elseif OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("Label:="& tabbedRegionLableName).OracleList("developer name:=" & listPromptOrDescriptionOrDeveloperName,"index:=" & listIndex).exist(gObjectTimeoutLimit) then
										Set listObject= OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("Label:="& tabbedRegionLableName).OracleList("developer name:=" & listPromptOrDescriptionOrDeveloperName,"index:=" & listIndex)
						End if 
				
						If  listObject.Exist(gObjectTimeoutLimit) Then
										If listObject.GetROProperty("enabled") Then
											If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																		ImagePath=CaptureScreenshot(listObject,strStepDescription)
																	End if	
														listObject.Select valueToSelect
														If listObject.GetROProperty("selected item")=valueToSelect Then
																	jobDone=1
																	
														Else
																	status="FAIL"
																	Flag=1
																	message=valueToSelect & "Value is not present in the List"
																	Call ReporterFunction(strLibraryFileName,"SelectTabbedList","1",stepName,message)
														End If
									   Else
														status="FAIL"
														Flag=1
														message=listPromptOrDescription & "List not enabled"
														Call ReporterFunction(strLibraryFileName,"SelectTabbedList","1",stepName,message)
									End If
					   Else
									status="FAIL"
									Flag=1
									message=listPromptOrDescription & "Doesn't exist"
									Call ReporterFunction(strLibraryFileName,"SelectTabbedList","1",stepName,message)
					  End If
				
						If jobDone=1 Then
										blnExceptionFlag = Error_Listener ("SelectTabbedList",listObject)
										If Not blnExceptionFlag Then
												status="DONE"
												message="[ " & dataColumnName & " ] value captured  "
												Call ReporterFunction(strLibraryFileName,"SelectTabbedList","2",stepName,message)	
										Else
												status="FAIL"
												Flag=1
												message="<br> Unexpected Error Encountered while fetching the Run Time Data</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
												Call ReporterFunction(strLibraryFileName,"SelectTabbedList","1",stepName,message)
										End If
						  End If
							
					 'Else
					'endTime=timer()
					'exeTime= FormatNumber(endTime - startTime,3) 
					'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
					If  blnObjectError  Then
								Environment.Value("blnFatalError")=True
								Call Error_Recovery ("CloseAllForms")
					End If
					If Flag =1  Then
							SelectTabbedList = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(listObject,message)
					Else
							SelectTabbedList = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
End if 
End Function




'******************************************************************************************************************************************************************
'Name of the Function		   ->SelectTabbedRegionRadioButton
'Author									      ->TCS
'Date			     					       ->07/11/2011
'Description		    		         ->Select a radio Button in a tabbed Region
'Input Parameters	               ->formShortTitle->Short Title property value of the Form,
														'tabbedRegionLableName->Label of the Tabbed Region
														',tabbedRegionIndex -> Index Value of the Tabbed Region
'														radioGroupDeveloperName->Developer Name property value of the Radio Group
'														,buttonName-Name of the radio button
'Output Parameters              ->NA
'********************************************************************************************************************************************************************

Public Function SelectTabbedRegionRadioButton(formShortTitle,tabbedRegionLableName,tabbedRegionIndex,radioGroupDeveloperName,buttonName)
   If Not Environment.Value("blnFatalError") Then
					Dim blnObjectError:blnObjectError=False
					'startTime=Timer()
					stepName="Select Tabbed Region Radio Button"
					inputParameter="<b>Form short Title:</b>"& formShortTitle &"<br><b>Developer Name of  Radio Group : </b>"& radioGroupDeveloperName & "<br><b>Name of the radio button : </b>" & buttonName 
					strStepDescription= "Select the RadioButton[ " & buttonName & " ]" & " in the TabbedRegion [ " & tabbedRegionLableName & " ]"
					
					On error resume next
					If OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("Label:="&tabbedRegionLableName,"index:=" & tabbedRegionIndex).OracleRadioGroup("developer name:=" & radioGroupDeveloperName).Exist(gObjectTimeoutLimit)  Then
												Set radioObject=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("Label:="&tabbedRegionLableName,"index:=" & tabbedRegionIndex).OracleRadioGroup("developer name:=" & radioGroupDeveloperName)
												If  radioObject.GetRoProperty("enabled")  Then		 
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																												ImagePath=CaptureScreenshot(radioObject,strStepDescription)
																											End if
																			radioObject.Select buttonName
																			selectedRadioButton = radioObject.GetROProperty("selected item")
																			blnExceptionFlag = Error_Listener ("Select Radio Button",radioObject)
																			selectedRadioButton = radioObject.GetROProperty("selected item")
																			'If Not blnExceptionFlag and  radioObject.VerifySelected(buttonName)  Then
																			If Trim(selectedRadioButton) = Trim(buttonName) and  Not blnExceptionFlag Then	
																											status="DONE"
																											
																											message="[ " & buttonName & " ] radio Button selected "
																											Call ReporterFunction(strLibraryFileName,"SelectTabbedRegionRadioButton","2",stepName,message)
																			Else
																											status="FAIL"
																											Flag=1
																											message="<br> Unexpected Error Encountered while fetching the Run Time Data</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																											Call ReporterFunction(strLibraryFileName,"Select Tabbed Region Radio Button","1",stepName,message)
																			End If
											 Else
																			status="FAIL"
																			Flag=1
																			message="[ " & buttonName & " ] radio Button Not Enabled"
																			Call ReporterFunction(strLibraryFileName,"SelectTabbedRegionRadioButton","1",stepName,message)
											End If
					Else	
											status="FAIL"
											Flag=1
											message="Radio Group Object not exist"
											Call ReporterFunction(strLibraryFileName,"SelectTabbedRegionRadioButton","1",stepName,message)
					End If
					'endTime=Timer()
					'ExeTime = FormatNumber(endTime - startTime,3) 
					'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
					 If  blnObjectError  Then
											Environment.Value("blnFatalError")=True
											Call Error_Recovery ("CloseAllForms")
					End If
				   	If Flag =1  Then
							SelectTabbedRegionRadioButton = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(radioObject,message)
					Else
							SelectTabbedRegionRadioButton = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
End If

End Function





'********************************************************************************'********************************************************************************
'Name of the Function   : SelectTabTabbedRegion
'Author              :TCS
'Date             :13-01-2011
'Description            : Moving one form to another form 
'Input Parameters      :  fformShortTitle->short title property value of oracle form window, tabbedRegionLabel->Label peroperty value of the tabbed region, tabbedRegionIndex->Index of the tabbed region                    
'Output Parameters    :Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'********************************************************************************
Function SelectTabTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex)
		    If Not Environment.Value("blnFatalError") Then
								Dim blnObjectError:blnObjectError=False
								'startTime=Timer()
								stepName="Select Tab"
								inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel  & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex 
								strStepDescription= "Select the TabbedRegion [" & tabbedRegionLabel & "]"
								
								On error resume next
           					    If OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).Exist(gObjectTimeoutLimit) Then
												 If OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).GetRoProperty("enabled") Then
															
															Set objOracleTabbedRegion=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex)
															 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																							ImagePath=CaptureScreenshot(objOracleTabbedRegion,strStepDescription)
															End if
															OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).Select	
															blnExceptionFlag = Error_Listener ("SelectTabTabbedRegion",objOracleTabbedRegion)
															If Not blnExceptionFlag Then
																						 status="DONE"
																						
																						 message=" [ "&tabbedRegionLabel &" ] Tabbed Selected"
														   							     Call ReporterFunction(strLibraryFileName,"SelectTabTabbedRegion","2",stepName,message)
															Else
																						  status="FAIL"
																						  Flag=1
																						  message="<br> Unexpected Error Encountered After selecting tab </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																						  Call ReporterFunction(strLibraryFileName,"SelectTabTabbedRegion","1",stepName,message)
															End If
													
											Else
															status="FAIL"
															Flag=1
															message=" [ "&tabbedRegionLabel &" ] Tabbed not enabled"
															blnObjectError=True
															Call ReporterFunction(strLibraryFileName,"SelectTabTabbedRegion","1",stepName,message)
											End If


							  Else
											status="FAIL"
											Flag=1
											message="Tabbed Region Object not Found"
											 blnObjectError=True
											Call ReporterFunction(strLibraryFileName,"SelectTabTabbedRegion","1",stepName,message)
							End If
							Set objOracleTabbedRegion = Nothing
							'endTime=Timer()
							'ExeTime = FormatNumber(endTime - startTime,3) 
							'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
							If  blnObjectError  Then
											Environment.Value("blnFatalError")=True
											Call Error_Recovery ("CloseAllForms")
							End If
							If Flag =1  Then
									SelectTabTabbedRegion = message
									blnMainFailFlag = True
									ImagePath=CaptureScreenshot(objOracleTabbedRegion,message)
							Else
									SelectTabTabbedRegion = True
							End If
							If blnDefault_eSwiftReporting Then  
									Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
							End If
	End If
End Function


'*******************************************************************************************************************'*******************************************************************************************************************
'Name of the Function	 ->SetFocusForm
'Author									->Shivangi
'Date									 ->07/09/2011
'Description					   ->Set the focus to a specific field(text box )
'Input Parameters			 ->formShortTitle - Short title of the form
'													textDeveloperName- Developer  name of the text field
'Output Parameters    :Boolean True on Success ; Failure messsage on Fail
'********************************************************************************************************************'*******************************************************************************************************************

Public Function SetFocusForm(formShortTitle,textFieldDeveloperName)
If Not Environment.Value("blnFatalError") Then
					Dim blnObjectError:blnObjectError=False
					Dim textFieldPrompt
					'startTime=Timer()
					stepName="Set Focus"
					inputParameter="<b>Title of the Oracle Form Window :</b>" & formShortTitle & "<br><b> Developer Name of the Text Field :</b> " & textFieldDeveloperName 
					strStepDescription= "Set focus on the TextField [" & textFieldDeveloperName & "]"
					
					On error resume next
					If  OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName).Exist(gObjectTimeoutLimit) Then
										If    OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName).GetROProperty("editable")=True  Then
													  OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName).SetFocus
													  Set objTextField=OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName)
													  If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																						ImagePath=CaptureScreenshot(objTextField,strStepDescription)
																					End if
													  blnExceptionFlag = Error_Listener ("SetFocusForm",objTextField)
													  If  Not blnExceptionFlag Then
																	If OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName).GetROProperty("prompt")<>"" Then
																				 textFieldPrompt=OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName).GetROProperty("prompt")
																	ElseIf OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName).GetROProperty("description")<>"" Then
																				textFieldPrompt=OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName).GetROProperty("description")
																	End If
																					status="DONE"
																					
																					message="Focus is set to" & textFieldPrompt
																					Call ReporterFunction(strLibraryFileName,"SetFocusForm","2",stepName,message)
																	Else
																					Flag=1
																					status="FAIL"
																					message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																					Call ReporterFunction(strLibraryFileName,"SetFocusForm","1",stepName,message)																	
																	End If	
		
									 Else		       			  
														 status="FAIL"
														 Flag=1
														 message=textFieldPrompt &"Not Editable" 
														 blnObjectError=True
														 Call ReporterFunction(strLibraryFileName,"SetFocusForm","1",stepName,message)
								   End If
			   Else
			
								 status="FAIL"
								 Flag=1
								 message=textFieldPrompt & " Doesn't exist"
								 blnObjectError=True
								 Call ReporterFunction(strLibraryFileName,"SetFocusForm","1",stepName,message)
			  End If
			Set textFieldPrompt=Nothing
			set objTextField=Nothing
			'	stop
				'endTime=Timer()
				'exeTime= FormatNumber(endTime - startTime,3) 
				'Call UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
				 If  blnObjectError  Then
						Environment.Value("blnFatalError")=True
						Call Error_Recovery ("CloseAllForms")
				End If
			    	If Flag =1  Then
							SetFocusForm = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTextField,message)
					Else
							SetFocusForm = True
					End If
					If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
End If
End Function





'******************************************************************************************************************************************************************************
'Name of the Function	 ->SetFocusTabbedRegion
'Author									->TCS
'Date									 ->20/09/2011
'Description					   ->Set the focus to a specific field in a tabbed Region (text box )
'Input Parameters			 ->	formShortTitle - Short title of the form
'                                                   tabbedRegionLabel- Label of the tabbed region
'													tabbedRegionIndex-Index of the Tabbed Region
'													textFieldPromptOrDescription- Text Field description or prompt property
'													textFieldIndex- Index of the Text Field
'Output Parameters    :Boolean True on Success ; Failure messsage on Fail
'*******************************************************************************************************************************************************************************

Function  SetFocusTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,textFieldPromptOrDescription,textFieldIndex)
	If Not Environment.Value("blnFatalError") Then
						Dim blnObjectError:			blnObjectError=False
						Dim blnObjExistFlag:	  blnObjExistFlag=False
						'startTime=Timer()
						stepName="Set Focus"
						inputParameter="<b>Label of the Tabbed Region : </b>"& tabbedRegionLabel &  "<br><b>Index of TabbedRegion : </b>" & tabbedRegionIndex & "<br><b>Prompt / Description of Text Field : </b>" & textFieldPromptOrDescription & "<br><b>Index of Text Field : </b>" & textFieldIndex
						strStepDescription= "Set focus on the TabbedRegion [" & tabbedRegionLabel & "]"
						On error resume next
						If  OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("Label:=" & tabbedRegionLabel,"index:="& tabbedRegionIndex).OracleTextField("description:=" & textFieldPromptOrDescription,"index:="& textFieldIndex).Exist(gObjectTimeoutLimit) Then
													Set textObj=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("Label:=" & tabbedRegionLabel,"index:="& tabbedRegionIndex).OracleTextField("description:=" & textFieldPromptOrDescription,"index:="& textFieldIndex)
													blnObjExistFlag=True
						ElseIf  OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("Label:=" & tabbedRegionLabel,"index:="& tabbedRegionIndex).OracleTextField("prompt:=" & textFieldPromptOrDescription,"index:="& textFieldIndex).Exist(gObjectTimeoutLimit) Then
													Set textObj=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("Label:=" & tabbedRegionLabel,"index:="& tabbedRegionIndex).OracleTextField("prompt:=" & textFieldPromptOrDescription,"index:="& textFieldIndex)
													blnObjExistFlag=True
						Else
													status="FAIL"
													Flag=1
													blnObjectError=True
													message="[ " & textFieldPromptOrDescription &" ] does not Exist."
													Call ReporterFunction(strLibraryFileName,"SetFocusTabbedRegion","1",stepName,message)
						End If
							
		
						If   blnObjExistFlag AND textObj.GetROProperty("editable")=True  Then
																	If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																		ImagePath=CaptureScreenshot(textObj,strStepDescription)
																	End if
													textObj.SetFocus
													'// Calling Error Listener to detect any unexpected error
													blnExceptionFlag = Error_Listener (stepName,textObj)
				
													If Not  blnExceptionFlag Then					
																	status="DONE"
                                                                    																	message="Focus is set to [ " & textFieldPromptOrDescription & " ]."
																	Call ReporterFunction(strLibraryFileName,"SetFocusTabbedRegion","2",stepName,message)
													Else 
																	status="FAIL"
																	Flag=1
																	message="<br> Unexpected Error Encountered after Focusing</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																	Call ReporterFunction(strLibraryFileName,"SetFocusTabbedRegion","1",stepName,message)
													End If
						Else
													status="FAIL"
													Flag=1
													blnObjectError=True
													message="[ " & textFieldPromptOrDescription &" ] is non Editable."
													Call ReporterFunction(strLibraryFileName,"SetFocusTabbedRegion","1",stepName,message)
						End If
						
						set textObj= nothing
						'endTime=Timer()
						'exeTime= FormatNumber(endTime - startTime,3) 
						'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)			
						If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										Call Error_Recovery ("CloseAllForms")
						End If
					If Flag =1  Then
							SetFocusTabbedRegion = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(textObj,message)
					Else
							SetFocusTabbedRegion = True
					End If
					If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
	End If  
End Function



'**************************************************************************************************
'Name of the Function	 ->SetFocusTabbedRegionTable
'Author									->TCS
'Date									 ->07/09/2011
'Description					   ->Set the focus to a specific field in the tabbed region Table -->the specified field will be a cell of the table		        
'Input Parameters			 ->formShortTitle - Short title of the form
'													tabbedRegionLabel-Label of the tabbed region
													'block Name->Block Name of the Table
													'dataRowNumber->Row number / Line number of the table which needs focus
													'dataColumnName-->Column Name of the field which needs focus
'Output Parameters    	:Boolean True on Success ; Failure messsage on Fail
'**************************************************************************************************
Public Function SetFocusTabbedRegionTable(formShortTitle,tabbedRegionLabel,tableBlockName,dataRowNumber,dataColumnName)
	If Not Environment.Value("blnFatalError") Then
					'startTime=timer()
					stepName="Set Focus"
					inputParameter="Set Focus to" & dataColumnName
					strStepDescription= "Set focus on the TabbedRegion Table [ " & tableBlockName & "]"
					On error resume next
					 If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("Label:=" & tabbedRegionLabel).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit) Then
'										If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("Label:=" & tabbedRegionLabel).OracleTable("block name:="& tableBlockName).IsFieldEditable(dataRowNumber,dataColumnName) Then
                                                    set objTable=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("Label:=" & tabbedRegionLabel).OracleTable("block name:="& tableBlockName)
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
														ImagePath=CaptureScreenshot(objTable,strStepDescription)
													End if	
													status="DONE"
													OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("Label:=" & tabbedRegionLabel).OracleTable("block name:="& tableBlockName).SetFocus dataRowNumber,dataColumnName
                                                    message="Focus is set to " & dataColumnName & "Line No " & dataRowNumber
													Call ReporterFunction(strLibraryFileName,"SetFocusTabbedRegionTable","2",stepName,message)
'										 else 
'													status="FAIL"
'													Flag=1
'													message= dataColumnName &"Not Editable" &  "for Line Number :"& dataRowNumber &""
'													Call ReporterFunction(strLibraryFileName,"SetFocusTabbedRegionTable","1",stepName,message)
'										End If
					  Else
										status="FAIL"
										Flag=1
										message= " Object Doesn't exist"
									   Call ReporterFunction(strLibraryFileName,"SetFocusTabbedRegionTable","1",stepName,message)
					 End If  

					set objTable= Nothing
					'endTime=timer()
					'exeTime= FormatNumber(endTime - startTime,3) 
					'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)

					If Flag =1  Then
							SetFocusTabbedRegionTable = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTable,message)
					Else
							SetFocusTabbedRegionTable = True
					End If
					If blnDefault_eSwiftReporting Then  
							all UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
	End if 

End Function





';**************************************************************************************************'**************************************************************************************************
'Name of the Function	 ->SetFocusTable
'Author									->TCS
'Date									 ->20/09/2011
'Description					   ->Set the focus to a specific field in the Table -->the specified field will be a cell of the table		        
'Input Parameters			 ->formShortTitle - Short title of the form
'                                                   Block Name->Block Name of the Table
															'dataRowNumber->Row number / Line number of the table which needs focus
														'		dataColumnName-->Column Name of the field which needs focus
''Output Parameters    	:Boolean True on Success ; Failure messsage on Fail
'**************************************************************************************************'**************************************************************************************************
Function SetFocusTable(formShortTitle,tableBlockName,tableIndex,dataRowNumber,dataColumnName)
		    If Not Environment.Value("blnFatalError") Then
						Dim blnObjectError
						blnObjectError=False		
					   'startTime=Timer()
						stepName="Set Focus"
						inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br> <b>Block Name of Oracle table:</b> "& tableBlockName & "<br><b> Row Number: </b>" & dataRowNumber &"<br> <b>Name of the column : </b>" & dataColumnName
						strStepDescription= "Set focus on the table [" & tableBlockName & "]"
						On error resume next			
						If OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName,"index:="& tableIndex).Exists(gObjectTimeoutLimit) Then
											Set objTable=OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName,"index:="& tableIndex)
											If objTableIsFieldEditable(dataRowNumber,dataColumnName)Then
												If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																								ImagePath=CaptureScreenshot(objTable,strStepDescription)
																							End if
																objTable.SetFocus dataRowNumber,dataColumnName
																blnExceptionFlag = Error_Listener ("SetFocusTable",objTable)
																If Not blnExceptionFlag Then
																							status="DONE"
																							
																							
																							message="Focus is set to " & dataColumnName & "Line No " & dataRowNumber
																							Call ReporterFunction(strLibraryFileName,"SetFocusTable","2",stepName,message)
																Else
																							status="FAIL"
																							Flag=1
																							message="<br> Unexpected Error Encountered After setfocusing table field   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																							Call ReporterFunction(strLibraryFileName,"SetFocusTable","1",stepName,message)
																End If
																  
											Else  
																  status="FAIL"
																  Flag=1
																   message= dataColumnName &" Not Editable" &  "  for Line Number : "& dataRowNumber &""
																   blnObjectError=True
																  Call ReporterFunction(strLibraryFileName,"SetFocusTable","1",stepName,message)
							
											End If
					
						  Else 
								
											 status="FAIL"
											 Flag=1
											 message= dataColumnName & " Doesn't exist"
											 blnObjectError=True
											  Call ReporterFunction(strLibraryFileName,"SetFocusTable","1",stepName,message)
					
						End If

						Set objTable=Nothing
						'endTime=Timer()
						'exeTime= FormatNumber(endTime - startTime,3) 
						'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
				
						If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										Call Error_Recovery ("CloseAllForms")
						End If
				
						If Flag =1  Then
							SetFocusTable = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTable,message)
						Else
							SetFocusTable = True
						End If
						If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
	End If
End Function




'**********************************************************************************'***********************************************************************************
'Name of the Function   : SwitchResponsibility
'Author		    					 :   TCS
'Date			   					  : 09/09/2011
'Description		          : Select different responsibility  in Oracle Navigator
'Input Parameters	     : strResponsibility: Name of the responsibiliyt to be selected from Nagivator
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'***********************************************************************************

Function SwitchResponsibility(strResponsibility)
     If Not Environment.Value("blnFatalError") Then
					Dim blnObjectError:			blnObjectError=False
					'startTime=Timer()
					stepName="Switch Responsibility"
					inputParameter=" <b>Responsibility Name: </b>"& strResponsibility
					strStepDescription= "Switch to the Responsibility [ " & strResponsibility & " ]"
					On error resume next
					If strResponsibility<>"" Then
								Set objNavigator = OracleNavigator("short title:=Navigator")
								If objNavigator.Exist(gObjectTimeoutLimit) Then
														objNavigator.SelectMenu "File->Switch Responsibility..."
														If instr(OracleListOfValues("title:=Responsibilities").GetROProperty("list content"),strResponsibility) >0  Then
'																If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
'																				ImagePath=CaptureScreenshot(stepName,inputParameter )
'																end if

																If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objNavigator,strStepDescription)
																End if
																OracleListOfValues("title:=Responsibilities").Select strResponsibility
																status="DONE"
																message="[ " & strResponsibility & " ]  Responsibility Selected"
																Call ReporterFunction(strLibraryFileName,"SwitchResponsibility","2",stepName,message)
														Else
																ImagePath=CaptureScreenshot(stepName,inputParameter)
																If OracleListOfValues("title:=Responsibilities").OracleButton("label:=Cancel").Exist(1) Then
																		OracleListOfValues("title:=Responsibilities").OracleButton("label:=Cancel").Click
																End if
																status="FAIL"
																Flag=1
																message="Expected Responsibility [ "&  strResponsibility &" ] Value Not Found in Oracle List"
																Call ReporterFunction(strLibraryFileName,"SwitchResponsibility","1",stepName,message)
														End If
														
										else
														status="FAIL"
														Flag=1
														message="Could Not find Oracle LOV  to Switch reponsibilty."
														Call ReporterFunction(strLibraryFileName,"SwitchResponsibility","1",stepName,message)
		
								End if 
		
				 Else 
												  status="FAIL"
												  Flag=1
												  message="Responsibility Not Passed to Function"
												  blnObjectError=True
												 Call ReporterFunction(strLibraryFileName,"SwitchResponsibility","1",stepName,message)
				 End If
				 Set objNavigator= Nothing
				 
				'endTime=Timer()
				'exeTime= FormatNumber(endTime - startTime,3) 
				'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
				 If  blnObjectError  Then
												Environment.Value("blnFatalError")=True
												Call Error_Recovery ("CloseAllForms")
				End If

		
				   If Flag =1  Then
							SwitchResponsibility = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objNavigator,message)
					Else
							SwitchResponsibility = True
					End If
					If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
End If 
End Function



'*********************************************************************************************************************************************************************
'Name of the Function	:	SynchronizeBrowser(browserName)
'Author								:TCS
'Date                             :	12.09.2011
'Description					:	Synchronize newly opened page before doing some operation	        
'Input Parameters	  	:	browserName(Name Property of the Browser Object)
'Output Parameters      :Boolean True on Success ; Failure messsage on Fail
'**********************************************************************************************************************************************************************
Public Function SynchronizeBrowser(browserName)
      If Not Environment.Value("blnFatalError") Then
				   On error resume next
				   Set pageDesc=Description.Create()
					pageDesc("micclass").value="Page"
					Set pageObj=browser("name:="& browserName).Childobjects(pageDesc)
					pageObj(0).sync
					Set pageObj=Nothing
					Set pageDesc=Nothing
	End If
End Function


'''***********************************************************************************
''Name of the Function : TryCatch_ExitOnMatch (not Tested completely)
''Author		    : Prashant Sharma
''Date			    : 24/05/2013
''Description	    : Function  to Stop execution of current script in case a value matches an No-Go value .e.g. Stop if PO status = "Not Approved"
''Input Parameters	    : blnExpected  = Expected Value
''				blnActualValue = Actual Value
''				status = Fail /Pass according to the situation
''				message = "meesage to be given in the report as this will be last entry fot the test case in report
''Output Parameters    : N/A
''***********************************************************************************
'
'
'Function TryCatch_ExitOnMatch(blnExpected,blnActualValue,status,message)
'If  blnActualValue =blnExpected  Then
'		'endTime=timer()
'		'exeTime=FormatNumber(endTime - startTime,3) 
'		'Call  UpdateResultHtml(status,"None","None",message,exeTime,"Stop Execution")
'		CreateSummaryReport
'		ExitTest
'End If
'End Function




'******************************************************************************************************************************************************************************************
'Name of the Function   : UploadFile
'Author		     					  :TCS
'Date			 				     :26-Sep-2011
'Description		          : Uploads a file to apllication by specifying the path of the file
'Input Parameters	     : browserTitle -> Title property value  of the Browser 
                                           'pageTitle   ->   Title property value of the Page
										   'webFileName ->Name property value of the WebFile
										   'attachmentFilePath -> Attachment File Path  
										   'buttonHtmlid  ->Html id  property value of the button
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'******************************************************************************************************************************************************************************************
Public Function UploadFile(browserTitle,pageTitle,webFileName,attachmentFilePath,buttonHtmlid)
   	If Not Environment.Value("blnFatalError") Then
					Dim blnObjectError
					blnObjectError=False
				
					'startTime=Timer()
					Set filesys = CreateObject("Scripting.FileSystemObject")
					stepName="Upload a File "
					inputParameter="<b>Title of the Browser :</b>" & browserTitle &"<br><b>Title of the Page : </b>" & pageTitle &"<br><b>Name of the WebFile : </b>"& webFileName  &"<br><b> Attachment File Path : </b>"& attachmentFilePath &"<br><b>Html id of the button : </b>"& buttonHtmlid 
					 strStepDescription= "Upload the file [" & attachmentFilePath & "]"
					On error resume next
					If  Browser("title:=" & browserTitle).Page("title:=" & pageTitle).WebFile("name:=" & webFileName).exists AND Browser("title:=" & browserTitle).Page("title:=" & pageTitle).WebButton("html id:=" & buttonHtmlid).Exist(gObjectTimeoutLimit) Then
										 Browser("title:=" & browserTitle).Page("title:=" & pageTitle).WebFile("name:=" & webFileName).Set attachmentFilePath
										Set objWebFile= Browser("title:=" & browserTitle).Page("title:=" & pageTitle).WebFile("name:=" & webFileName)
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											ImagePath=CaptureScreenshot(objWebFile,strStepDescription)
										End if
										wait 5
										 Browser("title:=" & browserTitle).Page("title:=" & pageTitle).WebButton("html id:=" & buttonHtmlid).Click	
										 Set objWebButton=Browser("title:=" & browserTitle).Page("title:=" & pageTitle).WebButton("html id:=" & buttonHtmlid)
										 blnExceptionFlag = Error_Listener ("UploadFile",objWebButton)
										 If  Not blnExceptionFlag Then
																 status="DONE"
																 message="File uploaded successfully"
																 Call ReporterFunction(strLibraryFileName,"UploadFile","2",stepName,message)
										else
																 Flag=1
																 status="FAIL"
																 message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																 Call ReporterFunction(strLibraryFileName,"UploadFile","1",stepName,message)																	
										End If	

					Else
										 status="FAIL"
										  Flag=1
										  message="Object Does not exists"  
										  blnObjectError=True
										  Call ReporterFunction(strLibraryFileName,"UploadFile","1",stepName,message)
					end if 
					Set objWebFile= Nothing
					
					'endTime=Timer()
					'ExeTime = FormatNumber(endTime - startTime,3) 
					'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
					If  blnObjectError  Then
									Environment.Value("blnFatalError")=True
									Call Error_Recovery ("CloseAllForms")
					End If
				    If Flag =1  Then
							UploadFile = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebFile,message)
					Else
							UploadFile = True
					End If
					If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If

	End If
End Function




'**********************************************************************************************************************************************************************
'Name of the Function  : ValidateDataInTable
'Author		    :  TCS
'Date			    :   1 Sep 2011
'Description	     :  Function to Verify if any value is present in a Oracle Table 
'Input Parameters	      :  formShortTitle,tableBlockName,tableColumnName,ExpectedData
'										    :dataRowNo = enter the Row Number if row number known Else leave blank							
'Output Parameters     :  True/ False
'**********************************************************************************************************************************************************************

Function ValidateDataInTable(formShortTitle,tableBlockName,dataRowNo,tableColumnName,ExpectedData)
	 If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError:   blnObjectError=False
				Dim blnFlagFound,blnNoRowGivenFlag  
				blnFlagFound = False
				blnNoRowGivenFlag = False
				blnCaptureFlag = True
				'startTime=timer()
				stepName="Search a value in Table populated with Values "
				inputParameter="Short Title of the Form:"& formShortTitle&" "&" Block Name of the Oracle table: "& tableBlockName & "Name of the column :"& tableColumnName
				strStepDescription= "Validate the data [ " & ExpectedData & " in the table [ " & buttonLabelOrDescription & " ]"
				On error resume next
				If OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit) Then
									   Set objData= OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName)
									   If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																	ImagePath=CaptureScreenshot(objData,strStepDescription)
																End if
									   If  dataRowNo = ""  or isEmpty(dataRowNo)Then	'
																blnNoRowGivenFlag =true ' Flag to check if RowNumber supplied
																Set Ws = CreateObject("WScript.Shell")		' This section would be executed  if no RowNumber is supplied. this code would iterate thorugh the each row until data found inder Column
																intRow=1
																Do
																					currentRowData=OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).GetFieldValue(intRow,tableColumnName)
																					OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).SetFocus intRow,tableColumnName
																					Ws.SendKeys "{Down}"
																					Wait(2)
																					intRow=intRow+1
																					nextRowdata=OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).GetFieldValue(intRow,tableColumnName)
																'Loop Until (nextRowdata = ExpectedData) Or (Not err.number =0)  
																Loop Until (currentRowData  = ExpectedData) Or (Not err.number =0)  Or (nextRowdata = currentRowData  )
																err.number =0
																If nextRowdata = ExpectedData Then
																					blnFlagFound= True
																					sActualValue = nextRowdata
																End If
										Else
																
																sActualValue = OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).GetFieldValue(dataRowNo,tableColumnName)
																If  ExpectedData = sActualValue Then 
																					blnFlagFound = True
																End if 
																	
										End If
										If blnFlagFound  Then
																Call ReporterFunction(strLibraryFileName,"ValidateDataInTable","2"," Validation in Oracel Table ", ExpectedData &  ": has been successfully Validated in the ["& descriptionOfTextField &"  ] Oracle Table ")
																status="PASS"
																
																message="Expected Value:  [ "&  ExpectedData  & " ] : Matches with Actual Data [ " & sActualValue &" ] "
                                                                ValidateDataInTable = True
    										Else
																Call ReporterFunction(strLibraryFileName,"ValidateDataInTable","1","Validation in Oracel Table  ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
																status="FAIL"
																Flag=1
																If blnNoRowGivenFlag  Then
																				message= " Expected Value  :[ " & ExpectedData  &" ] NOT  Found in Any Row of Oracle Table : [ " &  tableBlockName &" ] "
																Else
																				message= " Expected Value  :[ " & ExpectedData  &" ] NOT  Matching with  Actual Value :[  " & sActualValue &" ] in Expected Row : '"& dataRowNo 
																End If
																ValidateDataInTable = False
																		
										End If
		Else
										Call ReporterFunction(strLibraryFileName,"ValidateDataInTable","1","Table Name "& tableBlockName,"Table in  " & formShortTitle & " Not Found")
										status="FAIL"
										Flag=1
										message="Given Table Name [ "& tableBlockName &" ] Not Found"
										blnObjectError=True
										ValidateDataInTable = False
		End if 
		
		Set objData= Nothing
		'endTime=timer()
		'exeTime=FormatNumber(endTime - startTime,3) 
		'Call  UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
		 If  blnObjectError  Then
					Environment.Value("blnFatalError")=True
					Call Error_Recovery ("CloseAllForms")
		End If
		
		If Flag =1  Then
							ValidateDataInTable = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objData,message)
		Else
				ValidateDataInTable = True
		End If
		If blnDefault_eSwiftReporting Then  
				Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
		
		
		
End If


End Function



''***********************************************************************************
'Name of the Function : ValidateErrorMessage
'Author		    : TCS
'Date			    : 24/05/2013
'Description	    : Validate expected message/string value in a Error popup 
'Input Parameters	    : strExpectedMessage = Expected fuill message or part of message
'Output Parameters    : True/ False
'***********************************************************************************
Function ValidateErrorMessage(strExpectedMessage)
	If Not Environment.Value("blnFatalError") Then
			    Dim blnObjectError
			    blnObjectError=False
                'startTime=Timer()
  	            stepName="Verify Error Pop Up"
	            inputParameter="None"
	            strStepDescription= "Validate the Error Message [" & strExpectedMessage & "]"
				On error resume next
				blnCaptureFlag =  True
				If  OracleNotification("title:=Error").Exist(gObjectTimeoutLimit) Then
										Set objError= OracleNotification("title:=Error")
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
															ImagePath=CaptureScreenshot(objError,strStepDescription)
														End if
										strActualMessage = OracleNotification("title:=Error").GetROProperty("message")
										If  Instr(Ucase(strActualMessage),Ucase(strExpectedMessage))>0 Then
														status="PASS"
														blnCaptureFlag = True
														message="Expected Data :  [ "&  strExpectedMessage  & " ]<br> : was Found in  with Actual  Value : <br>[ " & strActualMessage & " ] "
														ValidateErrorMessage= TRUE
														
														
														
										Else
														status="FAIL"
														Flag=1
														message= " Expected Data  : [ " & strExpectedMessage  &" ] <br> NOT  Found in  with  Actual Value :<br> [  " & strActualMessage &" ] "
														ValidateErrorMessage = FALSE
										End If
										'endTime=Timer()
										'ExeTime = FormatNumber(endTime - startTime,3) 
										'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
'										If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
'														ImagePath=CaptureScreenshot(stepName,inputParameter )
'										End If
										OracleNotification("title:=Error").Approve

				Else

										status="FAIL"
										Flag=1
										message="Error Pop Up Not Found."
										blnObjectError=True
										'Call ReporterFunction(strLibraryFileName,"ClickNotificationButton","1",stepName,message)
										'endTime=Timer()
										'ExeTime = FormatNumber(endTime - startTime,3) 
										'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

			   End If
			   
			   Set objError= Nothing

				If  blnObjectError  Then
						Environment.Value("blnFatalError")=True
						'Call Error_Recovery ("CloseAllForms")
				End If
				
				If Flag =1  Then
							ValidateErrorMessage = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objError,message)
				Else
							ValidateErrorMessage = True
				End If
				If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				
				
End if 	 
End Function 	




''***********************************************************************************
'Name of the Function : ValidateNotePopUp
'Author		    : TCS
'Date			    : 24/05/2013
'Description	    : Validate excpeted message/string value in a Note popup 
'Input Parameters	    : strExpectedMessage = Expected fuill message or part of message
'Output Parameters    : True/ False
'***********************************************************************************
Function ValidateNotePopUp(strExpectedMessage)
	If Not Environment.Value("blnFatalError") Then
			   Dim blnObjectError:	    blnObjectError=False
                'startTime=Timer()
  	            stepName="Verify Note  Pop Up and its Message"
	            inputParameter="Expected Message <br>"& strExpectedMessage
	            strStepDescription= "Validate the Note Pop Up [" & strExpectedMessage & "]"
				On error resume next
				blnCaptureFlag =  True
				If  OracleNotification("title:=Note").Exist(gObjectTimeoutLimit) Then
							Set objPopUp= OracleNotification("title:=Note")
							If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
													ImagePath=CaptureScreenshot(objPopUp,strStepDescription)
												End if
							strActualMessage = OracleNotification("title:=Note").GetROProperty("message")
							If  Instr(Ucase(strActualMessage),Ucase(strExpectedMessage))>0 Then
												status="PASS"
												blnCaptureFlag = True
												message="Expected Data :  [ "&  strExpectedMessage  & " ]<br> : was Found in  with Actual  Value : <br>[ " & strActualMessage & " ] "
												ValidateNotePopUp= TRUE
												
												
							Else
												
												status="FAIL"
												Flag=1
												message= " Expected Data  : [ " & strExpectedMessage  &" ] <br> NOT  Found in  with  Actual Value :<br> [  " & strActualMessage &" ] "
												ValidateNotePopUp = FALSE
							End If
							'endTime=Timer()
							'ExeTime = FormatNumber(endTime - startTime,3) 
							'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
'							If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
'											ImagePath=CaptureScreenshot(stepName,inputParameter )
'							End If
							OracleNotification("title:=Note").Approve

				Else

										Reporter.ReportEvent micFail,message,message
										status="FAIL"
										Flag=1
										message="Note  Pop Up Not Found."
										blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"ClickNotificationButton","1",stepName,message)
										'endTime=Timer()
										'ExeTime = FormatNumber(endTime - startTime,3) 
										'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

			   End If
			   
			   Set objPopUp= Nothing
 
				
				If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										'Call Error_Recovery ("CloseAllForms")
			  End If
			  
			  If Flag =1  Then
							ValidateNotePopUp = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objPopUp,message)
			Else
							ValidateNotePopUp = True
			End If
			If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If
End if 	 

End Function 


'***********************************************************************************'***********************************************************************************
'Name of the Function  : ValidateTextFieldValue
'Author		    					:  TCS
'Date			    				:   1 Sep 2011
'Description	     :  Validation function for matching expected  data with runtime data in Oracle Text Field 
'Input Parameters	     :  formShortTitle,textFieldPromptOrDescription,ExpectedData,
'Output Parameters     :  TRUE or FALSE
'***********************************************************************************'***********************************************************************************

Function ValidateTextFieldValue(formShortTitle,textFieldPromptOrDescription,ExpectedData)
 If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError:   blnObjectError=False
				'startTime=Timer()
				stepName="Validating  Expected Value in Text Field : Full String  Match "
				inputParameter="Short Title of the Form:"& formShortTitle&""& chr(13) &"  Name of the Oracle TextField: "& textFieldPromptOrDescription
				strStepDescription= "Validate the Text Field value [" & ExpectedData & "] in the Text Field [ " & textFieldPromptOrDescription & " ]"
				blnCaptureFlag = TRue
				If OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription).Exist(gObjectTimeoutLimit) Then
						Set objTextField= OracleFormWindow("short title:="& formShortTitle).OracleTextField("description:="& textFieldPromptOrDescription)
				ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTextField("developer name:="& textFieldPromptOrDescription).Exist(gObjectTimeoutLimit) Then
						Set objTextField= OracleFormWindow("short title:="& formShortTitle).OracleTextField("developer name:="& textFieldPromptOrDescription)
								 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
										ImagePath=CaptureScreenshot(objTextField,strStepDescription)
								  End if
								sActualValue = objTextField.GetROProperty("value")
								If  Instr(sActualValue , ExpectedData)> 0  Then
																	Call ReporterFunction(strLibraryFileName,"ValidateTextFieldValue","2","TextField ",ExpectedData &  ": has been successfully Validated in the "& textFieldPromptOrDescription &"Text  field")
																	 status="PASS"
																	 message="Expected Data :  [ "&  ExpectedData  & " ] : Matches with Actual  Value : [ " & sActualValue & " ] "
																	  ValidateTextFieldValue = TRUE
																	  blnCaptureFlag =  True
				
								Else
																	Reporter.ReportEvent micFail,message,message
																	Call ReporterFunction(strLibraryFileName,"ValidateTextFieldValue","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
																	status="FAIL"
																	Flag=1
																	message= " Expected Data  : [ " & ExpectedData  &" ] NOT  Matching with  Actual Value : [  " & sActualValue &" ] "
																	ValidateTextFieldValue = FALSE
								End If
				Else
								Call ReporterFunction(strLibraryFileName,"ValidateTextFieldValue","1","TextField ", " Text  Field  Not Found")
								status="FAIL"
								Flag=1
								message="Given  Text Field object Not Found"
								ValidateTextFieldValue = FALSE
				End if 
				
				Set objTextField= Nothing

				'endTime=Timer()
				'ExeTime = FormatNumber(endTime - startTime,3) 
				'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
				If  blnObjectError  Then
							Environment.Value("blnFatalError")=True
							Call Error_Recovery ("CloseAllForms")
				End if 
				
				If Flag =1  Then
							ValidateTextFieldValue = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTextField,message)
				Else
							ValidateTextFieldValue = True
				End If
				If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				
End If 
	
End Function



'**********************************************************************************************************************************************************************
'Name of the Function   : VerifyExistenceWebTable
'Author		     						:	  TCS
'Date			 						:  3 June 2011
'Description					:  Check Existence of Oracel WebTable 
'Input Parameters	      :  browserName,tableColumnName,totalTableColumnNumber: total Column numbers in the expected Table
'Output Parameters      : TRUE/FALSE
'**********************************************************************************************************************************************************************
Function VerifyExistenceWebTable(browserName,tableColumnName,totalTableColumnNumber)

    If Not Environment.Value("blnFatalError") Then
					Dim blnObjectError:    blnObjectError=False
					startTime=Timer()
					stepName="Verification of Web Table Existence "
					inputParameter= tableColumnName
					strStepDescription= "Verify the existence of the WebTable with with Column name [ " & tableColumnName & " ]"
					Set oDesc = Description.Create()
					oDesc("micclass").Value = "WebTable"
					oDesc("html tag").Value = "TABLE"
					If Browser("name:="& browserName).Page("title:="& browserName).Exist(gObjectTimeoutLimit+5) Then															
															Set  tableCollection = Browser("name:="& browserName).Page("title:="& browserName).Childobjects(oDesc)
															NumberOfObjects = tableCollection.Count																	
															For i = 0 To NumberOfObjects - 1		'Search for a specific WebEdit object and set its value
																					tableColumnNames = tableCollection(i).GetROProperty("innertext")
																					tableColumnCount = tableCollection(i).GetROProperty("cols")																
																					If instr(tableColumnNames,tableColumnName) AND  tableColumnCount  = totalTableColumnNumber Then
																												If tableCollection(i).RowCount >2Then 
																																	Call ReporterFunction (strLibraryFileName,"VerifyExistenceWebTable","2","Web Table ",tableColumnName &" Table Found")
																																	status="DONE"
																																	message="Web Table with Column as "& tableColumnName & " Found Successfully "
																																	VerifyExistenceWebTable =  True 
																																	
																														
																												Else
																																	Call ReporterFunction (strLibraryFileName,"VerifyExistenceWebTable","1","Web Table ",tableColumnName &" Table Found but has No Entries")
																																	status="DONE"
																																	message="Web Table with Column as "& tableColumnName & " Has no entries"
																																	VerifyExistenceWebTable =  FALSE 
																												End if 
																												Exit For 
																						End If
															Next
					Else
																
															Call ReporterFunction (strLibraryFileName,"VerifyExistenceWebTable","1","Web Table ",tableColumnName&" Table  Missing/not Matching")
															status="DONE"
															message="Web Table with Column as "& tableColumnName & "  Missing/not Matching"
															VerifyExistenceWebTable =  FALSE 
					End If 
				
					'endTime=Timer()
					'ExeTime = FormatNumber(endTime - startTime,3) 
					'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
					 If  blnObjectError  Then
								Environment.Value("blnFatalError")=True
								Call Error_Recovery ("CloseAllForms")
					End If
	End If

End Function



'***********************************************************************************'***********************************************************************************
'Name of the Function  : VerifyValueinArray
'Author		    				:  TCS
'Date			    			:   1 Sep 2011
'Description	     :  Function to Verify if any expected data is in a supplied array
'Input Parameters	     :  arrInputArray,strValue
'Output Parameters     :  True / False
'***********************************************************************************'***********************************************************************************

Function VerifyValueinArray(arrInputArray,strValue)
					Dim blnFoundFlag ' Flag to check if Value found in Array 
					blnFoundFlag  = False
					For iCnt =0 to Ubound(arrInputArray)
						If strValue =  arrInputArray(iCnt)  Then
								blnFoundFlag  = true
							Exit For 
						End If
					Next
				
					If blnFoundFlag  Then
						VerifyValueinArray =  True 
					Else
						VerifyValueinArray =  False
					End If

End Function





''***********************************************************************************'***********************************************************************************
'Name of the Function : VerifyWebElementExist
'Author		  					  : TCS
'Date			    			: 24/05/2013
'Description	    : Function to Verify if a webelement exist on page 
'Input Parameters	    : browserName = Briswer Name property 
'				WebElementName= Webelement name property
'				WebElementIndex = Webelement index property
'Output Parameters    : Boolean True /Flase
'***********************************************************************************'***********************************************************************************

Public Function VerifyWebElementExist(browserName,WebElementInnerText,WebElementIndex)
    If Not Environment.Value("blnFatalError") Then
					Dim blnObjectError:		blnObjectError=False
					startTime=Timer()
					stepName="Verify WebElement on Page "
					inputParameter="<b>Browser Name : </b>" & browserName &"<br><b>WebElement : </b>"& WebElementInnerText &"<br><b>WebElement  Index : </b>" & WebElementIndex
					strStepDescription= "Verify the Existence of the Web Element [" & WebElementInnerText & "]"
					blnCaptureFlag = TRue 
					On Error Resume Next
                    Set objWebElement=Browser("name:="& browserName).Page("title:="& browserName).WebElement("innertext:="& WebElementInnerText,"index:="& WebElementIndex)
					If  objWebElement.Exist(gObjectTimeoutLimit+3) Then
														status="DONE"
														If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
															ImagePath=CaptureScreenshot(objWebElement,strStepDescription)
														End if
														
														message="WebElement  [ "& WebElementInnerText &" ] successfully verified on Web Page "
														Call ReporterFunction(strLibraryFileName,"VerifyWebElementExist","2",stepName,message)
					Else
														status="FAIL"
														Flag=1
														message="WebElement [ "& WebElementInnerText &" ] not Found on page verification failed "
														blnObjectError=True
														Call ReporterFunction(strLibraryFileName,"VerifyWebElementExist","1",stepName,message)
					End If
	
					Set objLink=Nothing
					Set childObj=Nothing
					Set obj=Nothing
					'endTime = Timer()
					'ExeTime = FormatNumber(endTime - startTime,3)				
					'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
					
					If Flag =1  Then
							VerifyWebElementExist = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objWebElement,message)
					Else
							VerifyWebElementExist = True
					End If
					If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
					
	End if 
End Function



'**********************************************************************************'**********************************************************************************
'Name of the Function   : WaitForObject
'Author		    				: TCS
'Date			      			: 24/05/213
'Description			: Generic Wait function for an object to load / appear on Page /Forms within maximum timeout supplied
'Input Parameters	     : objObject = object variable holding the decsription of the object 
'												: maxWaitTimeinSec = maximum timeout to wait in seconds			
'Output Parameters        : NA
'***********************************************************************************'**********************************************************************************
Function WaitForObject(objObject,maxWaitTimeinSec)
	Do
					Wait(1)
					iCounter = iCounter + 1
	Loop Until objObject.Exist(1) or iCounter > maxWaitTimeinSec
End Function




'*********************************************************************************************************************************************************************
'Name of the Function 
'                                                                                        :        EnterTextTabbedRegionHierarchy(formShortTitle,TopLeveltabbedRegionLabel,TopLeveltabbedRegionIndex,LowerLeveltabbedRegionLabel,LowerLeveltabbedRegionIndex,textFieldDescription,valueToEnter)
'Author 
'                                                                                        :        TCS 
'Date                                                             
'                                                                                        :        16.03.2014 
'Description                                         
'                                                                                        :        Entering value in Text Field inside Oracle Tabbed Tabbed Region 
'Input Parameters             
'                                                                                        :        formShortTitle : Short Title Property of the Oracle Form Window 
'                                                                                                tabbedRegionLabel : Label Property of the Oracle Tabbed Region 
'                                                                                                tabbedRegionIndex : Index of the Oracle Tabbed Region 
'                                                                                                        (Normally set as 0. For more than one identical object need to change accordingly.) 
'                                                                                                textFieldDescription : Description / Prompt Property of the Text Field 
'                                                                                                        (Choose which one is available. Can choose either  in case both are present.) 
'                                                                                                textFieldIndex : Index of the Text Field 
'                                                                                                        (Normally set as 0. For more than one identical object need to change accordingly.) 
'                                                                                                valueToEnter : Value to be Entered 
'Output Parameters       
'                                                                                        : None 
'**********************************************************************************************************************************************************************
'Function    EnterTextTabbedRegionHierarchy(formShortTitle,TopLeveltabbedRegionLabel,TopLeveltabbedRegionIndex,LowerLeveltabbedRegionLabel,LowerLeveltabbedRegionIndex,textFieldDescription,valueToEnter)
'**********************************************************************************************************************************************************************
Public Function EnterTextTabbedRegionHierarchy(formShortTitle,TopLeveltabbedRegionLabel,TopLeveltabbedRegionIndex,LowerLeveltabbedRegionLabel,LowerLeveltabbedRegionIndex,textFieldDescription,valueToEnter)
        On Error Resume Next 
        If Not Environment.Value("blnFatalError") Then 
                Dim blnObjectError 
                blnObjectError=False 
                'startTime=Timer() 
                stepName="Enter Text in multiple levels of tabbed region" 
                inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& TopLeveltabbedRegionLabel & "<br><b>Prompt Or Description of the TextField : </b>" & textFieldDescription & "<br><b>Index of the Tabbed Region : </b>" & TopLeveltabbedRegionIndex & "<br><b>Index of the Text Field : </b>" & textFieldIndex & "<br><b>Value to Enter : </b>" & valueToEnter 
				strStepDescription= "Enter Text ["& valueToEnter &"]in multiple levels of tabbed region having top level tab [" & TopLeveltabbedRegionLabel & "] and low level tab[ " & LowerLeveltabbedRegionLabel & " ]"

                On Error Resume Next 
                Dim intSetFlag,objText 
                intSetFlag=1 

                If formShortTitle<>"" AND TopLeveltabbedRegionLabel<>"" AND TopLeveltabbedRegionIndex<>"" AND LowerLeveltabbedRegionLabel<>"" AND LowerLeveltabbedRegionIndex<>"" AND textFieldDescription<>"" Then 
                'OracleFormWindow("short title:=Sales Orders").OracleTabbedRegion("label:=Order Information","index:=0").OracleTabbedRegion("label:=Main","index:=1").OracleTextField("description:=Customer PO").Enter "123456" 
                                If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTextField("description:="& textFieldDescription).Exist(3) Then 
                                                Set objhierarchialtabbedregion =OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTextField("description:="& textFieldDescription) 
                                                intSetFlag = 0 
                                Else 
                                                status="FAIL" 
                                                Flag=1 
                                                message="Given Text Field Object Not Found." 
                                                blnObjectError=True 
                                                Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegionHierarchy","1",stepName,message) 
                                End If 
								If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																ImagePath=CaptureScreenshot(objhierarchialtabbedregion,strStepDescription)
								End if

                                If intSetFlag = 0 Then 
                                                If objhierarchialtabbedregion.GetROProperty("editable") AND objhierarchialtabbedregion.GetROProperty("enabled") Then 
                                                                objhierarchialtabbedregion.Enter valueToEnter 
                                                                                  '// Calling Error_Listener 
                                                                blnExceptionFlag = Error_Listener ("EnterTextTabbedRegionHierarchy",objText) 
                                                                If Not blnExceptionFlag Then 
                                                                                        status="DONE" 
                                                                                        message="[ " &  valueToEnter & " ] :  has been entered in the Text Field." 
                                                                                        Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegionHierarchy","2",stepName,message) 
                                                                Else 
                                                                                        status="FAIL" 
                                                                                        Flag=1 
                                                                                         message="<br> Unexpected Error Encountered After Entering Text   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] " 
                                                                                        Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegionHierarchy","1",stepName,message)         
                                                                End If 
                                                Else 
                                                                status="FAIL" 
                                                                Flag=1 
                                                                message="The Text field is NonEditable/Disabled." 
                                                                blnObjectError=True 
                                                                Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegionHierarchy","1",stepName,message) 
                                                End If 
                                End If 
                Else 
                                status="FAIL" 
                                Flag=1 
                                message="Insufficient Data Provided." 
                                blnObjectError=True 
                                Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegionHierarchy","1",stepName,message) 
                End If 

                'endTime=Timer() 
                'ExeTime = FormatNumber(endTime - startTime,3) 



        If  blnObjectError  Then 
                 Environment.Value("blnFatalError")=True 
                Call Error_Recovery ("CloseAllForms") 
        End If 

        Set objhierarchialtabbedregion  =Nothing
				If Flag =1  Then
							EnterTextTabbedRegionHierarchy = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
				Else
						EnterTextTabbedRegionHierarchy = strFieldValue
				End If
				If blnDefault_eSwiftReporting Then  
						Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If

        End If         
End Function 

'********************************************************************************************* 

Function CaptureTableCellDataOfSameRowBasedOnAnotherCell(formShortTitle,tableBlockName,columnNoToSearch,dataToSearch,columnNoToCapture)
	 If Not Environment.Value("blnFatalError") Then 
                        Dim blnObjectError 
						blnObjectError=False                 
						startTime=Timer() 
						stepName="Capture Data from a cell of a table based on a another cell on same row" 
						inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br> <b>Block Name of Oracle table:</b> "& tableBlockName & "<br><b>Searching Column Number:  </b>"& columnNoToSearch &"<br> <b>Data  to search: </b>" & dataToSearch &"<br><b>Column No. to capture data from:</b>" & columnNoToCapture
						strStepDescription="Capture data from a cell of the table ["&tableBlockName&"] based on another cell with data ["&dataToSearch&"] in the column number ["&columnNoToSearch&"] on the same row"
                       					Dim strFieldValue, intSetFlag, tableObj, flgDataCapture
      
						On error resume next 
						 intSetFlag = 1
						 flgDataCapture = 0
						If formShortTitle<>"" and tableBlockName<>"" and columnNoToSearch<>"" and  dataToSearch<>"" and columnNoToCapture<>"" Then 
                                 
                                                        If  OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit)Then 
				 
				Set tableObj = OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName) 
					If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
						ImagePath=CaptureScreenshot(tableObj,strStepDescription)
					End if
				intSetFlag = 0
			Else 
                                                                           status="FAIL" 
                                                                           Flag=1 
				blnObjectError=True
                                                                           message="[" & tableBlockName & "] table doesnot exist"         
                                                                           Call ReporterFunction(strLibraryFileName,"CaptureTableCellDataOfSameRowBasedOnAnotherCell","1",stepName,message)                 
                                                  	End If 	
			If intSetFlag = 0 Then
                                                                            Set objShell = CreateObject("WScript.Shell") 
                                                                            i=1 
                                                                            Do                             
                                                                             	currentRowData=tableObj.GetFieldValue(i,cint(columnNoToSearch)) 
                                                                                              If currentRowData=dataToSearch Then
																												strFieldValue = tableObj.GetFieldValue(i,cint(columnNoToCapture))
                                                                                                                flgDataCapture=1 
                                                                                                                Exit Do 
                                                                                             Else 
                                                                                                                tableObj.SetFocus i,cint(columnNoToSearch)
																												objShell.SendKeys "{Down}" 
                                                                                                                 i=i+1 
                                                                                             End If 
                                                                                             nextRowdata=tableObj.GetFieldValue(i,cint(columnNoToSearch)) 
				Loop Until(currentRowData=nextRowdata) 
                                                                           Set objShell=nothing 
	                                                         blnExceptionFlag = Error_Listener (stepName,objTable) 
		                                      If Not blnExceptionFlag and flgDataCapture=1 Then 
                                     			                   status="DONE" 
				
                                                        		message="Cell data :["& strFieldValue &"] captured successfully corresponding to cell data ["& dataToSearch & "]"
                                                        		Call ReporterFunction(strLibraryFileName,"CaptureTableCellDataOfSameRowBasedOnAnotherCell","2",stepName,message) 
                                                  		Else 
                                                        		status="FAIL" 
                                                        		Flag=1 
                                                        		message="[" & dataToSearch & "] does not exist in the list ["& columnToSearch & "]"
                                                        		Call ReporterFunction(strLibraryFileName,"CaptureTableCellDataOfSameRowBasedOnAnotherCell","1",stepName,message)                 
                                                		End If 
			End If

		Else 
        			status="FAIL" 
        			Flag=1 
        			message="One or more missing parameters" 
        			Call ReporterFunction(strLibraryFileName,"CaptureTableCellDataOfSameRowBasedOnAnotherCell","1",stepName,message)                
			Set tableObj = Nothing 
		End If
                'endTime=Timer() 
       	'ExeTime = FormatNumber(endTime - startTime,3) 
               ' Call  UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)

                         If  blnObjectError  Then 
                                Environment.Value("blnFatalError")=True 
                                Call Error_Recovery ("CloseAllForms") 
                        End If 

						If Flag =1  Then
							CaptureTextTabListValue = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
						Else
							CaptureTableCellDataOfSameRowBasedOnAnotherCell = strFieldValue
						End If
						If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If

        End If 
End Function



'************************************************************************************'************************************************************************************
'Name of the Function   : SelectFromLOV_Partial
'Author		  						  :TCS
'Date			                     :12.09.2011
'Description		     : selecting a value from a LOV given partial Value
'Input Parameters	     : titleOfLOVWindow->Title of the LOV Window  
'												passedValue->value to be selected from the LOV
'Output Parameters        :Boolean True on Success ; Failure messsage on Fail
'***********************************************************************************'************************************************************************************
Public Function SelectFromLOV_Partial(titleOfLOVWindow,passedValue)
		 If Not Environment.Value("blnFatalError") Then
								Dim blnObjectError:blnObjectError=False
								Dim searchFlag  :	searchFlag=0'Flag to check if the passed value exists in the LOV or not
								'startTime=timer()
								stepName="Select from LOV: "& titleOfLOVWindow
								strStepDescription= "Select the value [ " & passedValue & " ] from LOV [" & titleOfLOVWindow & "]"
								inputParameter="Title of  LOV Window:"& titleOfLOVWindow & "<br> Value to be selected: "&passedValue
						
								On error resume next
								'Check if parameters are empty
								 If   OracleListOfValues("title:="& titleOfLOVWindow).exist(gObjectTimeoutLimit+5) Then
								 					Set oracleLOVObject= OracleListOfValues("title:="& titleOfLOVWindow)
													OracleListOfValues("title:="& titleOfLOVWindow).Find "%" & passedvalue & "%"	
'														If blnCaptureFlag = True  or  blnCreateImageEachStep = True  Then
'															ImagePath=CaptureScreenshot(stepName,inputParameter )					
'														end if
													listContent_Str=OracleListOfValues("title:="& titleOfLOVWindow).GetROProperty("list content")
													If  listContent_Str<>"" Then
																	listContent_Arr=Split(listContent_Str,";")
																	For i=0 to Ubound(listContent_Arr)
																			If instr(Cstr(listContent_Arr(i)),Cstr(passedValue)) > 0 Then
																			If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																					ImagePath=CaptureScreenshot(oracleLOVObject,strStepDescription)
																			End if
																						  OracleListOfValues("title:="& titleOfLOVWindow).Select listContent_Arr(i)
																						  searchFlag=1
																						  Exit for
																			End If
																	Next
																	If searchFlag<>1 Then
																		
																		  status="FAIL"
																		  Flag=1
																		  message="Value not in LOV"
																		   blnObjectError=True
																		  Call ReporterFunction(strLibraryFileName,"SelectFromLOV_Partial","1",stepName,message)
																	Else 
																		  status="DONE"
			
																		  message="[" &  passedValue& "] selected from LOV :"& titleOfLOVWindow
																		  Call ReporterFunction(strLibraryFileName,"SelectFromLOV_Partial","2",stepName,message)
																	End If
												 Else
																	status="FAIL"
																	 Flag=1
																	 message="LOV doesn't have any value"
																	 blnObjectError=True
																	 Call ReporterFunction(strLibraryFileName,"SelectFromLOV_Partial","1",stepName,message)
												 End If
							Else
												 status="FAIL"
												 Flag=1
												 message="Object Not found"
												 blnObjectError=True
												Call ReporterFunction(strLibraryFileName,"SelectFromLOV_Partial","1",stepName,message)
							End if
							If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										Call Error_Recovery ("CloseAllForms")
							End If
                    	
					If Flag =1  Then
							SelectFromLOV_Partial = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(oracleLOVObject,message)
					Else
							SelectFromLOV_Partial = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If

End If
End Function

'************************************************************************************'************************************************************************************

Public Function SelectJavaList(windowLabelOrTitle,frameLabelOrTitle,frameIndex,listLabelOrTagname,listIndex,valueToSelect)
	Dim blnObjectFound :blnObjectFound = False 
	Dim blnObjectError: blnObjectError= False
If Not Environment.Value("blnFatalError") Then
									'startTime=Timer()
									stepName="Select from List"
									inputParameter="<b>Java Window Title :</b>" & windowLabelOrTitle &"<br><b>Frame Label/Title : </b>"& frameLabelOrTitle &"<br><b>List Label/Tagname : </b>"& listLabelOrTagname &"<br><b>Value to Select : </b>"& valueToSelect
									strStepDescription= "Select the value [ " & valueToSelect & " ] from the List [ " & listLabelorTagname & " ]"
									On Error Resume Next
									If JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("label:="& listLabelOrTagname,"index:="& listIndex).Exist(gObjectTimeoutLimit) Then
											Set objOracleList= JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("label:="& listLabelOrTagname,"index:="& listIndex)
											blnObjectFound = True
									ElseIf JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("tagname:="& listLabelOrTagname,"index:="& listIndex).Exist(gObjectTimeoutLimit) Then
											Set objOracleList= JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("tagname:="& listLabelOrTagname,"index:="& listIndex)
											blnObjectFound = True
									ElseIf JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("label:="& listLabelOrTagname,"index:="& listIndex).Exist(gObjectTimeoutLimit) Then
											Set objOracleList= JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("label:="& listLabelOrTagname,"index:="& listIndex)
											blnObjectFound = True
									ElseIf JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("tagname:="& listLabelOrTagname,"index:="& listIndex).Exist(gObjectTimeoutLimit) Then
											Set objOracleList= JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("tagname:="& listLabelOrTagname,"index:="& listIndex)
											blnObjectFound = True
									ElseIf JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("label:="& listLabelOrTagname,"index:="& listIndex).Exist(gObjectTimeoutLimit) Then
											Set objOracleList= JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("label:="& listLabelOrTagname,"index:="& listIndex)
											blnObjectFound = True
									ElseIf JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("tagname:="& listLabelOrTagname,"index:="& listIndex).Exist(gObjectTimeoutLimit) Then
											Set objOracleList= JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("tagname:="& listLabelOrTagname,"index:="& listIndex)
											blnObjectFound = True
									ElseIf JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("label:="& listLabelOrTagname,"index:="& listIndex).Exist(gObjectTimeoutLimit) Then
											Set objOracleList= JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("label:="& listLabelOrTagname,"index:="& listIndex)
											blnObjectFound = True
									ElseIf JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("tagname:="& listLabelOrTagname,"index:="& listIndex).Exist(gObjectTimeoutLimit) Then
											Set objOracleList= JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaList("tagname:="& listLabelOrTagname,"index:="& listIndex)
											blnObjectFound = True

									Else
											status="FAIL"
											Flag=1
											blnObjectError=True
											message="Given Oracle List Box [ " & listLabelOrTagname & " ]  not found"
											Call ReporterFunction(strLibraryFileName,"SelectJavaList","1",stepName,message)
									End if 
									 If blnObjectFound = True Then
														If objOracleList.GetROProperty("enabled") Then
																		If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																			ImagePath=CaptureScreenshot(objOracleList,strStepDescription)
																		End if
																		objOracleList.Select valueToSelect
																		If objOracleList.GetROProperty("selected item")=valueToSelect Then
																				status="DONE"
																				message="[ " & valueToSelect & " ] has been Selected Successfully."
																				Call ReporterFunction(strLibraryFileName,"SelectJavaList","2",stepName,message)
																		Else
																				status="FAIL"
																				Flag=1
																				message="[ " & valueToSelect & " ] is an Invalid Selection."
																				Call ReporterFunction(strLibraryFileName,"SelectJavaList","1",stepName,message)
																		End If
														Else
																		blnObjectError= True
																		status="FAIL"
																		Flag=1
																		message="[ " & listLabelOrTagname & " ] is Disabled."
																		Call ReporterFunction(strLibraryFileName,"SelectJavaList","1",stepName,message)
														End If
									Else
														blnObjectError= True
														status="FAIL"
														Flag=1
														message="[ " & listLabelOrTagname & " ] Not Found"
														Call ReporterFunction(strLibraryFileName,"SelectJavaList","1",stepName,message)
									End If
									 If  blnObjectError  Then
													Environment.Value("blnFatalError")=True
													Call Error_Recovery ("CloseAllForms")
									End If
									
				 	If Flag =1  Then
							SelectJavaList = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objButtonLabelOrDescription,message)
					Else
							SelectJavaList = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
			End If
End Function

'************************************************************************************'************************************************************************************

Public Function EnterJavaText(windowLabelOrTitle,frameLabelOrTitle,frameIndex,textFieldLabelOrTagname,textFieldIndex,valueToEnter) 
    BalloonTooltip.Show "e-Swift Automation","Executing Now : EnterTextForm" 
    If Not Environment.Value("blnFatalError") Then
								   Dim blnObjectError,blnObjectFound

								   blnObjectError=False
								   blnObjectFound = False
									'startTime=timer()
									stepName="Enter Text in Oracle Form "
									strStepDescription="Enter value [ " & valueToEnter & " ] in Form-Text field " & textFieldLabelOrTagname
									inputParameter="<b> Java Window Label/Title:</b>"& windowLabelOrTitle &"<br><b> Frame Label/Title :</b>"& frameLabelOrTitle  &"<br><b> Text Field Label/Tagname :</b>"& textFieldLabelOrTagname &"<br> <b>Value to enter : </b>" & valueToEnter 
									On Error Resume Next
																	If  JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("label:="& textFieldLabelOrTagname,"index:="& textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("label:="& textFieldLabelOrTagname,"index:="& textFieldIndex)
																				blnObjectFound = True 
																	Elseif JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("tagname:="& textFieldLabelOrTagname,"index:="& textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("tagname:="& textFieldLabelOrTagname,"index:="& textFieldIndex)
																				blnObjectFound = True 
																	Elseif JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("label:="& textFieldLabelOrTagname,"index:="& textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("label:="& textFieldLabelOrTagname,"index:="& textFieldIndex)
																				blnObjectFound = True 
																	Elseif JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("tagname:="& textFieldLabelOrTagname,"index:="& textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("tagname:="& textFieldLabelOrTagname,"index:="& textFieldIndex)
																				blnObjectFound = True
																	ElseIf JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("label:="& textFieldLabelOrTagname,"index:="& textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("label:="& textFieldLabelOrTagname,"index:="& textFieldIndex)
																				blnObjectFound = True 
																	Elseif JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("tagname:="& textFieldLabelOrTagname,"index:="& textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("tagname:="& textFieldLabelOrTagname,"index:="& textFieldIndex)
																				blnObjectFound = True 
																	Elseif JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("label:="& textFieldLabelOrTagname,"index:="& textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("label:="& textFieldLabelOrTagname,"index:="& textFieldIndex)
																				blnObjectFound = True 
																	Elseif JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("tagname:="& textFieldLabelOrTagname,"index:="& textFieldIndex).Exist(gObjectTimeoutLimit) Then
																				Set objTextField=JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaEdit("tagname:="& textFieldLabelOrTagname,"index:="& textFieldIndex)
																				blnObjectFound = True

																	Else
																					status="FAIL"
																					Flag=1
                                                                                    blnObjectError=True
																					message="Given Text field [ " & textFieldLabelOrTagname & " ]  not found"
																				   Call ReporterFunction(strLibraryFileName,"EnterJavaText","1",stepName,message)
																    End If
									
									
																	If  blnObjectFound = True  Then 
																					If  objTextField.GetROProperty("editable") Then
																						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																										ImagePath=CaptureScreenshot(objTextField,strStepDescription)
																								End if
																								objTextField.Set valueToEnter
																								strErrorFormName = formShortTitle
																								blnExceptionFlag = Error_Listener ("EnterTextForm",objTextField)
			
																								If  Not blnExceptionFlag Then	
																														status="DONE"
																								
																														message="Value [ " & valueToEnter & "] Entered in Textfield [" & textFieldLabelOrTagname &"]" 
																														Call ReporterFunction(strLibraryFileName,"EnterJavaText","2",stepName,message)
																								Else 
																														
																														status="FAIL"
																														Flag=1
																														message="<br> Unexpected Error Encountered After Entering Text in Form  </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																														Call ReporterFunction(strLibraryFileName,"EnterJavaText","1",stepName,message)
																								End If
																								
																					Else
																								 status="FAIL"
																								Flag=1
																								blnObjectError=True
																								message="[" & textFieldLabelOrTagname  & " ]  text box is non-editable"
																								Call ReporterFunction(strLibraryFileName,"EnterJavaText","1",stepName,message)
																							
																					End If
					
																	End if 
												
									Set objTextField=nothing

									If  blnObjectError  Then
													Environment.Value("blnFatalError")=True
													Call Error_Recovery ("CONTINUE")
									End If

									If Flag =1  Then
										EnterJavaText = message
										blnMainFailFlag = True
										ImagePath=CaptureScreenshot(objTextField,message)
									Else
										EnterJavaText = True
									End If
									If blnDefault_eSwiftReporting Then  
									Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
									End If

	End if 
End Function

'************************************************************************************'************************************************************************************

Public Function SelectJavaCheckBox(windowLabelOrTitle,frameLabelOrTitle,frameIndex,checkboxLabelOrTagname,checkboxIndex,checkBoxOption)
    If Not Environment.Value("blnFatalError") Then
						Dim blnObjectError:	blnObjectError=False
						Dim blnObjExist : blnObjExist=False
					   'startTime=timer()
						stepName="Check/Uncheck Check Box "
						inputParameter="Java Window Title/Label:"& windowLabelOrTitle &"<br>Frame Label/Title : "& frameLabelOrTitle &"<br>Check Box : "& checkboxLabelOrTagname &"<br> Option: " & checkBoxOption 
						strStepDescription= "Select the option [ " & checkBoxOption & " ] in the CheckBox [ " & checkboxLabelOrTagname & " ] in the form [ " & windowLabelOrTitle & " ]"
						On Error Resume Next
						If  JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("label:="& checkboxLabelOrTagname,"index:="& checkboxIndex).Exist(gObjectTimeoutLimit) Then
								   Set objCheckBox=JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("label:="& checkboxLabelOrTagname,"index:="& checkboxIndex)
								   blnObjExist=True
						Elseif JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("tagname:="& checkboxLabelOrTagname,"index:="& checkboxIndex).Exist(gObjectTimeoutLimit) Then
								   Set objCheckBox=JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("tagname:="& checkboxLabelOrTagname,"index:="& checkboxIndex)
								   blnObjExist=True
						Elseif JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("label:="& checkboxLabelOrTagname,"index:="& checkboxIndex).Exist(gObjectTimeoutLimit) Then
								   Set objCheckBox=JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("label:="& checkboxLabelOrTagname,"index:="& checkboxIndex)
								   blnObjExist=True
						Elseif JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("tagname:="& checkboxLabelOrTagname,"index:="& checkboxIndex).Exist(gObjectTimeoutLimit) Then
								   Set objCheckBox=JavaWindow("title:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("tagname:="& checkboxLabelOrTagname,"index:="& checkboxIndex)
								   blnObjExist=True
						ElseIf JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("label:="& checkboxLabelOrTagname,"index:="& checkboxIndex).Exist(gObjectTimeoutLimit) Then
								   Set objCheckBox=JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("label:="& checkboxLabelOrTagname,"index:="& checkboxIndex)
								   blnObjExist=True
						Elseif JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("tagname:="& checkboxLabelOrTagname,"index:="& checkboxIndex).Exist(gObjectTimeoutLimit) Then
								   Set objCheckBox=JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("title:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("tagname:="& checkboxLabelOrTagname,"index:="& checkboxIndex)
								   blnObjExist=True
						Elseif JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("label:="& checkboxLabelOrTagname,"index:="& checkboxIndex).Exist(gObjectTimeoutLimit) Then
								   Set objCheckBox=JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("label:="& checkboxLabelOrTagname,"index:="& checkboxIndex)
								   blnObjExist=True
						Elseif JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("tagname:="& checkboxLabelOrTagname,"index:="& checkboxIndex).Exist(gObjectTimeoutLimit) Then
								   Set objCheckBox=JavaWindow("label:="& windowLabelOrTitle).JavaInternalFrame("label:="& frameLabelOrTitle,"index:="& frameIndex).JavaCheckBox("tagname:="& checkboxLabelOrTagname,"index:="& checkboxIndex)
								   blnObjExist=True

						Else
									    Flag=1
										Status="FAIL"
										message=checkBoxDescriptionorDeveloperName & " : CheckBox not found"
										blnObjectError=True
									Call ReporterFunction(strLibraryFileName,"SelectJavaCheckBox","1",stepName,message)
						End if

									 If blnObjExist Then
									
'                                       							If objCheckBox.GetROProperty("Enabled")  Then
																		If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																									ImagePath=CaptureScreenshot(objCheckBox,strStepDescription)
																								End if
																		If Ucase(checkBoxOption)="ON" Then
																								'if not already selected ,select it
																								objCheckBox.Set checkBoxOption
																								 message="Checkbox [" & checkboxLabelOrTagname &"] selected"
																				
																ElseIf Ucase(checkBoxOption)="OFF" Then
																								'If already selected  clear /uncheck it
																							
																										  objCheckBox.Set checkBoxOption
																											  message="["& checkboxLabelOrTagname & "] CheckBox  unchecked"
																							
																Else
																								status="FAIL"
																								Flag=1
																								message="[ " & checkBoxOption & " ] Invalid Option."
																								'blnObjectError=True
																								Call ReporterFunction(strLibraryFileName,"SelectJavaCheckBox","1",stepName,message)
																End If
'												 End If
																blnExceptionFlag = Error_Listener ("SelectCheckBox",objCheckBox)
																If  Not blnExceptionFlag Then
																								status="DONE"
																							
																								Call ReporterFunction(strLibraryFileName,"SelectJavaCheckBox","2",stepName,message)
																else
																								Flag=1
																								status="FAIL"
																								message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																								Call ReporterFunction(strLibraryFileName,"SelectJavaCheckBox","1",stepName,message)
																								
																End If
								   
									 Else
															 status="FAIL"
															 Flag=1
															message=checkboxLabelOrTagname & " : CheckBox disabled"
															'blnObjectError=True
															Call ReporterFunction(strLibraryFileName,"SelectJavaCheckBox","1",stepName,message)
								  End If

'				   Else
'									status="FAIL"
'									Flag=1
'									message=checkBoxDescriptionorDeveloperName & " : CheckBox not found"
'									blnObjectError=True
'									Call ReporterFunction(strLibraryFileName,"SelectCheckBox","1",stepName,message)
'				  End If
				 Set objCheckBox=Nothing
				'endTime=Timer()
				 'exeTime=FormatNumber(endTime - startTime,3) 
				'Call  UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)


						If Flag =1  Then
							SelectJavaCheckBox = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objCheckBox,message)
						Else
								SelectJavaCheckBox = True
						End If
						If blnDefault_eSwiftReporting Then  
								Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
End If 

End Function




'************************************************************************************'************************************************************************************


Public Function SelectFromOracleTreeTabbedRegion(formShortTitle,tabbedRegionLabel,tabbedRegionIndex,nodeToSelect)
  If Not Environment.Value("blnFatalError") Then
					Dim blnObjectError:   blnObjectError=False
					'startTime=Timer()
					stepName="Enter from Tree"
					strStepDescription= "Select [ " & nodeToSelect & " ] from Oracle tree : " & formShortTitle
					inputParameter="<b>Form Short Title :</b>" & formShortTitle &"<br><b>Label of the Tabbed Region : </b>"&tabbedRegionLabel &"<br><b>Node to Select : </b>"& nodeToSelect
					On Error Resume Next
					Set obj=Description.Create()
					obj("micclass").value="OracleTree"
					Set treeObj=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & tabbedRegionLabel,"index:=" & tabbedRegionIndex).ChildObjects(obj)
					If treeObj.count=1 Then
										If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											ImagePath=CaptureScreenshot(treeObj,strStepDescription)
										End if
										treeObj(0).Select nodeToSelect
										blnExceptionFlag = Error_Listener ("SelectFromOracleTree",treeObj(0))
										If Not blnExceptionFlag Then
													status="DONE"
													message="[ " & nodeToSelect & " ] Tree Node Selected Successfully."
													Call ReporterFunction(strLibraryFileName,"SelectFromOracleTreeTabbedRegion","2",stepName,message)
										Else
													  status="FAIL"
													  Flag=1
													  message="<br> Unexpected Error Encountered while selecting oracle tree </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
													 Call ReporterFunction(strLibraryFileName,"SelectFromOracleTreeTabbedRegion","1",stepName,message)
										End If
					Else
										status="FAIL"
										Flag=1
										message="Tree Object does not Exist."
										   blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"SelectFromOracleTree","1",stepName,message)
					End If
				
					Set obj=nothing
					Set treeObj=nothing
					If  blnObjectError  Then
								Environment.Value("blnFatalError")=True
								Call Error_Recovery ("CloseAllForms")
					End If
						If Flag =1  Then
							SelectFromOracleTreeTabbedRegion = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(treeObj,message)
					Else
							SelectFromOracleTreeTabbedRegion = True
					End If
					If blnDefault_eSwiftReporting Then  
					Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
	End If
End Function
'************************************************************************************'************************************************************************************
Function SelectTabTabbedRegionHierarchy(formShortTitle,topLevelTabbedRegionLabel,topLeveTabbedRegionIndex,tabToSelectLabel,tabToSelectIndex)
		    If Not Environment.Value("blnFatalError") Then
								Dim blnObjectError:blnObjectError=False
								'startTime=Timer()
								stepName="Select Tab Tabbed Region Hierarchy"
								inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& topLevelTabbedRegionLabel  & "<br><b>Index of the Tabbed Region : </b>" & topLeveTabbedRegionIndex 
								strStepDescription= "Select the TabbedRegion [" & tabbedRegionLabel & "]"
								
								On error resume next
           					    If OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & topLevelTabbedRegionLabel,"index:=" & topLeveTabbedRegionIndex).OracleTabbedRegion("label:=" & tabToSelectLabel,"index:=" & tabToSelectIndex).Exist(gObjectTimeoutLimit) Then
												 If OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & topLevelTabbedRegionLabel,"index:=" & topLeveTabbedRegionIndex).OracleTabbedRegion("label:=" & tabToSelectLabel,"index:=" & tabToSelectIndex).GetRoProperty("enabled") Then
															
															Set objOracleTabbedRegion=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & topLevelTabbedRegionLabel,"index:=" & topLeveTabbedRegionIndex).OracleTabbedRegion("label:=" & tabToSelectLabel,"index:=" & tabToSelectIndex)
															 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																							ImagePath=CaptureScreenshot(objOracleTabbedRegion,strStepDescription)
															End if
															OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & topLevelTabbedRegionLabel,"index:=" & topLeveTabbedRegionIndex).OracleTabbedRegion("label:=" & tabToSelectLabel,"index:=" & tabToSelectIndex).Select	
															blnExceptionFlag = Error_Listener ("SelectTabTabbedRegionHierarchy",objOracleTabbedRegion)
															If Not blnExceptionFlag Then
																						 status="DONE"
																						
																						 message=" [ "&tabToSelectLabel &" ] Tabbed Selected"
														   							     Call ReporterFunction(strLibraryFileName,"SelectTabTabbedRegionHierarchy","2",stepName,message)
															Else
																						  status="FAIL"
																						  Flag=1
																						  message="<br> Unexpected Error Encountered After selecting tab </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																						  Call ReporterFunction(strLibraryFileName,"SelectTabTabbedRegionHierarchy","1",stepName,message)
															End If
													
											Else
															status="FAIL"
															Flag=1
															message=" [ "&tabToSelectLabel &" ] Tabbed not enabled"
															blnObjectError=True
															Call ReporterFunction(strLibraryFileName,"SelectTabTabbedRegionHierarchy","1",stepName,message)
											End If


							  Else
											status="FAIL"
											Flag=1
											message="Tabbed Region Object not Found"
											 blnObjectError=True
											Call ReporterFunction(strLibraryFileName,"SelectTabTabbedRegionHierarchy","1",stepName,message)
							End If
							Set objOracleTabbedRegion = Nothing
							'endTime=Timer()
							'ExeTime = FormatNumber(endTime - startTime,3) 
							'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
							If  blnObjectError  Then
											Environment.Value("blnFatalError")=True
											Call Error_Recovery ("CloseAllForms")
							End If
							If Flag =1  Then
									SelectTabTabbedRegion = message
									blnMainFailFlag = True
									ImagePath=CaptureScreenshot(objOracleTabbedRegion,message)
							Else
									SelectTabTabbedRegion = True
							End If
							If blnDefault_eSwiftReporting Then  
									Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
							End If
	End If
End Function
'**************************************************************************************************************************************************
Public Function CaptureTextFieldValueTabbedRegionHierarchy(formShortTitle,topLevelTabbedRegionLabel,topLevelTabbedRegionIndex,lowerLevelTabbedRegionLabel,lowerLevelTabbedRegionIndex,textFieldPromptOrDescription,textFieldIndex)
     If Not Environment.Value("blnFatalError") Then
						Dim blnObjectError
						blnObjectError=False
						'startTime=Timer()
						stepName="Capture Runtime Value from Text Field in Tabbed Region"
						inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel & "<br><b>Prompt Or Description of the TextField : </b>" & textFieldPromptOrDescription & "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b>Index of the Text Field : </b>" & textFieldIndex 
						strStepDescription= "Capture the Value from Text Field [ " & textFieldPromptOrDescription & " ] in the Tabbed Region [ " & tabbedRegionLabel & " ] in the form [ " & formShortTitle & " ]"
						Dim strTextValue,intSetFlag
						intSetFlag=1
						On Error Resume Next
						If formShortTitle<>"" AND topLevelTabbedRegionLabel<>"" AND topLevelTabbedRegionIndex<>""  AND textFieldPromptOrDescription<>""  AND textFieldIndex<>"" Then	'Check Parameters
												If  OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & topLevelTabbedRegionLabel,"index:=" & topLevelTabbedRegionIndex).OracleTabbedRegion("label:=" & lowerLevelTabbedRegionLabel,"index:=" & lowerLevelTabbedRegionIndex).OracleTextField("prompt:=" & textFieldPromptOrDescription,"index:=" &textFieldIndex ).Exist(gObjectTimeoutLimit) Then
															Set objTextFieldPromptOrDescription=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & topLevelTabbedRegionLabel,"index:=" & topLevelTabbedRegionIndex).OracleTabbedRegion("label:=" & lowerLevelTabbedRegionLabel,"index:=" & lowerLevelTabbedRegionIndex).OracleTextField("prompt:=" & textFieldPromptOrDescription,"index:=" &textFieldIndex )
															intSetFlag=0
												ElseIf OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & topLevelTabbedRegionLabel,"index:=" & topLevelTabbedRegionIndex).OracleTabbedRegion("label:=" & lowerLevelTabbedRegionLabel,"index:=" & lowerLevelTabbedRegionIndex).OracleTextField("description:=" & textFieldPromptOrDescription,"index:=" &textFieldIndex ).Exist(gObjectTimeoutLimit) Then
															Set objTextFieldPromptOrDescription=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & topLevelTabbedRegionLabel,"index:=" & topLevelTabbedRegionIndex).OracleTabbedRegion("label:=" & lowerLevelTabbedRegionLabel,"index:=" & lowerLevelTabbedRegionIndex).OracleTextField("description:=" & textFieldPromptOrDescription,"index:=" &textFieldIndex )
															intSetFlag=0
												Else
															status="FAIL"
															Flag=1
															message="Given  Oracle Text Field[ "& textFieldPromptOrDescription & " ] does not Exist."
															blnObjectError=True
															Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValueTabbedRegionHierarchy","1",stepName,message)
												End If
												If  intSetFlag=0 Then
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																							ImagePath=CaptureScreenshot(objTextFieldPromptOrDescription,strStepDescription)
																						End if
														strTextValue =objTextFieldPromptOrDescription.GetROProperty("Value")
														outputParameter= strTextValue
																		blnExceptionFlag = Error_Listener ("CaptureTextFieldValueTabbedRegionHierarchy",objTextFieldPromptOrDescription)
																		If  Not blnExceptionFlag Then
																						status="DONE"
																						message="[ " & textFieldPromptOrDescription & " ] value Captured during run time."
																						Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValueTabbedRegionHierarchy","2",stepName,message)	
																		 else
																						Flag=1
																						status="FAIL"
																						message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																						Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValueTabbedRegion","1",stepName,message)																	
																		  End If
						
												End If
					Else
												status="FAIL"
												Flag=1
												message="Insufficient Data Provided."
												blnObjectError=True
												Call ReporterFunction(strLibraryFileName,"CaptureTextFieldValueTabbedRegionHierarchy","1",stepName,message)
					End If
		  
					'CaptureTextFieldValueTabbedRegion=strTextValue		'Returning the Value
					'outputParameter=strTextValue				'Setting Output Parameter
					'endTime=Timer()
					'ExeTime = FormatNumber(endTime - startTime,3) 
					Set objTextFieldPromptOrDescription=nothing
					'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
					If  blnObjectError  Then
												Environment.Value("blnFatalError")=True
												Call Error_Recovery ("CONTINUE")
					End If

					If Flag =1  Then
							CaptureTextFieldValueTabbedRegionHierarchy = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTextFieldPromptOrDescription,message)
					Else
							CaptureTextFieldValueTabbedRegionHierarchy = strTextValue
					End If
					If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
	End If
End Function

'********************************************************************************************************************************************************
Public Function EnterTextTabbedRegionTableHierarchy (formShortTitle,topLevelTabbedRegionLabel,topLeveltabbedRegionIndex ,lowLevelTabbedRegionLabel,lowLeveltabbedRegionIndex,tableBlockName,dataRowNo,dataColumnName,valueToEnter)
	 If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError:	blnObjectError=False
				'startTime=timer()
				stepName="Entering Data  under  a table column "
				inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br> <b>Block Name of Oracle table:</b> "& tableBlockName & "<br><b> Row Number: </b>" & dataRowNo &"<br> <b>Name of the column : </b>" & dataColumnName &"<br> <b>Value : </b>" & valueToEnter
				strStepDescription= "Enter the value [ " & valueToEnter & " ] in the table [ " & tableBlockName & " ]"
				On error resume next
				If  OracleFormWindow("short title:="& formShortTitle,"index:=1").OracleTabbedRegion("label:="& topLevelTabbedRegionLabel,"index:=" & topLeveltabbedRegionIndex).OracleTabbedRegion("label:="& lowLevelTabbedRegionLabel,"index:=" & lowLeveltabbedRegionIndex).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit)Then
                                                Set objTable = OracleFormWindow("short title:="& formShortTitle,"index:=1").OracleTabbedRegion("label:="& topLevelTabbedRegionLabel,"index:=" & topLeveltabbedRegionIndex).OracleTabbedRegion("label:="& lowLevelTabbedRegionLabel,"index:=" & lowLeveltabbedRegionIndex).OracleTable("block name:="& tableBlockName)
                                                If objTable.IsFieldEditable(dataRowNo,dataColumnName) or  objTable.getROproperty("enabled") Then
													If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																									ImagePath=CaptureScreenshot(objTable,strStepDescription)
																						  End if
																	  objTable.EnterField dataRowNo,dataColumnName,valueToEnter
                                                                      blnExceptionFlag = Error_Listener ("EnterTextTabbedRegionTableHierarchy",objTable)
																	  If  not blnExceptionFlag Then
																						  status="DONE"
																						  
																						  message="["& valueToEnter & "] entered Under  the "& dataColumnName &" Table Column "
																						  Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegionTableHierarchy","2",stepName,message)
																	 Else
																						  status="FAIL"
																						  Flag=1
																						  blnObjectError=True  '// added
																						  message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																						  Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegionTableHierarchy","1",stepName,message)
																	End If
'																	If  Ucase(objTable.GetFieldValue(dataRowNo,dataColumnName)) = Ucase(valueToEnter)Then
'																						  blnExceptionFlag = Error_Listener ("EnterTextTabbedRegionTable",objTable)
'																						  If  not blnExceptionFlag Then
'																											  status="DONE"
'																											  message=valueToEnter & ":  entered Under  the "& dataColumnName &" Table Column "
'																											  Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegionTable","2",stepName,message)
'																						 Else
'																											  status="FAIL"
'																											  Flag=1
'																											  blnObjectError=True  '// added
'																											  message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
'																											  Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegionTable","1",stepName,message)
'																						  End If
'																	End If


										Else
																		Flag=1
																		status="FAIL"
																		 blnObjectError=True  '// added
																		message="[ " & dataColumnName & " ]: Table Column Field  is Not Editable"
																	   Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegionTableHierarchy","1",stepName,message)
										End If
			Else
																		Flag=1
																		status="FAIL"
																		 blnObjectError=True  '// added
																		message="[ " & dataColumnName & " ]: Not Found "
														
			End If
          	'endTime=timer()
        	'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
			If  blnObjectError  Then
						Environment.Value("blnFatalError")=True
						Call Error_Recovery ("CloseAllForms")
			End If
				
				Set objTable=nothing                   ' Added

				If Flag =1  Then
							EnterTextTabbedRegionTable = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTable,message)
			Else
							EnterTextTabbedRegionTable = True
			End If
			If blnDefault_eSwiftReporting Then  
			Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
			End If
End if 
End Function

'****************************************************************************************
Function ValidateTextFieldTabbedRegionHierarchy(formShortTitle,topLevelTabbedRegionLabel,topLevelTabbedRegionIndex,lowLevelTabbedRegionLabel,lowLevelTabbedRegionIndex,textFieldPromptOrDescriptionOrDeveloperName,ExpectedData)
 If Not Environment.Value("blnFatalError") Then
			    Dim blnObjectError,sActualValue
			    blnObjectError=False
				sActualValue =""
				stepName="Validate  Expected Vs Actual Value in Tabbed Text Field"
				inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& topLevelTabbedRegionLabel & "<br><b>Index of the Tabbed Region : </b>" & topLevelTabbedRegionIndex &"<br><b>Prompt Or Description of the TextField : </b>" & textFieldPromptOrDescriptionOrDeveloperName & "<br><b>Expected Data : </b>" & ExpectedData & "<br><b>Case Sensitive : </b>" & CaseSensitive
				strStepDescription= "Validate the text [ " & ExpectedData & " ] in the text field [ " & textFieldPromptOrDescriptionOrDeveloperName & " ] in the tabbed region [ " & tabbedRegionLabel & " ]" 
				If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& topLevelTabbedRegionLabel,"index:=" & topLevelTabbedRegionIndex).OracleTabbedRegion("label:="& lowLevelTabbedRegionLabel,"index:=" & lowLevelTabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescriptionOrDeveloperName).Exist(gObjectTimeoutLimit) Then
													Set objText= OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& topLevelTabbedRegionLabel,"index:=" & topLevelTabbedRegionIndex).OracleTabbedRegion("label:="& lowLevelTabbedRegionLabel,"index:=" & lowLevelTabbedRegionIndex).OracleTextField("description:="& textFieldPromptOrDescriptionOrDeveloperName)
				ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& topLevelTabbedRegionLabel,"index:=" & topLevelTabbedRegionIndex).OracleTabbedRegion("label:="& lowLevelTabbedRegionLabel,"index:=" & lowLevelTabbedRegionIndex).OracleTextField("developer name:="& textFieldPromptOrDescriptionOrDeveloperName).Exist(gObjectTimeoutLimit)    Then
													Set objText= OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& topLevelTabbedRegionLabel,"index:=" & topLevelTabbedRegionIndex).OracleTabbedRegion("label:="& lowLevelTabbedRegionLabel,"index:=" & lowLevelTabbedRegionIndex).OracleTextField("developer name:="& textFieldPromptOrDescriptionOrDeveloperName)
										            
				Else
													Call ReporterFunction(strLibraryFileName,"ValidateTextFieldTabbedRegionHierarchy","1","TextField ", " Text  Field  Not Found")
													status="FAIL"
													Flag=1
													message="Given  Text Field object Not Found"
													ValidateTextFieldTabbedRegionHierarchy = FALSE
				End if 								 
				If  Flag <>1 Then
												If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																														ImagePath=CaptureScreenshot(objText,strStepDescription)
														End if
													sActualValue = objText.GetROProperty("value")
													If  instr(Ucase(sActualValue), Ucase(ExpectedData) ) Then
																											Call ReporterFunction(strLibraryFileName,"ValidateTextFieldTabbedRegion","2","TextField ",ExpectedData &  ": has been successfully Validated in the "& textFieldPromptOrDescription &"Text  field")
																											status="PASS"
																											
																											message="Expected Data  [ "&  ExpectedData  & " ]  Matches with Actual  Value  [ " & sActualValue & " ] "
																											blnCaptureFlag =  True
													Else
																											Call ReporterFunction(strLibraryFileName,"ValidateTextFieldTabbedRegion","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
																											status="FAIL"
																											Flag=1
																											message= " Expected Data  [ " & ExpectedData  &" ] NOT  Matching with  Actual Value  [  " & sActualValue &" ] "
																											
													End If
				End If

			
				If Flag =1  Then
												ValidateTextFieldTabbedRegionHierarchy = message
												blnMainFailFlag = True
												ImagePath=CaptureScreenshot(objText,message)
				Else
												ValidateTextFieldTabbedRegionHierarchy = True
				End If
				
				If  blnObjectError  Then
												Environment.Value("blnFatalError")=True
												Call Error_Recovery ("CloseAllForms")
				End If
				
				If blnDefault_eSwiftReporting Then  
												Call UpdateResultHtml (stepName,inputParameter,message,status,sActualValue)
				End If
End If
End Function
'*********************************************************************************************************************************************************
Public Function ClickButtonWithFormIndex(formShortTitle,formIndex,buttonDescriptionOrLabelOrDeveloperName)
If Not Environment.Value("blnFatalError") Then
'		Dim blnObjectError
		blnObjectError=False
		startTime=Timer()
		stepName="Click Button"
		inputParameter="<b>Short Title of the Form : </b>" & formShortTitle & "<br><b>Button Description/Label : </b>" & buttonDescriptionOrLabelOrDeveloperName
		strStepDescription= "Click the button [" & buttonDescriptionOrLabelOrDeveloperName & "]"
		On Error Resume Next
		Dim objButton,intSetFlag
		intSetFlag=1

		If OracleFormWindow("short title:="& formShortTitle,"index:="&formIndex).OracleButton("description:="& buttonDescriptionOrLabelOrDeveloperName).Exist(gObjectTimeoutLimit) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle,"index:="&formIndex).OracleButton("description:="& buttonDescriptionOrLabelOrDeveloperName)
				intSetFlag=0
		ElseIf OracleFormWindow("short title:="& formShortTitle,"index:="&formIndex).OracleButton("label:="& buttonDescriptionOrLabelOrDeveloperName).Exist(gObjectTimeoutLimit) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle,"index:="&formIndex).OracleButton("label:="& buttonDescriptionOrLabelOrDeveloperName)
				intSetFlag=0
		ElseIf OracleFormWindow("short title:="& formShortTitle,"index:="&formIndex).OracleButton("developer name:="& buttonDescriptionOrLabelOrDeveloperName).Exist(gObjectTimeoutLimit) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle,"index:="&formIndex).OracleButton("developer name:="& buttonDescriptionOrLabelOrDeveloperName)
				intSetFlag=0
		Else
				status="FAIL"
				Flag=1
				message="[ " & buttonDescriptionOrLabelOrDeveloperName &"] Button does not Exist."
				blnObjectError=True
				Call ReporterFunction(strLibraryFileName,"ClickButtonWithFormIndex","1",stepName,message)
		End If

		If intSetFlag=0 Then
				If objButton.GetROProperty("enabled") Then
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											ImagePath=CaptureScreenshot(objButton,strStepDescription)
										End if  
							objButton.Click
							If blnIgnoreError = False  Then
										blnExceptionFlag = Error_Listener ("ClickButtonWithFormIndex",objButton)
							else
										blnExceptionFlag= False
										blnIgnoreError = False
							End If
							If  Not blnExceptionFlag Then
										status="DONE"
										message="[ " & buttonDescriptionOrLabelOrDeveloperName &"] Button clicked Successfully."
										Call ReporterFunction(strLibraryFileName,"ClickButton","2",stepName,message)
									 
							else
										Flag=1
										status="FAIL"
										message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
										Call ReporterFunction(strLibraryFileName,"ClickButtonWithFormIndex","1",stepName,message) 
							End If     
				Else
							status="FAIL"
							Flag=1
							message="[ " & buttonDescriptionOrLabelOrDeveloperName &"] Button is Disabled."
							blnObjectError=True
							  Call ReporterFunction(strLibraryFileName,"ClickButtonWithFormIndex","1",stepName,message)
				End If
		End If 
		Set objButton=Nothing
		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)
		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

		If  blnObjectError  Then
				Environment.Value("blnFatalError")=True
				Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
							ClickButton = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objButton,message)
			Else
							ClickButton = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
End if 
End Function
'*******************************************************************************************************************************************************************************
Function InsertIntoDatabaseTable(serverName,port,serviceName,userID,password,insertQuery)
    On Error Resume Next
    stepName="Insert Value into Database Table"
    inputParameter="<b>Server Name : </b>"& serverName &"<br><b>Port : </b>"& port & "<br><b>Service Name : </b>" & serviceName
    Dim connectionString: connectionString = "DRIVER={Microsoft ODBC for Oracle}; SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST="&serverName&")(PORT="&port&"))(CONNECT_DATA=(SERVICE_NAME="&serviceName&")));Uid="&userID&";Pwd="&password&";"
    Dim connection : Set connection = CreateObject("ADODB.Connection")
    connection.Open connectionString
    Dim ErrorFlag : ErrorFlag="False"
    Dim InsertRecord: Set InsertRecord = CreateObject("ADODB.Recordset") 
    InsertRecord.CursorType = 3
    InsertRecord.Open insertQuery,connection
    If Err.Number <> 0  Then
        message="An error has occured : "&Err.Description
        Err.Clear
        status="FAIL"
        Flag=1
        Call ReporterFunction("e-Swift_FunctionLibrary","CaptureDatabaseTableValue","1",stepName,message)
            If Flag =1  Then
                                        CaptureDatabaseTableValue = message
                                        blnMainFailFlag = True
                                    '    ImagePath=CaptureScreenshot(objText,message)
                End If
        		If blnDefault_eSwiftReporting Then  
                                        Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
                End If
        connection.Close
        Set InsertRecord = Nothing
        Set connection = Nothing
        Exit Function
    End If
				message="Record Inserted"
		        status="PASS"   
                If blnDefault_eSwiftReporting Then  
                                        Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
                End If
            connection.Close
            Set QueryResultSet = Nothing
            Set connection = Nothing
            Exit Function
    If Flag =1  Then
                                        CaptureDatabaseTableValue = message
                                        blnMainFailFlag = True
                                    '    ImagePath=CaptureScreenshot(objText,message)
                Else
                                        CaptureDatabaseTableValue = True
                End If

'    If  mismatchCount <> 0 Then
'        message = "One or more Record(s) mismatched with the Expected Data : "&ExpectedData
'        status="FAIL"
'        Flag=1
'    Else
''        message = "All the Record(s) in the column "&tableColumn &" matched successfully with the Expected Data : "&ExpectedData
''        status="DONE"
''    End If
'
'    Call ReporterFunction("e-Swift_FunctionLibrary","ValidateDatabaseTableValue","1",stepName,message)
 
    If blnDefault_eSwiftReporting Then  
                                        Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
                End If
    connection.Close
    Set QueryResultSet = Nothing
    Set connection = Nothing
End Function
'*********************************************************************************************************************************
Function ValidateTableFieldValueTabbedRegionHierarchy(formShortTitle,topLevelTabbedRegionLabel,topLeveltabbedRegionIndex ,lowLevelTabbedRegionLabel,lowLeveltabbedRegionIndex,tableBlockName,dataRowNo,dataColumnName,ExpectedData)
	If Not Environment.Value("blnFatalError") Then
		Dim blnObjectError
		blnObjectError=False
		startTime=Timer()
		stepName="Validate  Runtime Value from Table Field in Tabbed Region table"
		inputParameter = "<b>Short Title of the Form : </b>" & formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br><b> Block Name of the Oracle table : </b> " & tableBlockName  & "<br><b> Row Number : </b>" & dataRowNo & "<br><b>Name of the column : </b>" & dataColumnName & "<br><b>Expected Data : </b>" & ExpectedData
		Dim strTableFieldValue
		On Error Resume Next   
		If formShortTitle<>"" AND topLevelTabbedRegionLabel<>"" AND topLeveltabbedRegionIndex<>""  AND lowLevelTabbedRegionLabel<>"" AND lowLeveltabbedRegionIndex<>"" and  tableBlockName<>""  AND dataRowNo<>"" AND dataColumnName<>""  Then
			Set objOracleTable=OracleFormWindow("short title:="& formShortTitle,"index:=1").OracleTabbedRegion("label:="& topLevelTabbedRegionLabel,"index:=" & topLeveltabbedRegionIndex).OracleTabbedRegion("label:="& lowLevelTabbedRegionLabel,"index:=" & lowLeveltabbedRegionIndex).OracleTable("block name:="& tableBlockName)
			If objOracleTable.Exist(2) Then 
                strTableFieldValue =objOracleTable.GetFieldValue (dataRowNo,dataColumnName)
                blnExceptionFlag = Error_Listener ("CaptureTextWebElement",objOracleTable)																														'// end
                If Not blnExceptionFlag Then
					If  strTableFieldValue = ExpectedData Then
						status="DONE"
						message="Field data is same as expected data which is: " & strTableFieldValue
						Call ReporterFunction(strLibraryFileName,"ValidateTableFieldValueTabbedRegion","2",stepName,message)		
					Else
						status="FAIL"
						Flag=1
						message="Field data is different from the expected data. Field data: " & strTableFieldValue & "Expected data: " & ExpectedData
						Call ReporterFunction(strLibraryFileName,"ValidateTableFieldValueTabbedRegion","1",stepName,message)
					End If
				Else
					status="FAIL"
					Flag=1
					message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
					Call ReporterFunction(strLibraryFileName,"ValidateTableFieldValueTabbedRegion","1",stepName,message)
                End If
            Else
				status="FAIL"
				Flag=1
				message="Oracle Table does not Exist."
				Call ReporterFunction(strLibraryFileName,"ValidateTableFieldValueTabbedRegion","1",stepName,message)
			End If
        Else
			status="FAIL"
			Flag=1
			message="Insufficient Data Provided."
			Call ReporterFunction(strLibraryFileName,"ValidateTableFieldValueTabbedRegion","1",stepName,message)
		End If
		 
			'ValidateTableFieldValueTabbedRegion=strTableFieldValue		'Returning the Value
			'outputParameter=strTableFieldValue		  'Setting Output Parameter
		Set objOracleTable=Nothing		                  
'		endTime=Timer()
'		ExeTime = FormatNumber(endTime - startTime,3) 
'        Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
                         If  blnObjectError  Then 
                                Environment.Value("blnFatalError")=True 
                                Call Error_Recovery ("CloseAllForms") 
                        End If 

						If Flag =1  Then
							CaptureTextTabListValue = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
						Else
							CaptureTableCellDataOfSameRowBasedOnAnotherCell = strFieldValue
						End If
						If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If

	End If	
End Function
'************************************************************************************************************************************
Public Function VerifyTableAllColumnValue(formShortTitle,tableBlockName,dataColumnName)
   If Not Environment.Value("blnFatalError") Then
                        Dim blnObjectError:blnObjectError=False
                        Dim temp
                        Dim Flag:Flag=0
                        'startTime=timer()
                        stepName="Verify Values from Table Column "
                        inputParameter="<b> Form: </b>"& formShortTitle &"<br> <b>Table: </b>"& tableBlockName &"<br><b>Column :</b>"& dataColumnName
                        strStepDescription= "Verify Text from table [ " & tableBlockName & " ] and Column Name [ " & dataColumnName & " ]"
                        On Error resume next
                        If formShortTitle<>" " and tableBlockName<>"" and dataColumnName<> ""  Then
                                        Set  objOracleTable=OracleFormWindow("short title:="& formShortTitle).OracleTable("block name:="& tableBlockName)
                                        If objOracleTable.Exist(gObjectTimeoutLimit)  Then
                                             If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
                                                    ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
                                             End if
                                                    TotalRow= objOracleTable.GetROProperty("total rows")
                                                    For i = 1 To TotalRow Step 1
                                                        strTemp=objOracleTable.GetFieldValue(i,dataColumnName)
                                                        If strTemp= "Success" or strTemp= "Warning" Then
                                                            wait 1
                                                        Else 
                                                            Exit for
                                                            Flag = 1
                                                        End If
                                                    Next                                                    
                                                        
                                                        outputParameter= strTemp
                                                        blnExceptionFlag = Error_Listener ("VerifyTableAllColumnValue",objOracleTable)
                                                        If Not blnExceptionFlag and Flag=0 Then
                                                                                 status="DONE"                                                                                 
                                                                                
                                                                                 message="[ " & dataColumnName & " ] values are verified  "
                                                                                 Call ReporterFunction(strLibraryFileName,"VerifyTableAllColumnValue","2",stepName,message)
                                                        Else
                                                                                status="FAIL"
                                                                                Flag=1
                                                                                message="<br> Unexpected Error Encountered while fetching the Run Time Data</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
                                                                                Call ReporterFunction(strLibraryFileName,"VerifyTableAllColumnValue","1",stepName,message)
                                                        End If
                        
                                        Else 
                                                        status="FAIL"
                                                        Flag=1
                                                        message="Table not found"
                                                        blnObjectError=True
                                                        Call ReporterFunction(strLibraryFileName,"VerifyTableAllColumnValue","1",stepName,message)
                                        End If
                                  
                    Else 
                                        status="FAIL"
                                        Flag=1
                                        message="One or More Missing parameters"
                                        blnObjectError=True
                                        Call ReporterFunction(strLibraryFileName,"VerifyTableAllColumnValue","1",stepName,message)
         
                    End If
                    Set objOracleTable=Nothing
                    'CaptureTextTable=strTemp
                    'outputParameter=strTemp
                    'endTime=timer()
                    'exeTime=FormatNumber(endTime - startTime,3) 
                    'Call  UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
                    If  blnObjectError  Then
                                        Environment.Value("blnFatalError")=True
                                        Call Error_Recovery ("CONTINUE")
                    End If

                    If Flag =1  Then
                            VerifyTableAllColumnValue = message
                            blnMainFailFlag = True
                            ImagePath=CaptureScreenshot(objOracleTable,message)
                    Else
                            VerifyTableAllColumnValue = strTemp
                    End If
                    If blnDefault_eSwiftReporting Then  
                            Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
                    End If

    End if
End Function
'**********************************************************************************************************************************************
Public Function SelectMenuQueryNoData(formShortTitle,menuPath)
   If Not Environment.Value("blnFatalError") Then
                Dim blnObjectError:   blnObjectError=False
                inputParameter="<b>Short Title of the Form : </b>"& formShortTitle &"<br><b>Menu Path : </b>"& menuPath
                strStepDescription= "Select from Menu [" & menuPath & "]"
                On error resume next
                If  OracleFormWindow("short title:="& formShortTitle).Exist(gObjectTimeoutLimit) Then 
                                        If OracleFormWindow("short title:="& formShortTitle).GetROProperty("enabled") Then
                                                        set objAppObj = OracleFormWindow("short title:="& formShortTitle)
                                                        OracleFormWindow("short title:="& formShortTitle,"index:=1").SelectMenu menuPath 'Performing Navigation
                                                        Select Case menuPath
                                                                            Case "File->Save"                  
                                                                                            otherFlag=1
                                                                                            selectFlag=1
                                                                            Case "View->Query By Example->Enter"        
                                                                                            otherFlag=1
                                                                                            selectFlag=2
                                                                            Case "View->Query By Example->Run"      
                                                                                            otherFlag=1
                                                                                            selectFlag=3
                            
                                                                            Case Else                  
                                                                                            otherFlag=0 
                                                        End Select
                                        End if 
                ElseIf OracleNavigator("short title:=Navigator").GetROProperty("enabled") Then
                                        set objAppObj = OracleNavigator("short title:=Navigator")
                                        OracleNavigator("short title:=Navigator").SelectMenu menuPath  'Selecting from Navigator Page Menu
                                        If  Err.Number=0 Then
                                                                stepName="Select from Navigator Menu"
                                                                message="[ " & menuPath & " ] menu selection  done  Successfully"
                                                                status="PASS"
                                                                Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
                                        Else
                                                                stepName="Select from Menu"
                                                                message="Could Not Select the Menu path ' " & menuPath &" ' . Reason:="& Err.Description
                                                                Flag=1
                                                                status="FAIL"
                                                                blnObjectError=True
                                                                Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
                                        End If   
              Else
                                        stepName="Select from Navigator Menu"
                                        message="Oracle Navigator/Form not Found / Disabled."
                                        Flag=1
                                        status="FAIL"
                                        blnObjectError=True
                                        Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
            End If
            If  otherFlag=1Then  
                                        If selectFlag=1Then  'Validation for Saving
                                                             If  Instr(1,OracleStatusLine("index:=0").GetROProperty("message"),"Transaction complete")<>0  Then''''''''''''
                                                                               stepName="Save Transaction"
                                                                               message="Transaction Saved"
                                                                               status="DONE"
                                                                               Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
                                                             elseIf Instr(1,OracleStatusLine("index:=0").GetROProperty("message"),"transaction(s) completed")<>0  Then''''''''''''
                                                                               stepName="Save Transaction"
                                                                               message="Transaction Saved"
                                                                               status="DONE"
                                                                               Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
                                                             elseIf Instr(1,OracleStatusLine("index:=0").GetROProperty("message"),"No changes")<>0  Then''''''''''
                                                                               stepName="Save Transaction"
                                                                               message="Transaction  Saved"
                                                                               status="DONE"
                                                                               Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
                                                             elseIf OracleNotification("title:=Error").Exist(1) Then 
                                                                                If Instr(1,OracleNotification("title:=Error").GetROProperty("message"),"APP-AR-11526") then
                                                                                               stepName="Save Transaction"
                                                                                               message="Transaction Saved"
                                                                                               status="DONE"
                                                                                               Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
                                                                                End if 
                                                             elseIf OracleNotification("title:=Note").Exist(gObjectTimeoutLimit) then
                                                                               stepName="Save Transaction"
                                                                               message="Note found"
                                                                               status="DONE"
                                                                               Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
                                                            elseIf OracleNotification("title:=Caution").Exist(gObjectTimeoutLimit) then
                                                                                stepName="Save Transaction"
                                                                                message="Caution Window found "
                                                                                status="DONE"
                                                                                Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
                                                            elseIf OracleFormWindow("short title:=Choose an option").Exist(gObjectTimeoutLimit) then
                                                                               stepName="Save Transaction"
                                                                               message="Option window found"
                                                                               status="DONE"
                                                                               Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
                                                             elseIf OracleFormWindow("short title:=Enter Reason for.....").Exist then
                                                                               stepName="Save Transaction"
                                                                               message="Transaction Saved"
                                                                               status="DONE"
                                                                               Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
                                                            Else 
                                                                                stepName="Save Transaction"
                                                                                message="Fail to save "
                                                                                Flag=1
                                                                                status="FAIL"
                                                                                blnObjectError=True
                                                                                Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
                                                             End If  
                                     End If
  
                                      If selectFlag=2Then  'Validation for Enter Query
                                                             If  OracleStatusLine("message:=Enter a query;  .*").Exist(1) Then
                                                                                        stepName="Enter Query "
                                                                                        message="Query(F11) "
                                                                                        status="DONE"
                                                                                        Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
                                                            Else
                                                                                        stepName="Enter Query "
                                                                                        message="Fail to Query "
                                                                                        Flag=1
                                                                                        status="FAIL"
                                                                                        blnObjectError=True
                                                                                        Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
                                                            End If
                                     End If
    
                                     If selectFlag=3Then  'Validation for Execute Query
                                                          If  OracleStatusLine("message:=.*Query caused no records to be retrieved.*").Exist(1) or OracleStatusLine("message:=.*No changes to save.") Then
                                                                                       stepName="Execute Query"
                                                                                       message="ReQuery(Ctrl+F11)  "
                                                                                       status="DONE"
                                                                                       Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
                                                         Else
                                                                                      If blnIgnoreValidation Then
                                                                                                      stepName="Execute Query"
                                                                                                      message=" No Data retrieved"
                                                                                                      status="DONE"
                                                                                                      Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
                                                                                                      blnIgnoreValidation = False
                                                                                         else
                                                                                                      stepName="Execute Query"
                                                                                                      message="No data retrieved "
                                                                                                      Flag=1
                                                                                                      status="FAIL"
                                                                                                      Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
                                                                                     End If
                                                         End If
                                      End If
    End If
    If  otherFlag=0Then 'Validation for Others
                                      If  Err.Number=0  Then
                                                              stepName="Select from Menu"
                                                              message="[ " & menuPath & "] was selected from menu path  successfully"
                                                              status="DONE"
                                                              Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
                                      Else
                                                              stepName="Select from Menu"
                                                              message="Invalid Menu path ' " & menuPath &"' Reason:=" & Err.Description
                                                              Flag=1
                                                              status="FAIL"
                                                              blnObjectError=True
                                                              Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
                                      End If
    End If

    If status = "PASS" or status = "DONE"  Then
                                    If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
                                                                ImagePath=CaptureScreenshot(objAppObj,strStepDescription)
                                    End if
    End If


    If  blnObjectError  Then
                                    Environment.Value("blnFatalError")=True
                                    Call Error_Recovery ("CloseAllForms")
     End If

    If Flag =1  Then
                                    SelectMenu = message
                                    blnMainFailFlag = True
                                    ImagePath=CaptureScreenshot(stepName,message)
    Else
                                    SelectMenu = True
    End If

    If blnDefault_eSwiftReporting Then  
                                    Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
    End If

End if
End Function
'********************************************************************************************************************************************************
Function CaptureTableFieldValueTabbedRegionHierarchy(formShortTitle,topLeveltabbedRegionLabel,topLeveltabbedRegionIndex,lowLeveltabbedRegionLabel,lowLeveltabbedRegionIndex,tableBlockName,dataRowNo,dataColumnName)
  If Not Environment.Value("blnFatalError") Then
					Dim blnObjectError,strTableFieldValue
					blnObjectError=False
					stepName="Capture Runtime Value from Table Field in Tabbed Region"
					inputParameter = "<b>Short Title of the Form : </b>" & formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& topLeveltabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & lowLeveltabbedRegionIndex & "<br><b> Block Name of the Oracle table : </b> " & tableBlockName  & "<br><b> Row Number : </b>" & dataRowNo & "<br><b>Name of the column : </b>" & dataColumnName
					strStepDescription= "Capture Value from table [ " & tableBlockName & " ] at Row Number [ " & dataRowNo & " ] and Column Name [ " & dataColumnName & " ] on window [" & formShortTitle & "]"
					On Error Resume Next   
					 Set objOracleTable=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & topLeveltabbedRegionLabel,"index:=" & topLeveltabbedRegionIndex).OracleTabbedRegion("label:=" & lowLeveltabbedRegionLabel,"index:=" & lowLeveltabbedRegionIndex).OracleTable("block name:=" & tableBlockName)
					If objOracleTable.Exist(gObjectTimeoutLimit) Then 
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																						ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
																		End if
											strTableFieldValue =objOracleTable.GetFieldValue (dataRowNo,dataColumnName)
											outputParameter= strTableFieldValue		
											blnExceptionFlag = Error_Listener ("CaptureTableFieldValueTabbedRegionHierarchy",objOracleTable)																														'// end
											If Not blnExceptionFlag Then
																		status="DONE"																		
																		
																		message="[ " & strTableFieldValue & " ] value Captured during run time."
																		Call ReporterFunction("eSwift_FunctionLibrary","CaptureTableFieldValueTabbedRegionHierarchy","2",stepName,message)		
											Else
																	    status="FAIL"
																		Flag=1
																		message="<br> Unexpected Error Encountered while fetching the Run Time Data   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																		Call ReporterFunction(strLibraryFileName,"CaptureTableFieldValueTabbedRegionHierarchy","1",stepName,message)
											End If
					Else
											status="FAIL"
											Flag=1
											message="Oracle Table " &  tableBlockName & "does not Exist.Unable to get data from Column " & dataColumnName
											Call ReporterFunction("eSwift_FunctionLibrary","CaptureTableFieldValueTabbedRegionHierarchy","1",stepName,message)
					End If
					CaptureTableFieldValueTabbedRegion=strTableFieldValue		'Returning the Value
					outputParameter=strTableFieldValue		  'Setting Output Parameter
					If Flag =1  Then
											CaptureTableFieldValueTabbedRegionHierarchy = message
											blnMainFailFlag = True
											ImagePath=CaptureScreenshot(objOracleTable,strStepDescription)
					Else
											CaptureTableFieldValueTabbedRegionHierarchy = strTableFieldValue
					End If
					If blnDefault_eSwiftReporting Then  
											Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If	
					Set objOracleTable=Nothing		                  
	End If	
End Function
'********************************************************************************************************
Function RunWorkflowBackgroudProcess()
	If Not Environment.Value("blnFatalError") Then
	startTime=Timer()
	stepName="Run Workflow Backgroud Process"
	inputParameter=" "
	On Error Resume Next
	OracleNavigator("short title:=Navigator").SelectMenu("File->Switch Responsibility...")
	OracleListOfValues("title:=Responsibilities").Select("System Administrator")
	wait(2)
	OracleNavigator("short title:=Navigator").SelectMenu("View->Requests")
	OracleFormWindow("short title:=Find Requests").OracleButton("label:=Submit a New Request...").Click
	OracleFormWindow("short title:=Submit a New Request").OracleButton("label:=OK").Click
	OracleFormWindow("short title:=Submit Request").OracleTextField("description:=Name").Enter ("Workflow Background Process")
	wait(3)
	OracleFlexWindow("title:=Parameters").OracleTextField("prompt:=Process Deferred").Enter "Yes"
	OracleFlexWindow("title:=Parameters").OracleTextField("prompt:=Process Timeout").Enter "No"
	OracleFlexWindow("title:=Parameters").Approve
	wait(3)
	OracleFormWindow("short title:=Submit Request").OracleButton("label:=Submit").Click	
	wait(2)
	strValueMessage = OracleNotification("title:=Decision").GetROProperty("message")
	processFlag=ExtractNumberFromString (strValueMessage,aReturnArray)
	backgroundRequestNo=ConvertArrayToString (aReturnArray)
	OracleNotification("title:=Decision").OracleButton("label:=No").Click	
	OracleFormWindow("short title:=Find Requests").OracleRadioGroup("developer name:=JOBS_QF_WHICH_JOBS").Select "Specific Requests"
	OracleFormWindow("short title:=Find Requests").OracleTextField("description:=Request ID").Enter backgroundRequestNo
	OracleFormWindow("short title:=Find Requests").OracleButton("label:=Find").Click
	Do
			Wait(1)
			OracleFormWindow("short title:=Requests").OracleButton("description:=Refresh Data").Click
			Loop Until (OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,"Phase") = "Completed")
	requestName	= OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,"Name")
	requestPhase =  OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,"Phase")
	requestStatus = OracleFormWindow("short title:=Requests").OracleTable("block name:=JOBS").GetFieldValue(1,"Status")
	If requestStatus="Normal" or requestStatus="Warning"Then
		status="DONE"
		message= "Workflow Background Process Completed Successfully."
		Call ReporterFunction(strLibraryFileName,"RunWorkflowBackgroudProcess","2",stepName,message)
	Else 				  
		status="FAIL"
		Flag=1
		message= "Error occured during Execution."
		Call ReporterFunction(strLibraryFileName,"RunWorkflowBackgroudProcess","1",stepName,message)
	End If
	endTime = Timer()
	ExeTime = FormatNumber(endTime - startTime,3)
	Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
	OracleFormWindow("short title:=Requests").CloseWindow
	'Call RunProcessToChangeStatus(expectedStatus,maxTimeOut,rowNumber)
End If
End Function
'******************************************************************************************************************************************************
Function ValidateRecordNotInDB(serverName,port,serviceName,userID,password,SQLQuery)
    On Error Resume Next
    stepName="Validate Record not present in DB"
    inputParameter="<b>Server Name : </b>"& serverName &"<br><b>Port : </b>"& port & "<br><b>Service Name : </b>" & serviceName & "<br><b>Table Column : </b>" & tableColumn
    Dim connectionString: connectionString = "DRIVER={Microsoft ODBC for Oracle}; SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST="&serverName&")(PORT="&port&"))(CONNECT_DATA=(SERVICE_NAME="&serviceName&")));Uid="&userID&";Pwd="&password&";"
    Dim connection : Set connection = CreateObject("ADODB.Connection")
    Dim ErrorFlag : ErrorFlag="False"
    Dim QueryResultSet: Set QueryResultSet = CreateObject("ADODB.Recordset") 
    QueryResultSet.CursorType = 3
    QueryResultSet.open SQLQuery,connectionString

    If Err.Number <> 0  Then
        message="An error has occured : "&Err.Description
        Err.Clear
        status="FAIL"
        Flag=1
        Call ReporterFunction("e-Swift_FunctionLibrary","CaptureDatabaseTableValue","1",stepName,message)
            If Flag =1  Then
                                        CaptureDatabaseTableValue = message
                                        blnMainFailFlag = True
                                    '    ImagePath=CaptureScreenshot(objText,message)
                End If
        If blnDefault_eSwiftReporting Then  
                                        Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
                End If
        connection.Close
        Set QueryResultSet = Nothing
        Set connection = Nothing
        Exit Function
    End If

    rowCount = QueryResultSet.RecordCount
    If rowCount = 0 Then
'            For rowJump = 1 to rowCount
'                strCapturedValue=QueryResultSet.Fields(0).Value
'                CaptureDatabaseTableValue=strCapturedValue
'                outputParameter=strCapturedValue
'                    mismatchCount = mismatchCount+1
'                    mismatchRowNo = mismatchRowNo&","&rowJump
'                End If
'                QueryResultSet.MoveNext
'            Next
        message = "No Data Retrieved"
        status="DONE"
    Call ReporterFunction("e-Swift_FunctionLibrary","CaptureDatabaseTableValue","2",stepName,message)
    Else
            message = "Record Present"
            status="FAIL"
            Flag=1
            Call ReporterFunction("e-Swift_FunctionLibrary","CaptureDatabaseTableValue","1",stepName,message)
                If Flag =1  Then
                                        CaptureDatabaseTableValue = message
                                        blnMainFailFlag = True
                                    '    ImagePath=CaptureScreenshot(objText,message)
                End If
                If blnDefault_eSwiftReporting Then  
                                        Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
                End If
            connection.Close
            Set QueryResultSet = Nothing
            Set connection = Nothing
            Exit Function
    End If
    If Flag =1  Then
                                        CaptureDatabaseTableValue = message
                                        blnMainFailFlag = True
                                    '    ImagePath=CaptureScreenshot(objText,message)
                Else
                                        CaptureDatabaseTableValue = strCapturedValue
                End If

'    If  mismatchCount <> 0 Then
'        message = "One or more Record(s) mismatched with the Expected Data : "&ExpectedData
'        status="FAIL"
'        Flag=1
'    Else
''        message = "All the Record(s) in the column "&tableColumn &" matched successfully with the Expected Data : "&ExpectedData
''        status="DONE"
''    End If
'
'    Call ReporterFunction("e-Swift_FunctionLibrary","ValidateDatabaseTableValue","1",stepName,message)
 
    If blnDefault_eSwiftReporting Then  
                                        Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
                End If
    connection.Close
    Set QueryResultSet = Nothing
    Set connection = Nothing
End Function
'*********************************************************************************************************************************************
Public Function EnterTextTabbedRegionHierarchyWithouthandlingException(formShortTitle,TopLeveltabbedRegionLabel,TopLeveltabbedRegionIndex,LowerLeveltabbedRegionLabel,LowerLeveltabbedRegionIndex,textFieldDescription,valueToEnter)
        On Error Resume Next 
        If Not Environment.Value("blnFatalError") Then 
                Dim blnObjectError 
                blnObjectError=False 
                'startTime=Timer() 
                stepName="Enter Text in multiple levels of tabbed region" 
                inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& TopLeveltabbedRegionLabel & "<br><b>Prompt Or Description of the TextField : </b>" & textFieldDescription & "<br><b>Index of the Tabbed Region : </b>" & TopLeveltabbedRegionIndex & "<br><b>Index of the Text Field : </b>" & textFieldIndex & "<br><b>Value to Enter : </b>" & valueToEnter 
				strStepDescription= "Enter Text ["& valueToEnter &"]in multiple levels of tabbed region having top level tab [" & TopLeveltabbedRegionLabel & "] and low level tab[ " & LowerLeveltabbedRegionLabel & " ]"

                On Error Resume Next 
                Dim intSetFlag,objText 
                intSetFlag=1 

                If formShortTitle<>"" AND TopLeveltabbedRegionLabel<>"" AND TopLeveltabbedRegionIndex<>"" AND LowerLeveltabbedRegionLabel<>"" AND LowerLeveltabbedRegionIndex<>"" AND textFieldDescription<>"" Then 
                'OracleFormWindow("short title:=Sales Orders").OracleTabbedRegion("label:=Order Information","index:=0").OracleTabbedRegion("label:=Main","index:=1").OracleTextField("description:=Customer PO").Enter "123456" 
                                If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTextField("description:="& textFieldDescription).Exist(3) Then 
                                                Set objhierarchialtabbedregion =OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTextField("description:="& textFieldDescription) 
                                                intSetFlag = 0 
                                Else 
                                                status="FAIL" 
                                                Flag=1 
                                                message="Given Text Field Object Not Found." 
                                                blnObjectError=True 
                                                Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegionHierarchy","1",stepName,message) 
                                End If 

                                If intSetFlag = 0 Then 
                                                If objhierarchialtabbedregion.GetROProperty("editable") AND objText.GetROProperty("enabled") Then 
                                                                objhierarchialtabbedregion.Enter valueToEnter 
                                                                                  '// Calling Error_Listener 
'                                                                blnExceptionFlag = Error_Listener ("EnterTextTabbedRegionHierarchy",objText) 
                                                                If Not blnExceptionFlag Then 
                                                                                        status="DONE" 
                                                                                        message="[ " &  valueToEnter & " ] :  has been entered in the Text Field." 
                                                                                        Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegionHierarchy","2",stepName,message) 
                                                                Else 
                                                                                        status="FAIL" 
                                                                                        Flag=1 
                                                                                         message="<br> Unexpected Error Encountered After Entering Text   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] " 
                                                                                        Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegionHierarchy","1",stepName,message)         
                                                                End If 
                                                Else 
                                                                status="FAIL" 
                                                                Flag=1 
                                                                message="The Text field is NonEditable/Disabled." 
                                                                blnObjectError=True 
                                                                Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegionHierarchy","1",stepName,message) 
                                                End If 
                                End If 
                Else 
                                status="FAIL" 
                                Flag=1 
                                message="Insufficient Data Provided." 
                                blnObjectError=True 
                                Call ReporterFunction("e-Swift_FunctionLibrary","EnterTextTabbedRegionHierarchy","1",stepName,message) 
                End If 

                'endTime=Timer() 
                'ExeTime = FormatNumber(endTime - startTime,3) 



        If  blnObjectError  Then 
                 Environment.Value("blnFatalError")=True 
                Call Error_Recovery ("CloseAllForms") 
        End If 

        Set objhierarchialtabbedregion  =Nothing
				If Flag =1  Then
							EnterTextTabbedRegionHierarchy = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objText,message)
				Else
						EnterTextTabbedRegionHierarchy = strFieldValue
				End If
				If blnDefault_eSwiftReporting Then  
						Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If

        End If         
End Function 
'*****************************************************************************************************************
Public Function SetFocusTabbedRegionTableHierarchy(formShortTitle,TopLeveltabbedRegionLabel,TopLeveltabbedRegionIndex,LowerLeveltabbedRegionLabel,LowerLeveltabbedRegionIndex,tableBlockName,tableIndex,dataRowNo,dataColumnName)
    On Error Resume Next
    If Not Environment.Value("blnFatalError") Then
        Dim blnObjectError
        blnObjectError=False
        'startTime=Timer()
        stepName="Set Focus"
        inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& TopLeveltabbedRegionLabel & "<br><b>Index of the Tabbed Region : </b>" & TopLeveltabbedRegionIndex & "<br> <b>Block Name of Oracle table:</b> "& tableBlockName & "<br><b> Row Number: </b>" & dataRowNumber &"<br> <b>Name of the column : </b>" & dataColumnName

        Dim intSetFlag,objTable
        intSetFlag=1

        If formShortTitle<>"" AND TopLeveltabbedRegionLabel<>"" AND TopLeveltabbedRegionIndex<>"" AND LowerLeveltabbedRegionLabel<>"" AND LowerLeveltabbedRegionIndex<>"" AND tableBlockName<>"" Then
        'OracleFormWindow("short title:=Sales Orders").OracleTabbedRegion("label:=Order Information","index:=0").OracleTabbedRegion("label:=Main","index:=1").OracleTextField("description:=Customer PO").Enter "123456"
                If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTable("block name:="& tableBlockName,"index:="& tableIndex).Exist(3) Then
                        Set objTable=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& TopLeveltabbedRegionLabel,"index:=" & TopLeveltabbedRegionIndex).OracleTabbedRegion("label:="& LowerLeveltabbedRegionLabel,"index:=" & LowerLeveltabbedRegionIndex).OracleTable("block name:="& tableBlockName,"index:="& tableIndex)
                        intSetFlag = 0
              
                Else
                        status="FAIL"
                        Flag=1
                        message="Given Object Not Found." 
                        blnObjectError=True
                        Call ReporterFunction("e-Swift_FunctionLibrary","SetFocusTabbedRegionTableHierarchy","1",stepName,message)
                End If

                If intSetFlag = 0 Then
                        If objTable.exist(2) Then
                                If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
                                            strStepDescription = "Set focus on the table [" & tableBlockName & "]" 
                                            ImagePath=CaptureScreenshot(objTable,strStepDescription)
                                        End if

                                objTable.SetFocus dataRowNo,dataColumnName
								blnExceptionFlag = Error_Listener ("SetFocusTabbedRegionTableHierarchy",objTable)
                                          '// Calling Error_Listener
                                
                                If Not blnExceptionFlag Then
                                            status="DONE"
                                            message="Focus is set to " & dataColumnName & "Line No " & dataRowNumber
                                            Call ReporterFunction("e-Swift_FunctionLibrary","SetFocusTabbedRegionTableHierarchy","2",stepName,message)
                                Else
                                            status="FAIL"
                                            Flag=1
                                             message="<br> Unexpected Error Encountered </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
                                            Call ReporterFunction("e-Swift_FunctionLibrary","SetFocusTabbedRegionTableHierarchy","1",stepName,message)    
                                End If
                        Else
                                status="FAIL"
                                Flag=1
                                message=dataColumnName &" Not Editable" &  "  for Line Number : "& dataRowNumber &""
                                blnObjectError=True
                                Call ReporterFunction("e-Swift_FunctionLibrary","SetFocusTabbedRegionTableHierarchy","1",stepName,message)
                        End If
                End If
        Else
                status="FAIL"
                Flag=1
                message="Insufficient Data Provided."
                blnObjectError=True
                Call ReporterFunction("e-Swift_FunctionLibrary","SetFocusTabbedRegionTableHierarchy","1",stepName,message)
        End If

        'endTime=Timer()
        'ExeTime = FormatNumber(endTime - startTime,3) 

        'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

    If  blnObjectError  Then
         Environment.Value("blnFatalError")=True
        Call Error_Recovery ("CloseAllForms")
    End If
    If Flag =1  Then
                            SetFocusTabbedRegionTableHierarchy = message
                            blnMainFailFlag = True
                            ImagePath=CaptureScreenshot(objText,message)
            Else
                            SetFocusTabbedRegionTableHierarchy = True
            End If
        If blnDefault_eSwiftReporting Then  
        Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
        End If
    End If    
End Function


'**********************************************************************************************************************************************************************

'**********************************************************************************************************************************************************************


Function SelectTabMultipleTabbedRegion(formShortTitle,topLevelTabbedRegionLabel,topLeveTabbedRegionIndex,secondLevelTabbedRegionLabel,secondLeveTabbedRegionIndex,tabToSelectLabel,tabToSelectIndex)
            If Not Environment.Value("blnFatalError") Then
                                Dim blnObjectError:blnObjectError=False
                                'startTime=Timer()
                                stepName="Select Tab from multiple Tabbed Region"
                                inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& topLevelTabbedRegionLabel  & "<br><b>Index of the Tabbed Region : </b>" & topLeveTabbedRegionIndex 
                                strStepDescription= "Select the TabbedRegion [" & tabbedRegionLabel & "]"
                                
                                On error resume next
                                   If OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & topLevelTabbedRegionLabel,"index:=" & topLeveTabbedRegionIndex).OracleTabbedRegion("label:=" & secondLevelTabbedRegionLabel,"index:=" & secondLeveTabbedRegionIndex).OracleTabbedRegion("label:=" & tabToSelectLabel,"index:=" & tabToSelectIndex).Exist(gObjectTimeoutLimit) Then
                                                 If OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & topLevelTabbedRegionLabel,"index:=" & topLeveTabbedRegionIndex).OracleTabbedRegion("label:=" & secondLevelTabbedRegionLabel,"index:=" & secondLeveTabbedRegionIndex).OracleTabbedRegion("label:=" & tabToSelectLabel,"index:=" & tabToSelectIndex).GetRoProperty("enabled") Then
                                                            
                                                            Set objOracleTabbedRegion=OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & topLevelTabbedRegionLabel,"index:=" & topLeveTabbedRegionIndex).OracleTabbedRegion("label:=" & secondLevelTabbedRegionLabel,"index:=" & secondLeveTabbedRegionIndex).OracleTabbedRegion("label:=" & tabToSelectLabel,"index:=" & tabToSelectIndex)
                                                             If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
                                                                                            ImagePath=CaptureScreenshot(objOracleTabbedRegion,strStepDescription)
                                                            End if
                                                            OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & topLevelTabbedRegionLabel,"index:=" & topLeveTabbedRegionIndex).OracleTabbedRegion("label:=" & secondLevelTabbedRegionLabel,"index:=" & secondLeveTabbedRegionIndex).OracleTabbedRegion("label:=" & tabToSelectLabel,"index:=" & tabToSelectIndex).Select    
                                                            blnExceptionFlag = Error_Listener ("SelectTabMultipleTabbedRegion",objOracleTabbedRegion)
                                                            If Not blnExceptionFlag Then
                                                                                         status="DONE"
                                                                                        
                                                                                         message=" [ "& tabToSelectLabel &" ] Tabbed Selected"
                                                                                            Call ReporterFunction(strLibraryFileName,"SelectTabMultipleTabbedRegion","2",stepName,message)
                                                            Else
                                                                                          status="FAIL"
                                                                                          Flag=1
                                                                                          message="<br> Unexpected Error Encountered After selecting tab </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
                                                                                          Call ReporterFunction(strLibraryFileName,"SelectTabMultipleTabbedRegion","1",stepName,message)
                                                            End If
                                                    
                                            Else
                                                            status="FAIL"
                                                            Flag=1
                                                            message=" [ "&tabToSelectLabel &" ] Tabbed not enabled"
                                                            blnObjectError=True
                                                            Call ReporterFunction(strLibraryFileName,"SelectTabMultipleTabbedRegion","1",stepName,message)
                                            End If


                              Else
                                            status="FAIL"
                                            Flag=1
                                            message="Tabbed Region Object not Found"
                                             blnObjectError=True
                                            Call ReporterFunction(strLibraryFileName,"SelectTabMultipleTabbedRegion","1",stepName,message)
                            End If
                            Set objOracleTabbedRegion = Nothing
                            'endTime=Timer()
                            'ExeTime = FormatNumber(endTime - startTime,3) 
                            'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
                            If  blnObjectError  Then
                                            Environment.Value("blnFatalError")=True
                                            Call Error_Recovery ("CloseAllForms")
                            End If
                            If Flag =1  Then
                                    SelectTabMultipleTabbedRegion = message
                                    blnMainFailFlag = True
                                    ImagePath=CaptureScreenshot(objOracleTabbedRegion,message)
                            Else
                                    SelectTabMultipleTabbedRegion = True
                            End If
                            If blnDefault_eSwiftReporting Then  
                                    Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
                            End If
    End If
End Function


'**********************************************************************************************************************************************************************

'**********************************************************************************************************************************************************************


Public Function EnterTextMultipleTabbedRegionTable(formShortTitle,topLevelTabbedRegionLabel,topLeveltabbedRegionIndex,secondLevelTabbedRegionLabel,secondLeveltabbedRegionIndex,lowLevelTabbedRegionLabel,lowLeveltabbedRegionIndex,tableBlockName,dataRowNo,dataColumnName,valueToEnter)
     If Not Environment.Value("blnFatalError") Then
                Dim blnObjectError:    blnObjectError=False
                'startTime=timer()
                stepName="Entering Data  under  a table column "
                inputParameter="<b>Short Title of  Form: </b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& tabbedRegionLabel &  "<br><b>Index of the Tabbed Region : </b>" & tabbedRegionIndex & "<br> <b>Block Name of Oracle table:</b> "& tableBlockName & "<br><b> Row Number: </b>" & dataRowNo &"<br> <b>Name of the column : </b>" & dataColumnName &"<br> <b>Value : </b>" & valueToEnter
                strStepDescription= "Enter the value [ " & valueToEnter & " ] in the table [ " & tableBlockName & " ]"
                On error resume next
                If  OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & topLevelTabbedRegionLabel,"index:=" & topLeveTabbedRegionIndex).OracleTabbedRegion("label:=" & secondLevelTabbedRegionLabel,"index:=" & secondLeveltabbedRegionIndex).OracleTabbedRegion("label:=" & lowLevelTabbedRegionLabel,"index:=" & lowLeveltabbedRegionIndex).OracleTable("block name:="& tableBlockName).Exist(gObjectTimeoutLimit)Then
                                                Set objTable = OracleFormWindow("short title:=" & formShortTitle).OracleTabbedRegion("label:=" & topLevelTabbedRegionLabel,"index:=" & topLeveTabbedRegionIndex).OracleTabbedRegion("label:=" & secondLevelTabbedRegionLabel,"index:=" & secondLeveltabbedRegionIndex).OracleTabbedRegion("label:=" & lowLevelTabbedRegionLabel,"index:=" & lowLeveltabbedRegionIndex).OracleTable("block name:="& tableBlockName)
                                                If objTable.IsFieldEditable(dataRowNo,dataColumnName) or  objTable.getROproperty("enabled") Then
                                                    If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
                                                                                                    ImagePath=CaptureScreenshot(objTable,strStepDescription)
                                                                                          End if
                                                                      objTable.EnterField dataRowNo,dataColumnName,valueToEnter
                                                                      blnExceptionFlag = Error_Listener ("EnterTextTabbedRegionTableHierarchy",objTable)
                                                                      If  not blnExceptionFlag Then
                                                                                          status="DONE"
                                                                                          
                                                                                          message="["& valueToEnter & "] entered Under  the "& dataColumnName &" Table Column "
                                                                                          Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegionTableHierarchy","2",stepName,message)
                                                                     Else
                                                                                          status="FAIL"
                                                                                          Flag=1
                                                                                          blnObjectError=True  '// added
                                                                                          message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
                                                                                          Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegionTableHierarchy","1",stepName,message)
                                                                    End If
'                                                                    If  Ucase(objTable.GetFieldValue(dataRowNo,dataColumnName)) = Ucase(valueToEnter)Then
'                                                                                          blnExceptionFlag = Error_Listener ("EnterTextTabbedRegionTable",objTable)
'                                                                                          If  not blnExceptionFlag Then
'                                                                                                              status="DONE"
'                                                                                                              message=valueToEnter & ":  entered Under  the "& dataColumnName &" Table Column "
'                                                                                                              Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegionTable","2",stepName,message)
'                                                                                         Else
'                                                                                                              status="FAIL"
'                                                                                                              Flag=1
'                                                                                                              blnObjectError=True  '// added
'                                                                                                              message="<br> Unexpected Error Encountered After Entering Text in Table </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
'                                                                                                              Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegionTable","1",stepName,message)
'                                                                                          End If
'                                                                    End If


                                        Else
                                                                        Flag=1
                                                                        status="FAIL"
                                                                         blnObjectError=True  '// added
                                                                        message="[ " & dataColumnName & " ]: Table Column Field  is Not Editable"
                                                                       Call ReporterFunction(strLibraryFileName,"EnterTextTabbedRegionTableHierarchy","1",stepName,message)
                                        End If
            Else
                                                                        Flag=1
                                                                        status="FAIL"
                                                                         blnObjectError=True  '// added
                                                                        message="[ " & dataColumnName & " ]: Not Found "
                                                        
            End If
              'endTime=timer()
            'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
            If  blnObjectError  Then
                        Environment.Value("blnFatalError")=True
                        Call Error_Recovery ("CloseAllForms")
            End If
                
                Set objTable=nothing                   ' Added

                If Flag =1  Then
                            EnterTextTabbedRegionTable = message
                            blnMainFailFlag = True
                            ImagePath=CaptureScreenshot(objTable,message)
            Else
                            EnterTextTabbedRegionTable = True
            End If
            If blnDefault_eSwiftReporting Then  
            Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
            End If
End if 
End Function



'**********************************************************************************************************************************************************************

'**********************************************************************************************************************************************************************


Function ClickButtonTabbedRegionHierarchy(formShortTitle,topLevelTabbedRegionLabel,topLeveltabbedRegionIndex,lowLevelTabbedRegionLabel,lowLeveltabbedRegionIndex,buttonLabelOrDescription)
	 If Not Environment.Value("blnFatalError") Then
'					Dim blnObjectError : blnObjectError=False
					Dim objButton,intSetFlag
					'startTime=Timer()
					stepName="Click Button"
					inputParameter="<b>Short Title of the Form :</b>"& formShortTitle &"<br><b>Label of the Tabbed Region : </b>"& topLevelTabbedRegionLabel & "<br><b>Index of the Tabbed Region : </b>" & topLeveltabbedRegionIndex & "<br><b>Label or Description of the Button  : </b>" & buttonLabelOrDescription
					strStepDescription= "Click the button [" & buttonDescriptionOrLabelOrDeveloperName & "] in TabbedRegion [" & topLevelTabbedRegionLabel & "]"
					On Error Resume Next
					intSetFlag=1
					If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& topLevelTabbedRegionLabel,"index:=" & topLeveltabbedRegionIndex).OracleTabbedRegion("label:="& lowLevelTabbedRegionLabel,"index:=" & lowLeveltabbedRegionIndex).OracleButton("label:="& buttonLabelOrDescription).Exist(gObjectTimeoutLimit) Then
										Set objButton=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& topLevelTabbedRegionLabel,"index:=" & topLeveltabbedRegionIndex).OracleTabbedRegion("label:="& lowLevelTabbedRegionLabel,"index:=" & lowLeveltabbedRegionIndex).OracleButton("label:="& buttonLabelOrDescription)
										intSetFlag=0
					ElseIf OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& topLevelTabbedRegionLabel,"index:=" & topLeveltabbedRegionIndex).OracleTabbedRegion("label:="& lowLevelTabbedRegionLabel,"index:=" & lowLeveltabbedRegionIndex).OracleButton("description:="& buttonLabelOrDescription).Exist(gObjectTimeoutLimit) Then
										Set objButton=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& topLevelTabbedRegionLabel,"index:=" & topLeveltabbedRegionIndex).OracleTabbedRegion("label:="& lowLevelTabbedRegionLabel,"index:=" & lowLeveltabbedRegionIndex).OracleButton("description:="& buttonLabelOrDescription)
										intSetFlag=0
					Else
										status="FAIL"
										Flag=1
										message=" Button Object "& buttonLabelOrDescription & " Not Found."
										blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"ClickButtonTabbedRegionHierarchy","1",stepName,message)
					End If	
					If intSetFlag=0 Then
										If objButton.GetROProperty("enabled") Then
											If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																		ImagePath=CaptureScreenshot(objButton,strStepDescription)
																	End if
														objButton.Click
														blnExceptionFlag = Error_Listener (stepName,objButton)
														If Not blnExceptionFlag Then
																	status="DONE"
																	message="[ " & buttonLabelOrDescription &"] Button clicked Successfully."
																	Call ReporterFunction(strLibraryFileName,"ClickButtonTabbedRegionHierarchy","2",stepName,message)
																	
														Else
																	status="FAIL"
																	Flag=1
																	message="[ " & buttonLabelOrDescription &"] Button Failed to Click " & Err.Description
																	Call ReporterFunction(strLibraryFileName,"ClickButtonTabbedRegionHierarchy","1",stepName,message)    
														End If
										Else
														status="FAIL"
														Flag=1
														message="[ " & buttonLabelOrDescription & " ] Button is Disabled."
														blnObjectError=True
														Call ReporterFunction(strLibraryFileName,"ClickButtonTabbedRegionHierarchy","1",stepName,message)
										End If
				End If
				Set objButton=Nothing
				'endTime=Timer()
				'ExeTime = FormatNumber(endTime - startTime,3) 
				'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

				If  blnObjectError  Then
					Environment.Value("blnFatalError")=True
					Call Error_Recovery ("CloseAllForms")
		 		End If
				If Flag =1  Then
									ClickButtonTabbedRegionHierarchy = message
									blnMainFailFlag = True
									ImagePath=CaptureScreenshot(objButton,message)
				Else
									ClickButtonTabbedRegionHierarchy = True
				End If
				If blnDefault_eSwiftReporting Then  
				Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
  End If
End Function




'**********************************************************************************************************************************************************************



'**********************************************************************************************************************************************************************


Function CaptureRequestNumberFromMessagePopUp()'Byref aReturnArray)
 If Not Environment.Value("blnFatalError") Then
         Dim blnObjectError
         blnObjectError=False
         Dim requestNumber 
         blnFound = ""
         'startTime=Timer()
         stepName="Capture the Request Number , if any"
         inputParameter=""
		 Set objOracleNotification=OracleNotification("title:=Message")
         If objOracleNotification.Exist(gObjectTimeoutLimit)     Then
			 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																						ImagePath=CaptureScreenshot(objOracleNotification,stepName)
																	End if
                                            strValueMessage = objOracleNotification.GetROProperty("message")
                                            strReturn = ExtractNumberFromString(strValueMessage ,aReturnArray)
											If blnExceptionFlag Then
																	status="FAIL"
																	Flag=1
																	message="<br> Unexpected Error Encountered while fetching the Run Time Data</br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																	Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromMessagePopUp","1",stepName,message)
											End If
											If  strReturn = True Then
																	

																	status="DONE"
																	
																	Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromMessagePopUp","2",stepName,message)
																	outputParameter= ConvertArrayToString(aReturnArray)
																	message=" Concurrent Request Number  [" & outputParameter & "] Successfully Extracted: "
											else
																	status="FAIL"
																	Flag=1
																	message="<br> No Number Found in Note Message </br > ' " & strValueMessage & "'"
																	Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromMessagePopUp","1",stepName,message)
											End If
        Else           
											 status="FAIL"
											 message=" Oracle Note Pop-up not Found" 
											 blnObjectError=True
											 Flag=1
											 Call ReporterFunction(strLibraryFileName,"CaptureRequestNumberFromMessagePopUp","1",stepName,message)
        End If
		Set objOracleNotification=Nothing
       If  blnObjectError  Then
											 Environment.Value("blnFatalError")=True
											Call Error_Recovery ("CONTINUE")
        End If

       If strReturn = True Then
'											CaptureRequestNumberFromDecisionPopUp = True
                                               '////// Changes Made .
											CaptureRequestNumberFromMessagePopUp = outputParameter
       Else
											 CaptureRequestNumberFromMessagePopUp = message
											 blnMainFailFlag = True
											 ImagePath=CaptureScreenshot(objOracleNotification,message)
		End If 
		If blnDefault_eSwiftReporting Then  
											Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
		
End If

End Function
'*************************************************************************************************************************************
'***************************************************************************************************************
'Function: SetFocusForm_NotEditable
'Descriprion: It field is not editable and its enabled
'**************************************************************************************************************
Public Function SetFocusForm_NotEditable(formShortTitle,textFieldDeveloperName)
If Not Environment.Value("blnFatalError") Then
					Dim blnObjectError:blnObjectError=False
					Dim textFieldPrompt
					'startTime=Timer()
					stepName="Set Focus"
					inputParameter="<b>Title of the Oracle Form Window :</b>" & formShortTitle & "<br><b> Developer Name of the Text Field :</b> " & textFieldDeveloperName 
					strStepDescription= "Set focus on the TextField [" & textFieldDeveloperName & "]"
					
					On error resume next
					If  OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName).Exist(gObjectTimeoutLimit) Then
										If    OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName).GetROProperty("enabled")=True  Then
													  OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName).SetFocus
													  Set objTextField=OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName)
													  If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																						ImagePath=CaptureScreenshot(objTextField,strStepDescription)
																					End if
													  blnExceptionFlag = Error_Listener ("SetFocusForm_NotEditable",objTextField)
													  If  Not blnExceptionFlag Then
																	If OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName).GetROProperty("prompt")<>"" Then
																				 textFieldPrompt=OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName).GetROProperty("prompt")
																	ElseIf OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName).GetROProperty("description")<>"" Then
																				textFieldPrompt=OracleFormWindow("short title:=" & formShortTitle).OracleTextField("developer name:=" & textFieldDeveloperName).GetROProperty("description")
																	End If
																					status="DONE"
																					
																					message="Focus is set to" & textFieldPrompt
																					Call ReporterFunction(strLibraryFileName,"SetFocusForm_NotEditable","2",stepName,message)
																	Else
																					Flag=1
																					status="FAIL"
																					message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
																					Call ReporterFunction(strLibraryFileName,"SetFocusForm_NotEditable","1",stepName,message)																	
																	End If	
		
									 Else		       			  
														 status="FAIL"
														 Flag=1
														 message=textFieldPrompt &"Not Enabled" 
														 blnObjectError=True
														 Call ReporterFunction(strLibraryFileName,"SetFocusForm_NotEditable","1",stepName,message)
								   End If
			   Else
			
								 status="FAIL"
								 Flag=1
								 message=textFieldPrompt & " Doesn't exist"
								 blnObjectError=True
								 Call ReporterFunction(strLibraryFileName,"SetFocusForm_NotEditable","1",stepName,message)
			  End If
			Set textFieldPrompt=Nothing
			set objTextField=Nothing
			'	stop
				'endTime=Timer()
				'exeTime= FormatNumber(endTime - startTime,3) 
				'Call UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
				 If  blnObjectError  Then
						Environment.Value("blnFatalError")=True
						Call Error_Recovery ("CloseAllForms")
				End If
			    	If Flag =1  Then
							SetFocusForm = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTextField,message)
					Else
							SetFocusForm = True
					End If
					If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
					End If
End If
End Function
'***********************************************************************************************************************************
Public Function ClickButtonwitherror(formShortTitle,buttonDescriptionOrLabelOrDeveloperName)
If Not Environment.Value("blnFatalError") Then
'		Dim blnObjectError
		blnObjectError=False
		startTime=Timer()
		stepName="Click Button"
		inputParameter="<b>Short Title of the Form : </b>" & formShortTitle & "<br><b>Button Description/Label : </b>" & buttonDescriptionOrLabelOrDeveloperName
		strStepDescription= "Click the button [" & buttonDescriptionOrLabelOrDeveloperName & "]"
		On Error Resume Next
		Dim objButton,intSetFlag
		intSetFlag=1

		If OracleFormWindow("short title:="& formShortTitle).OracleButton("description:="& buttonDescriptionOrLabelOrDeveloperName).Exist(gObjectTimeoutLimit) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle).OracleButton("description:="& buttonDescriptionOrLabelOrDeveloperName)
				intSetFlag=0
		ElseIf OracleFormWindow("short title:="& formShortTitle).OracleButton("label:="& buttonDescriptionOrLabelOrDeveloperName).Exist(gObjectTimeoutLimit) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle).OracleButton("label:="& buttonDescriptionOrLabelOrDeveloperName)
				intSetFlag=0
		ElseIf OracleFormWindow("short title:="& formShortTitle).OracleButton("developer name:="& buttonDescriptionOrLabelOrDeveloperName).Exist(gObjectTimeoutLimit) Then
				Set objButton = OracleFormWindow("short title:="& formShortTitle).OracleButton("developer name:="& buttonDescriptionOrLabelOrDeveloperName)
				intSetFlag=0
		Else
				status="FAIL"
				Flag=1
				message="[ " & buttonDescriptionOrLabelOrDeveloperName &"] Button does not Exist."
				blnObjectError=True
				Call ReporterFunction(strLibraryFileName,"ClickButton","1",stepName,message)
		End If

		If intSetFlag=0 Then
				If objButton.GetROProperty("enabled") Then
						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
											ImagePath=CaptureScreenshot(objButton,strStepDescription)
										End if  
							objButton.Click
							If blnIgnoreError = True  Then
										blnExceptionFlag = Error_Listener ("ClickButton",objButton)
							else
										blnExceptionFlag= False
										blnIgnoreError = False
							End If
							If  Not blnExceptionFlag Then
										status="DONE"
										message="[ " & buttonDescriptionOrLabelOrDeveloperName &"] Button clicked Successfully."
										Call ReporterFunction(strLibraryFileName,"ClickButton","2",stepName,message)
									 
							else
										Flag=1
										status="FAIL"
										message =  "<br> Unexpected Error Encountered : </br > <b>  ERROR   :=   [   "  & Environment.Value("strFatalMessage")  &" ] "
										Call ReporterFunction(strLibraryFileName,"ClickButton","1",stepName,message) 
							End If     
				Else
							status="FAIL"
							Flag=1
							message="[ " & buttonDescriptionOrLabelOrDeveloperName &"] Button is Disabled."
							blnObjectError=True
							  Call ReporterFunction(strLibraryFileName,"ClickButton","1",stepName,message)
				End If
		End If 
		Set objButton=Nothing
		'endTime=Timer()
		'ExeTime = FormatNumber(endTime - startTime,3)
		'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)

		If  blnObjectError  Then
				Environment.Value("blnFatalError")=True
				Call Error_Recovery ("CloseAllForms")
		End If
		If Flag =1  Then
							ClickButton = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objButton,message)
			Else
							ClickButton = True
			End If
		If blnDefault_eSwiftReporting Then  
		Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
		End If
End if 
End Function
'*********************************************************************************************************************************************************************
Public Function SetFocusTabbedRegionTableHierarchyWithoutIndex(formShortTitle,topLevelTabbedRegionLabel,lowLevelTabbedRegionLabel,tableBlockName,dataRowNumber,dataColumnName)
  If Not Environment.Value("blnFatalError") Then
					'startTime=timer()
					stepName="Set Focus"
					inputParameter="Set Focus to" & dataColumnName
					strStepDescription= "Set focus on the TabbedRegionTableHierarchy [ " & tableBlockName & "]"
					On error resume next
					 If OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& topLevelTabbedRegionLabel).OracleTabbedRegion("label:="& lowLevelTabbedRegionLabel).OracleTable("block name:="& tableBlockName).Exists(gObjectTimeoutLimit) Then
											Set objTable=OracleFormWindow("short title:="& formShortTitle).OracleTabbedRegion("label:="& topLevelTabbedRegionLabel).OracleTabbedRegion("label:="& lowLevelTabbedRegionLabel).OracleTable("block name:="& tableBlockName)
											If objTableIsFieldEditable(dataRowNumber,dataColumnName)Then
												If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then

																								ImagePath=CaptureScreenshot(objTable,strStepDescription)
																							End if
																objTable.SetFocus dataRowNumber,dataColumnName

																blnExceptionFlag = Error_Listener ("SetFocusTabbedRegionTableHierarchy",objTable)


																If Not blnExceptionFlag Then
																							status="DONE"
																							
																							
																							message="Focus is set to " & dataColumnName & "Line No " & dataRowNumber
																							Call ReporterFunction(strLibraryFileName,"SetFocusTabbedRegionTableHierarchy","2",stepName,message)
																Else
																							status="FAIL"
																							Flag=1
																							message="<br> Unexpected Error Encountered After setfocusing table field   </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																							Call ReporterFunction(strLibraryFileName,"SetFocusTabbedRegionTableHierarchy","1",stepName,message)
																End If
																  
											Else  
																  status="FAIL"
																  Flag=1
																   message= dataColumnName &" Not Editable" &  "  for Line Number : "& dataRowNumber &""
																   blnObjectError=True
																  Call ReporterFunction(strLibraryFileName,"SetFocusTabbedRegionTableHierarchy","1",stepName,message)
							
											End If
					
						  Else 
								
											 status="FAIL"
											 Flag=1
											 message= dataColumnName & " Doesn't exist"
											 blnObjectError=True
											  Call ReporterFunction(strLibraryFileName,"SetFocusTabbedRegionTableHierarchy","1",stepName,message)
					
						End If

						Set objTable=Nothing
						'endTime=Timer()
						'exeTime= FormatNumber(endTime - startTime,3) 

						'Call   UpdateResultHtml(status,inputParameter,outputParameter,message,exeTime,stepName)
				
						If  blnObjectError  Then
										Environment.Value("blnFatalError")=True
										Call Error_Recovery ("CloseAllForms")
						End If
				
						If Flag =1  Then
							SetFocusTabbedRegionTableHierarchy = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objTable,message)
						Else
							SetFocusTable = True
						End If
						If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
						End If
	End If
End Function
'************************************************************************************************************************
Public Function SelectMenuwithoutmessage(formShortTitle,menuPath)
   If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError:   blnObjectError=False
				inputParameter="<b>Short Title of the Form : </b>"& formShortTitle &"<br><b>Menu Path : </b>"& menuPath
				strStepDescription= "Select from Menu [" & menuPath & "]"
				On error resume next
                If  OracleFormWindow("short title:="& formShortTitle).Exist(gObjectTimeoutLimit) Then 
										If OracleFormWindow("short title:="& formShortTitle).GetROProperty("enabled") Then
														set objAppObj = OracleFormWindow("short title:="& formShortTitle)
														OracleFormWindow("short title:="& formShortTitle,"index:=1").SelectMenu menuPath 'Performing Navigation
														Select Case menuPath
																			Case "File->Save"                  
																							otherFlag=1
																							selectFlag=1
																			Case "View->Query By Example->Enter"        
																							otherFlag=1
																							selectFlag=2
																			Case "View->Query By Example->Run"      
																							otherFlag=1
																							selectFlag=3
							
																			Case Else                  
																							otherFlag=0 
														End Select
										End if 
				ElseIf OracleNavigator("short title:=Navigator").GetROProperty("enabled") Then
										set objAppObj = OracleNavigator("short title:=Navigator")
										OracleNavigator("short title:=Navigator").SelectMenu menuPath  'Selecting from Navigator Page Menu
										If  Err.Number=0 Then
																stepName="Select from Navigator Menu"
																message="[ " & menuPath & " ] menu selection  done  Successfully"
																status="PASS"
																Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
										Else
																stepName="Select from Menu"
																message="Could Not Select the Menu path ' " & menuPath &" ' . Reason:="& Err.Description
																Flag=1
																status="FAIL"
																blnObjectError=True
																Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
										End If   
              Else
										stepName="Select from Navigator Menu"
										message="Oracle Navigator/Form not Found / Disabled."
										Flag=1
										status="FAIL"
										blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
			End If
'			If  otherFlag=1Then  
'										If selectFlag=1Then  'Validation for Saving
'															 If  Instr(1,OracleStatusLine("index:=0").GetROProperty("message"),"Transaction complete")<>0  Then''''''''''''
'																			   stepName="Save Transaction"
'																			   message="Transaction Saved"
'																			   status="DONE"
'																			   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
'															 elseIf Instr(1,OracleStatusLine("index:=0").GetROProperty("message"),"transaction(s) completed")<>0  Then''''''''''''
'																			   stepName="Save Transaction"
'																			   message="Transaction Saved"
'																			   status="DONE"
'																			   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
'															 elseIf Instr(1,OracleStatusLine("index:=0").GetROProperty("message"),"No changes")<>0  Then''''''''''
'																			   stepName="Save Transaction"
'																			   message="Transaction  Saved"
'																			   status="DONE"
'																			   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
'															 elseIf OracleNotification("title:=Error").Exist(1) Then 
'																				If Instr(1,OracleNotification("title:=Error").GetROProperty("message"),"APP-AR-11526") then
'																							   stepName="Save Transaction"
'																							   message="Transaction Saved"
'																							   status="DONE"
'																							   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
'																				End if 
'															 elseIf OracleNotification("title:=Note").Exist(gObjectTimeoutLimit) then
'																			   stepName="Save Transaction"
'																			   message="Note found"
'																			   status="DONE"
'																			   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
'															elseIf OracleNotification("title:=Caution").Exist(gObjectTimeoutLimit) then
'																				stepName="Save Transaction"
'																				message="Caution Window found "
'																				status="DONE"
'																				Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
'															elseIf OracleFormWindow("short title:=Choose an option").Exist(gObjectTimeoutLimit) then
'																			   stepName="Save Transaction"
'																			   message="Option window found"
'																			   status="DONE"
'																			   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
'															 elseIf OracleFormWindow("short title:=Enter Reason for.....").Exist then
'																			   stepName="Save Transaction"
'																			   message="Transaction Saved"
'																			   status="DONE"
'																			   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
'															Else 
'																				stepName="Save Transaction"
'																				message="Fail to save "
'																				Flag=1
'																				status="FAIL"
'																				blnObjectError=True
'																				Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
'															 End If  
'									 End If
'  
'									  If selectFlag=2Then  'Validation for Enter Query
'															 If  OracleStatusLine("message:=Enter a query;  .*").Exist(1) Then
'																						stepName="Enter Query "
'																						message="Query(F11) "
'																						status="DONE"
'																						Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
'															Else
'																						stepName="Enter Query "
'																						message="Fail to Query "
'																						Flag=1
'																						status="FAIL"
'																						blnObjectError=True
'																						Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
'															End If
'									 End If
'    
'									 If selectFlag=3Then  'Validation for Execute Query
'														  If  OracleStatusLine("message:=.*Query caused no records to be retrieved.*").Exist(1) Then
'																					   stepName="Execute Query"
'																					   message="ReQuery(Ctrl+F11)  "
'																					   status="DONE"
'																					   Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
'														 Else
'																					  If blnIgnoreValidation Then
'																									  stepName="Execute Query"
'																									  message=" No Data retrieved"
'																									  status="DONE"
'																									  Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
'																									  blnIgnoreValidation = False
'																						 else
'																									  stepName="Execute Query"
'																									  message="No data retrieved "
'																									  Flag=1
'																									  status="FAIL"
'																									  Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
'																					 End If
'														 End If
'									  End If
'    End If
'	If  otherFlag=0Then 'Validation for Others
'									 
                                                 If  Err.Number=0  Then
															  stepName="Select from Menu"
															  message="[ " & menuPath & "] was selected from menu path  successfully"
															  status="DONE"
															  Call ReporterFunction(strLibraryFileName,"SelectMenu","2",stepName,message)
									  Else
															  stepName="Select from Menu"
															  message="Invalid Menu path ' " & menuPath &"' Reason:=" & Err.Description
															  Flag=1
															  status="FAIL"
															  blnObjectError=True
															  Call ReporterFunction(strLibraryFileName,"SelectMenu","1",stepName,message)
									  End If
    End If

	If status = "PASS" or status = "DONE"  Then
									If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																ImagePath=CaptureScreenshot(objAppObj,strStepDescription)
									End if
	End If


    If  blnObjectError  Then
									Environment.Value("blnFatalError")=True
									Call Error_Recovery ("CloseAllForms")
     End If

    If Flag =1  Then
									SelectMenu = message
									blnMainFailFlag = True
									ImagePath=CaptureScreenshot(stepName,message)
    Else
									SelectMenu = True
    End If

    If blnDefault_eSwiftReporting Then  
									Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
    End If

'End if
End Function
'***********************************************************************************************************************************
Function ValidateStatusBarMessage(ExpectedData)
 If Not Environment.Value("blnFatalError") Then
				Dim blnObjectError:   blnObjectError=False
				'startTime=Timer()
				stepName="Validate Status Line Message"
				inputParameter=""
				strStepDescription= "Validate Status Line Message"
				blnCaptureFlag = TRue
				If OracleStatusLine("micclass:=OracleStatusLine").Exist( gObjectTimeoutLimit) Then
								Set objstatusLine= OracleStatusLine("micclass:=OracleStatusLine")
								 If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																		ImagePath=CaptureScreenshot(objstatusLine,strStepDescription)
																	  End if
								sActualValue = objstatusLine.GetROProperty("message")
								If  Instr(sActualValue , ExpectedData)> 0  Then
																	Call ReporterFunction(strLibraryFileName,"ValidateStatusBarMessage","2","TextField ",ExpectedData &  ": has been successfully Validated in the "& textFieldPromptOrDescription &"Text  field")
																	 status="PASS"
																	 message="Expected Data :  [ "&  ExpectedData  & " ] : Matches with Actual  Value : [ " & sActualValue & " ] "
																	  ValidateStatusBarMessage = TRUE
																	  blnCaptureFlag =  True
				
								Else
																	Reporter.ReportEvent micFail,message,message
																	Call ReporterFunction(strLibraryFileName,"ValidateStatusBarMessage","1","TextField ", ExpectedData & " Expected Value Not Found , Actual Value = " & sActualValue)
																	status="FAIL"
																	Flag=1
																	message= " Expected Data  : [ " & ExpectedData  &" ] NOT  Matching with  Actual Value : [  " & sActualValue &" ] "
																	ValidateStatusBarMessage = FALSE
								End If
				Else
								Call ReporterFunction(strLibraryFileName,"ValidateStatusBarMessage","1","TextField ", " Status bar Not Found")
								status="FAIL"
								Flag=1
								message="Status bar Not Found"
								ValidateTextFieldValue = FALSE
				End if 
				
				Set objstatusLine= Nothing

				'endTime=Timer()
				'ExeTime = FormatNumber(endTime - startTime,3) 
				'Call UpdateResultHtml(status,inputParameter,outputParameter,message,ExeTime,stepName)
				If  blnObjectError  Then
							Environment.Value("blnFatalError")=True
							Call Error_Recovery ("CloseAllForms")
				End if 
				
				If Flag =1  Then
							ValidateStatusBarMessage = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(objstatusLine,message)
				Else
							ValidateStatusBarMessage = True
				End If
				If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
				
End If 
	
End Function
'*****************************************************************************************************************************************************************************


Public Function SelectRadioGroupWebOptional(browserName,radioGroupName,optionToSelect)
If Not Environment.Value("blnFatalError") Then
			Dim blnObjectError:	   blnObjectError=False
			'startTime=Timer()
			stepName="Select Radio Group"
			inputParameter="<b>Browser Name :</b>" & browserName &"<br><b>Radio Group Name : </b>"& radioGroupName &"<br><b>Option to Select : </b>" & optionToSelect
			strStepDescription= "Select the Radio Group [" & radioGroupName & "]"
			
			On Error Resume Next
			Set obj= Description.Create()
			obj("micclass").value="Page"
            Set childObj=Browser("name:="& browserName).ChildObjects(obj)
			pageTitle=childObj(0).getroproperty("title")
			indexToSelect=cStr(optionToSelect-1)
			If  Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName).Exist(gObjectTimeoutLimit) Then
										If Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName).GetROProperty("disabled")=0 Then
																strAvailableOptions=Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName).GetROProperty("all items")
																If InStr(1,strAvailableOptions,optionToSelect)<>0 Then		' Check if the option exists
																						
																						Set radioObject=Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName)
																						If blnCaptureFlag = True  or  blnCreateImageEachStep = True or blnCreateTrainingDoc Then
																																	ImagePath=CaptureScreenshot(radioObject,strStepDescription)
																						End if
																						Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName).Select optionToSelect
																						blnExceptionFlag = Error_Listener ("Select Radio Button",radioObject)
																						If Not blnExceptionFlag Then
																											If Browser("name:="& browserName).Page("title:="& pageTitle).WebRadioGroup("name:="& radioGroupName).GetROProperty("value")=optionToSelect +1 Then
																																status="DONE"
																																
																																message="Radio Group Option [ " & optionToSelect & " ]  Selected"
																																Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWebOptional","2",stepName,message)
																											Else
																																status="FAIL"
																																Flag=1
																																message="Radio Group Option [ " & optionToSelect & " ] Failed to Select."
																																blnObjectError=True
																																Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWebOptional","1",stepName,message)
																											End If
																						Else
																											status="FAIL"
																											Flag=1
																											message="<br> Unexpected Error Encountered while selecting Radio Button </br > <b>  ERROR   :=   [  "  & Environment.Value("strFatalMessage") &" ] "
																											Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWebOptional","1",stepName,message)
												
																						End If
																			
															Else
																						status="FAIL"
																						Flag=1
																						message="[ " & optionToSelect & " ] is an Invalid Selection."
																						blnObjectError=True
																						Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWebOptional","1",stepName,message)
															End If
										Else
															status="FAIL"
															Flag=1
															message="[ " & radioGroupName & " ] is Disabled."
															blnObjectError=True
															Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWebOptional","1",stepName,message)
										End If
						Else
										status="FAIL"
										Flag=1
										message="Web Radio Group Missing/not Matching"
										 blnObjectError=True
										Call ReporterFunction(strLibraryFileName,"SelectRadioGroupWebOptional","1",stepName,message)
						End If

				Set obj=Nothing
				Set childObj=Nothing
				 If  blnObjectError  Then
								Environment.Value("blnFatalError")=True
								'Call Error_Recovery ("CloseAllForms")
				End If
				If Flag =1  Then
							SelectRadioGroupWebOptional = message
							blnMainFailFlag = True
							ImagePath=CaptureScreenshot(radioObject,message)
				Else
							SelectRadioGroupWebOptional = True
				End If
				If blnDefault_eSwiftReporting Then  
							Call UpdateResultHtml (stepName,inputParameter,message,status,outputParameter)
				End If
 End If
End Function






